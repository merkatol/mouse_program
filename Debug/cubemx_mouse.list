
cubemx_mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001af8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001cdc  08001cdc  00011cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d48  08001d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000016c  2000000c  08001d5c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000178  08001d5c  00020178  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013e22  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026a1  00000000  00000000  00033e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000061c3  00000000  00000000  000364f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009d8  00000000  00000000  0003c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000968  00000000  00000000  0003d098  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00017bf0  00000000  00000000  0003da00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008d5e  00000000  00000000  000555f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007faf2  00000000  00000000  0005e34e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000dde40  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000018e4  00000000  00000000  000ddebc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001cc4 	.word	0x08001cc4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001cc4 	.word	0x08001cc4

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b510      	push	{r4, lr}
 8000226:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <HAL_InitTick+0x40>)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0c      	ldr	r2, [pc, #48]	; (8000268 <HAL_InitTick+0x44>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 f9d6 	bl	80005ec <HAL_SYSTICK_Config>
 8000240:	b968      	cbnz	r0, 800025e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	2c0f      	cmp	r4, #15
 8000244:	d901      	bls.n	800024a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000246:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000248:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800024a:	2200      	movs	r2, #0
 800024c:	4621      	mov	r1, r4
 800024e:	f04f 30ff 	mov.w	r0, #4294967295
 8000252:	f000 f999 	bl	8000588 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000256:	4b03      	ldr	r3, [pc, #12]	; (8000264 <HAL_InitTick+0x40>)
 8000258:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	bf00      	nop
 8000264:	20000000 	.word	0x20000000
 8000268:	20000008 	.word	0x20000008

0800026c <HAL_Init>:
{
 800026c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026e:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
 8000270:	6813      	ldr	r3, [r2, #0]
 8000272:	f043 0310 	orr.w	r3, r3, #16
 8000276:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000278:	2003      	movs	r0, #3
 800027a:	f000 f973 	bl	8000564 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f001 fab8 	bl	80017f8 <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	6811      	ldr	r1, [r2, #0]
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_IncTick+0x14>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000028 	.word	0x20000028
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000028 	.word	0x20000028

080002b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80002b4:	b430      	push	{r4, r5}
 80002b6:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80002b8:	2300      	movs	r3, #0
 80002ba:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80002bc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	f000 808b 	beq.w	80003dc <HAL_ADC_ConfigChannel+0x128>
 80002c6:	4602      	mov	r2, r0
 80002c8:	2301      	movs	r3, #1
 80002ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80002ce:	684b      	ldr	r3, [r1, #4]
 80002d0:	2b06      	cmp	r3, #6
 80002d2:	d829      	bhi.n	8000328 <HAL_ADC_ConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80002d4:	6805      	ldr	r5, [r0, #0]
 80002d6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80002d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80002dc:	3b05      	subs	r3, #5
 80002de:	241f      	movs	r4, #31
 80002e0:	409c      	lsls	r4, r3
 80002e2:	ea20 0004 	bic.w	r0, r0, r4
 80002e6:	680c      	ldr	r4, [r1, #0]
 80002e8:	fa04 f303 	lsl.w	r3, r4, r3
 80002ec:	4303      	orrs	r3, r0
 80002ee:	636b      	str	r3, [r5, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80002f0:	680b      	ldr	r3, [r1, #0]
 80002f2:	2b09      	cmp	r3, #9
 80002f4:	d938      	bls.n	8000368 <HAL_ADC_ConfigChannel+0xb4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80002f6:	6815      	ldr	r5, [r2, #0]
 80002f8:	68e8      	ldr	r0, [r5, #12]
 80002fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80002fe:	3b1e      	subs	r3, #30
 8000300:	2407      	movs	r4, #7
 8000302:	409c      	lsls	r4, r3
 8000304:	ea20 0004 	bic.w	r0, r0, r4
 8000308:	688c      	ldr	r4, [r1, #8]
 800030a:	fa04 f303 	lsl.w	r3, r4, r3
 800030e:	4303      	orrs	r3, r0
 8000310:	60eb      	str	r3, [r5, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000312:	680b      	ldr	r3, [r1, #0]
 8000314:	3b10      	subs	r3, #16
 8000316:	2b01      	cmp	r3, #1
 8000318:	d934      	bls.n	8000384 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800031a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800031c:	2300      	movs	r3, #0
 800031e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000322:	b002      	add	sp, #8
 8000324:	bc30      	pop	{r4, r5}
 8000326:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8000328:	2b0c      	cmp	r3, #12
 800032a:	d80e      	bhi.n	800034a <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800032c:	6805      	ldr	r5, [r0, #0]
 800032e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000330:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000334:	3b23      	subs	r3, #35	; 0x23
 8000336:	241f      	movs	r4, #31
 8000338:	409c      	lsls	r4, r3
 800033a:	ea20 0004 	bic.w	r0, r0, r4
 800033e:	680c      	ldr	r4, [r1, #0]
 8000340:	fa04 f303 	lsl.w	r3, r4, r3
 8000344:	4303      	orrs	r3, r0
 8000346:	632b      	str	r3, [r5, #48]	; 0x30
 8000348:	e7d2      	b.n	80002f0 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800034a:	6805      	ldr	r5, [r0, #0]
 800034c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800034e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000352:	3b41      	subs	r3, #65	; 0x41
 8000354:	241f      	movs	r4, #31
 8000356:	409c      	lsls	r4, r3
 8000358:	ea20 0004 	bic.w	r0, r0, r4
 800035c:	680c      	ldr	r4, [r1, #0]
 800035e:	fa04 f303 	lsl.w	r3, r4, r3
 8000362:	4303      	orrs	r3, r0
 8000364:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000366:	e7c3      	b.n	80002f0 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000368:	6815      	ldr	r5, [r2, #0]
 800036a:	6928      	ldr	r0, [r5, #16]
 800036c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000370:	2407      	movs	r4, #7
 8000372:	409c      	lsls	r4, r3
 8000374:	ea20 0004 	bic.w	r0, r0, r4
 8000378:	688c      	ldr	r4, [r1, #8]
 800037a:	fa04 f303 	lsl.w	r3, r4, r3
 800037e:	4303      	orrs	r3, r0
 8000380:	612b      	str	r3, [r5, #16]
 8000382:	e7c6      	b.n	8000312 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8000384:	6813      	ldr	r3, [r2, #0]
 8000386:	4816      	ldr	r0, [pc, #88]	; (80003e0 <HAL_ADC_ConfigChannel+0x12c>)
 8000388:	4283      	cmp	r3, r0
 800038a:	d005      	beq.n	8000398 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800038c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000394:	2001      	movs	r0, #1
 8000396:	e7c1      	b.n	800031c <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000398:	6898      	ldr	r0, [r3, #8]
 800039a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800039e:	d11b      	bne.n	80003d8 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003a0:	6898      	ldr	r0, [r3, #8]
 80003a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a6:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003a8:	680b      	ldr	r3, [r1, #0]
 80003aa:	2b10      	cmp	r3, #16
 80003ac:	d001      	beq.n	80003b2 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003ae:	2000      	movs	r0, #0
 80003b0:	e7b4      	b.n	800031c <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <HAL_ADC_ConfigChannel+0x130>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	490c      	ldr	r1, [pc, #48]	; (80003e8 <HAL_ADC_ConfigChannel+0x134>)
 80003b8:	fba1 1303 	umull	r1, r3, r1, r3
 80003bc:	0c9b      	lsrs	r3, r3, #18
 80003be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80003c2:	0059      	lsls	r1, r3, #1
 80003c4:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80003c6:	e002      	b.n	80003ce <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 80003c8:	9b01      	ldr	r3, [sp, #4]
 80003ca:	3b01      	subs	r3, #1
 80003cc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80003ce:	9b01      	ldr	r3, [sp, #4]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d1f9      	bne.n	80003c8 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003d4:	2000      	movs	r0, #0
 80003d6:	e7a1      	b.n	800031c <HAL_ADC_ConfigChannel+0x68>
 80003d8:	2000      	movs	r0, #0
 80003da:	e79f      	b.n	800031c <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 80003dc:	2002      	movs	r0, #2
 80003de:	e7a0      	b.n	8000322 <HAL_ADC_ConfigChannel+0x6e>
 80003e0:	40012400 	.word	0x40012400
 80003e4:	20000008 	.word	0x20000008
 80003e8:	431bde83 	.word	0x431bde83

080003ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80003ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80003ee:	6803      	ldr	r3, [r0, #0]
 80003f0:	689a      	ldr	r2, [r3, #8]
 80003f2:	f012 0f01 	tst.w	r2, #1
 80003f6:	d101      	bne.n	80003fc <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80003f8:	2000      	movs	r0, #0
}
 80003fa:	bd38      	pop	{r3, r4, r5, pc}
 80003fc:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80003fe:	689a      	ldr	r2, [r3, #8]
 8000400:	f022 0201 	bic.w	r2, r2, #1
 8000404:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000406:	f7ff ff4f 	bl	80002a8 <HAL_GetTick>
 800040a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800040c:	6823      	ldr	r3, [r4, #0]
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	f013 0f01 	tst.w	r3, #1
 8000414:	d00e      	beq.n	8000434 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000416:	f7ff ff47 	bl	80002a8 <HAL_GetTick>
 800041a:	1b40      	subs	r0, r0, r5
 800041c:	2802      	cmp	r0, #2
 800041e:	d9f5      	bls.n	800040c <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000420:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000428:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8000430:	2001      	movs	r0, #1
 8000432:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000434:	2000      	movs	r0, #0
 8000436:	bd38      	pop	{r3, r4, r5, pc}

08000438 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000438:	2800      	cmp	r0, #0
 800043a:	f000 808a 	beq.w	8000552 <HAL_ADC_Init+0x11a>
{
 800043e:	b570      	push	{r4, r5, r6, lr}
 8000440:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000442:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000444:	2b00      	cmp	r3, #0
 8000446:	d04d      	beq.n	80004e4 <HAL_ADC_Init+0xac>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000448:	4620      	mov	r0, r4
 800044a:	f7ff ffcf 	bl	80003ec <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800044e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000450:	f013 0310 	ands.w	r3, r3, #16
 8000454:	d177      	bne.n	8000546 <HAL_ADC_Init+0x10e>
 8000456:	2800      	cmp	r0, #0
 8000458:	d175      	bne.n	8000546 <HAL_ADC_Init+0x10e>
    ADC_STATE_CLR_SET(hadc->State,
 800045a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800045c:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000460:	f022 0202 	bic.w	r2, r2, #2
 8000464:	f042 0202 	orr.w	r2, r2, #2
 8000468:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800046a:	6865      	ldr	r5, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800046c:	6821      	ldr	r1, [r4, #0]
 800046e:	4a3a      	ldr	r2, [pc, #232]	; (8000558 <HAL_ADC_Init+0x120>)
 8000470:	4291      	cmp	r1, r2
 8000472:	d03d      	beq.n	80004f0 <HAL_ADC_Init+0xb8>
 8000474:	69e2      	ldr	r2, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000476:	432a      	orrs	r2, r5
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000478:	68e6      	ldr	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800047a:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800047e:	68a5      	ldr	r5, [r4, #8]
 8000480:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000484:	d03e      	beq.n	8000504 <HAL_ADC_Init+0xcc>
 8000486:	2d01      	cmp	r5, #1
 8000488:	d039      	beq.n	80004fe <HAL_ADC_Init+0xc6>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800048a:	6965      	ldr	r5, [r4, #20]
 800048c:	2d01      	cmp	r5, #1
 800048e:	d03c      	beq.n	800050a <HAL_ADC_Init+0xd2>
      MODIFY_REG(hadc->Instance->CR1,
 8000490:	684d      	ldr	r5, [r1, #4]
 8000492:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000496:	432b      	orrs	r3, r5
 8000498:	604b      	str	r3, [r1, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800049a:	6821      	ldr	r1, [r4, #0]
 800049c:	688d      	ldr	r5, [r1, #8]
 800049e:	4b2f      	ldr	r3, [pc, #188]	; (800055c <HAL_ADC_Init+0x124>)
 80004a0:	402b      	ands	r3, r5
 80004a2:	4313      	orrs	r3, r2
 80004a4:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004a6:	68a3      	ldr	r3, [r4, #8]
 80004a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004ac:	d03e      	beq.n	800052c <HAL_ADC_Init+0xf4>
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d03c      	beq.n	800052c <HAL_ADC_Init+0xf4>
  uint32_t tmp_sqr1 = 0U;
 80004b2:	2300      	movs	r3, #0
    MODIFY_REG(hadc->Instance->SQR1,
 80004b4:	6825      	ldr	r5, [r4, #0]
 80004b6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80004b8:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80004bc:	430b      	orrs	r3, r1
 80004be:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80004c0:	6823      	ldr	r3, [r4, #0]
 80004c2:	6899      	ldr	r1, [r3, #8]
 80004c4:	4b26      	ldr	r3, [pc, #152]	; (8000560 <HAL_ADC_Init+0x128>)
 80004c6:	400b      	ands	r3, r1
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d033      	beq.n	8000534 <HAL_ADC_Init+0xfc>
      ADC_STATE_CLR_SET(hadc->State,
 80004cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004ce:	f023 0312 	bic.w	r3, r3, #18
 80004d2:	f043 0310 	orr.w	r3, r3, #16
 80004d6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80004e0:	2001      	movs	r0, #1
 80004e2:	bd70      	pop	{r4, r5, r6, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80004e4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80004e6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80004ea:	f001 f839 	bl	8001560 <HAL_ADC_MspInit>
 80004ee:	e7ab      	b.n	8000448 <HAL_ADC_Init+0x10>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80004f0:	69e2      	ldr	r2, [r4, #28]
 80004f2:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80004f6:	d1be      	bne.n	8000476 <HAL_ADC_Init+0x3e>
 80004f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004fc:	e7bb      	b.n	8000476 <HAL_ADC_Init+0x3e>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000502:	e7c2      	b.n	800048a <HAL_ADC_Init+0x52>
 8000504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000508:	e7bf      	b.n	800048a <HAL_ADC_Init+0x52>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800050a:	b936      	cbnz	r6, 800051a <HAL_ADC_Init+0xe2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800050c:	69a5      	ldr	r5, [r4, #24]
 800050e:	3d01      	subs	r5, #1
 8000510:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
 8000514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000518:	e7ba      	b.n	8000490 <HAL_ADC_Init+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800051a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800051c:	f045 0520 	orr.w	r5, r5, #32
 8000520:	62a5      	str	r5, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000522:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000524:	f045 0501 	orr.w	r5, r5, #1
 8000528:	62e5      	str	r5, [r4, #44]	; 0x2c
 800052a:	e7b1      	b.n	8000490 <HAL_ADC_Init+0x58>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800052c:	6923      	ldr	r3, [r4, #16]
 800052e:	3b01      	subs	r3, #1
 8000530:	051b      	lsls	r3, r3, #20
 8000532:	e7bf      	b.n	80004b4 <HAL_ADC_Init+0x7c>
      ADC_CLEAR_ERRORCODE(hadc);
 8000534:	2300      	movs	r3, #0
 8000536:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800053a:	f023 0303 	bic.w	r3, r3, #3
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	62a3      	str	r3, [r4, #40]	; 0x28
 8000544:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000548:	f043 0310 	orr.w	r3, r3, #16
 800054c:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800054e:	2001      	movs	r0, #1
 8000550:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000552:	2001      	movs	r0, #1
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40013c00 	.word	0x40013c00
 800055c:	ffe1f7fd 	.word	0xffe1f7fd
 8000560:	ff1f0efe 	.word	0xff1f0efe

08000564 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000566:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000568:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800056c:	041b      	lsls	r3, r3, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000570:	0200      	lsls	r0, r0, #8
 8000572:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000576:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000578:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800057c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000580:	60d0      	str	r0, [r2, #12]
 8000582:	4770      	bx	lr
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000588:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <HAL_NVIC_SetPriority+0x5c>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000592:	f1c3 0407 	rsb	r4, r3, #7
 8000596:	2c04      	cmp	r4, #4
 8000598:	bf28      	it	cs
 800059a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059c:	1d1d      	adds	r5, r3, #4
 800059e:	2d06      	cmp	r5, #6
 80005a0:	d917      	bls.n	80005d2 <HAL_NVIC_SetPriority+0x4a>
 80005a2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a4:	2501      	movs	r5, #1
 80005a6:	fa05 f404 	lsl.w	r4, r5, r4
 80005aa:	3c01      	subs	r4, #1
 80005ac:	4021      	ands	r1, r4
 80005ae:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b0:	fa05 f303 	lsl.w	r3, r5, r3
 80005b4:	3b01      	subs	r3, #1
 80005b6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80005ba:	2800      	cmp	r0, #0
 80005bc:	db0b      	blt.n	80005d6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005be:	0109      	lsls	r1, r1, #4
 80005c0:	b2c9      	uxtb	r1, r1
 80005c2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005c6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005ca:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005ce:	bc30      	pop	{r4, r5}
 80005d0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	2300      	movs	r3, #0
 80005d4:	e7e6      	b.n	80005a4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	f000 000f 	and.w	r0, r0, #15
 80005da:	0109      	lsls	r1, r1, #4
 80005dc:	b2c9      	uxtb	r1, r1
 80005de:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <HAL_NVIC_SetPriority+0x60>)
 80005e0:	5419      	strb	r1, [r3, r0]
 80005e2:	e7f4      	b.n	80005ce <HAL_NVIC_SetPriority+0x46>
 80005e4:	e000ed00 	.word	0xe000ed00
 80005e8:	e000ed14 	.word	0xe000ed14

080005ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005ec:	3801      	subs	r0, #1
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f2:	d20a      	bcs.n	800060a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_SYSTICK_Config+0x24>)
 80005f6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	21f0      	movs	r1, #240	; 0xf0
 80005fa:	4a06      	ldr	r2, [pc, #24]	; (8000614 <HAL_SYSTICK_Config+0x28>)
 80005fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000600:	2000      	movs	r0, #0
 8000602:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000604:	2207      	movs	r2, #7
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800060a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e010 	.word	0xe000e010
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000618:	2804      	cmp	r0, #4
 800061a:	d005      	beq.n	8000628 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800061e:	6813      	ldr	r3, [r2, #0]
 8000620:	f023 0304 	bic.w	r3, r3, #4
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000628:	4a02      	ldr	r2, [pc, #8]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800062a:	6813      	ldr	r3, [r2, #0]
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	4770      	bx	lr
 8000634:	e000e010 	.word	0xe000e010

08000638 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000638:	4770      	bx	lr

0800063a <HAL_SYSTICK_IRQHandler>:
{
 800063a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800063c:	f7ff fffc 	bl	8000638 <HAL_SYSTICK_Callback>
 8000640:	bd08      	pop	{r3, pc}
	...

08000644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000648:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800064a:	4634      	mov	r4, r6
 800064c:	e079      	b.n	8000742 <HAL_GPIO_Init+0xfe>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800064e:	2d00      	cmp	r5, #0
 8000650:	f000 80a9 	beq.w	80007a6 <HAL_GPIO_Init+0x162>
 8000654:	2d01      	cmp	r5, #1
 8000656:	d100      	bne.n	800065a <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000658:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800065a:	2bff      	cmp	r3, #255	; 0xff
 800065c:	f200 80b7 	bhi.w	80007ce <HAL_GPIO_Init+0x18a>
 8000660:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000662:	2bff      	cmp	r3, #255	; 0xff
 8000664:	f200 80b6 	bhi.w	80007d4 <HAL_GPIO_Init+0x190>
 8000668:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800066a:	f8de 2000 	ldr.w	r2, [lr]
 800066e:	270f      	movs	r7, #15
 8000670:	40af      	lsls	r7, r5
 8000672:	ea22 0207 	bic.w	r2, r2, r7
 8000676:	fa06 f505 	lsl.w	r5, r6, r5
 800067a:	432a      	orrs	r2, r5
 800067c:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000680:	684a      	ldr	r2, [r1, #4]
 8000682:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000686:	d05b      	beq.n	8000740 <HAL_GPIO_Init+0xfc>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000688:	4a67      	ldr	r2, [pc, #412]	; (8000828 <HAL_GPIO_Init+0x1e4>)
 800068a:	6995      	ldr	r5, [r2, #24]
 800068c:	f045 0501 	orr.w	r5, r5, #1
 8000690:	6195      	str	r5, [r2, #24]
 8000692:	6992      	ldr	r2, [r2, #24]
 8000694:	f002 0201 	and.w	r2, r2, #1
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 800069c:	08a2      	lsrs	r2, r4, #2
 800069e:	1c97      	adds	r7, r2, #2
 80006a0:	4d62      	ldr	r5, [pc, #392]	; (800082c <HAL_GPIO_Init+0x1e8>)
 80006a2:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006a6:	f004 0703 	and.w	r7, r4, #3
 80006aa:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 80006ae:	270f      	movs	r7, #15
 80006b0:	fa07 f70e 	lsl.w	r7, r7, lr
 80006b4:	ea25 0507 	bic.w	r5, r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006b8:	4f5d      	ldr	r7, [pc, #372]	; (8000830 <HAL_GPIO_Init+0x1ec>)
 80006ba:	42b8      	cmp	r0, r7
 80006bc:	f000 8090 	beq.w	80007e0 <HAL_GPIO_Init+0x19c>
 80006c0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80006c4:	42b8      	cmp	r0, r7
 80006c6:	f000 808d 	beq.w	80007e4 <HAL_GPIO_Init+0x1a0>
 80006ca:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80006ce:	42b8      	cmp	r0, r7
 80006d0:	f000 808a 	beq.w	80007e8 <HAL_GPIO_Init+0x1a4>
 80006d4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80006d8:	42b8      	cmp	r0, r7
 80006da:	f000 8087 	beq.w	80007ec <HAL_GPIO_Init+0x1a8>
 80006de:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80006e2:	42b8      	cmp	r0, r7
 80006e4:	f000 8084 	beq.w	80007f0 <HAL_GPIO_Init+0x1ac>
 80006e8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80006ec:	42b8      	cmp	r0, r7
 80006ee:	d075      	beq.n	80007dc <HAL_GPIO_Init+0x198>
 80006f0:	2706      	movs	r7, #6
 80006f2:	fa07 f70e 	lsl.w	r7, r7, lr
 80006f6:	433d      	orrs	r5, r7
        AFIO->EXTICR[position >> 2U] = temp;
 80006f8:	3202      	adds	r2, #2
 80006fa:	4f4c      	ldr	r7, [pc, #304]	; (800082c <HAL_GPIO_Init+0x1e8>)
 80006fc:	f847 5022 	str.w	r5, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000700:	684a      	ldr	r2, [r1, #4]
 8000702:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000706:	d075      	beq.n	80007f4 <HAL_GPIO_Init+0x1b0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000708:	4d4a      	ldr	r5, [pc, #296]	; (8000834 <HAL_GPIO_Init+0x1f0>)
 800070a:	682a      	ldr	r2, [r5, #0]
 800070c:	431a      	orrs	r2, r3
 800070e:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000710:	684a      	ldr	r2, [r1, #4]
 8000712:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000716:	d073      	beq.n	8000800 <HAL_GPIO_Init+0x1bc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000718:	4d46      	ldr	r5, [pc, #280]	; (8000834 <HAL_GPIO_Init+0x1f0>)
 800071a:	686a      	ldr	r2, [r5, #4]
 800071c:	431a      	orrs	r2, r3
 800071e:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000720:	684a      	ldr	r2, [r1, #4]
 8000722:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8000726:	d071      	beq.n	800080c <HAL_GPIO_Init+0x1c8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000728:	4d42      	ldr	r5, [pc, #264]	; (8000834 <HAL_GPIO_Init+0x1f0>)
 800072a:	68aa      	ldr	r2, [r5, #8]
 800072c:	431a      	orrs	r2, r3
 800072e:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000730:	684a      	ldr	r2, [r1, #4]
 8000732:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000736:	d06f      	beq.n	8000818 <HAL_GPIO_Init+0x1d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000738:	4d3e      	ldr	r5, [pc, #248]	; (8000834 <HAL_GPIO_Init+0x1f0>)
 800073a:	68ea      	ldr	r2, [r5, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000740:	3401      	adds	r4, #1
 8000742:	2c0f      	cmp	r4, #15
 8000744:	d86e      	bhi.n	8000824 <HAL_GPIO_Init+0x1e0>
    ioposition = (0x01U << position);
 8000746:	2201      	movs	r2, #1
 8000748:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074a:	680b      	ldr	r3, [r1, #0]
 800074c:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 800074e:	429a      	cmp	r2, r3
 8000750:	d1f6      	bne.n	8000740 <HAL_GPIO_Init+0xfc>
      switch (GPIO_Init->Mode)
 8000752:	684d      	ldr	r5, [r1, #4]
 8000754:	2d12      	cmp	r5, #18
 8000756:	d030      	beq.n	80007ba <HAL_GPIO_Init+0x176>
 8000758:	d80b      	bhi.n	8000772 <HAL_GPIO_Init+0x12e>
 800075a:	2d02      	cmp	r5, #2
 800075c:	d02a      	beq.n	80007b4 <HAL_GPIO_Init+0x170>
 800075e:	f67f af76 	bls.w	800064e <HAL_GPIO_Init+0xa>
 8000762:	2d03      	cmp	r5, #3
 8000764:	d02f      	beq.n	80007c6 <HAL_GPIO_Init+0x182>
 8000766:	2d11      	cmp	r5, #17
 8000768:	f47f af77 	bne.w	800065a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800076c:	68ce      	ldr	r6, [r1, #12]
 800076e:	3604      	adds	r6, #4
          break;
 8000770:	e773      	b.n	800065a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000772:	4f31      	ldr	r7, [pc, #196]	; (8000838 <HAL_GPIO_Init+0x1f4>)
 8000774:	42bd      	cmp	r5, r7
 8000776:	d016      	beq.n	80007a6 <HAL_GPIO_Init+0x162>
 8000778:	d90c      	bls.n	8000794 <HAL_GPIO_Init+0x150>
 800077a:	4f30      	ldr	r7, [pc, #192]	; (800083c <HAL_GPIO_Init+0x1f8>)
 800077c:	42bd      	cmp	r5, r7
 800077e:	d012      	beq.n	80007a6 <HAL_GPIO_Init+0x162>
 8000780:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000784:	42bd      	cmp	r5, r7
 8000786:	d00e      	beq.n	80007a6 <HAL_GPIO_Init+0x162>
 8000788:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800078c:	42bd      	cmp	r5, r7
 800078e:	f47f af64 	bne.w	800065a <HAL_GPIO_Init+0x16>
 8000792:	e008      	b.n	80007a6 <HAL_GPIO_Init+0x162>
 8000794:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000798:	42bd      	cmp	r5, r7
 800079a:	d004      	beq.n	80007a6 <HAL_GPIO_Init+0x162>
 800079c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80007a0:	42bd      	cmp	r5, r7
 80007a2:	f47f af5a 	bne.w	800065a <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007a6:	688d      	ldr	r5, [r1, #8]
 80007a8:	b17d      	cbz	r5, 80007ca <HAL_GPIO_Init+0x186>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007aa:	2d01      	cmp	r5, #1
 80007ac:	d008      	beq.n	80007c0 <HAL_GPIO_Init+0x17c>
            GPIOx->BRR = ioposition;
 80007ae:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007b0:	2608      	movs	r6, #8
 80007b2:	e752      	b.n	800065a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007b4:	68ce      	ldr	r6, [r1, #12]
 80007b6:	3608      	adds	r6, #8
          break;
 80007b8:	e74f      	b.n	800065a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007ba:	68ce      	ldr	r6, [r1, #12]
 80007bc:	360c      	adds	r6, #12
          break;
 80007be:	e74c      	b.n	800065a <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 80007c0:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007c2:	2608      	movs	r6, #8
 80007c4:	e749      	b.n	800065a <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007c6:	2600      	movs	r6, #0
 80007c8:	e747      	b.n	800065a <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007ca:	2604      	movs	r6, #4
 80007cc:	e745      	b.n	800065a <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007ce:	f100 0e04 	add.w	lr, r0, #4
 80007d2:	e746      	b.n	8000662 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80007d4:	f1a4 0508 	sub.w	r5, r4, #8
 80007d8:	00ad      	lsls	r5, r5, #2
 80007da:	e746      	b.n	800066a <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007dc:	2705      	movs	r7, #5
 80007de:	e788      	b.n	80006f2 <HAL_GPIO_Init+0xae>
 80007e0:	2700      	movs	r7, #0
 80007e2:	e786      	b.n	80006f2 <HAL_GPIO_Init+0xae>
 80007e4:	2701      	movs	r7, #1
 80007e6:	e784      	b.n	80006f2 <HAL_GPIO_Init+0xae>
 80007e8:	2702      	movs	r7, #2
 80007ea:	e782      	b.n	80006f2 <HAL_GPIO_Init+0xae>
 80007ec:	2703      	movs	r7, #3
 80007ee:	e780      	b.n	80006f2 <HAL_GPIO_Init+0xae>
 80007f0:	2704      	movs	r7, #4
 80007f2:	e77e      	b.n	80006f2 <HAL_GPIO_Init+0xae>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80007f4:	4d0f      	ldr	r5, [pc, #60]	; (8000834 <HAL_GPIO_Init+0x1f0>)
 80007f6:	682a      	ldr	r2, [r5, #0]
 80007f8:	ea22 0203 	bic.w	r2, r2, r3
 80007fc:	602a      	str	r2, [r5, #0]
 80007fe:	e787      	b.n	8000710 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000800:	4d0c      	ldr	r5, [pc, #48]	; (8000834 <HAL_GPIO_Init+0x1f0>)
 8000802:	686a      	ldr	r2, [r5, #4]
 8000804:	ea22 0203 	bic.w	r2, r2, r3
 8000808:	606a      	str	r2, [r5, #4]
 800080a:	e789      	b.n	8000720 <HAL_GPIO_Init+0xdc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800080c:	4d09      	ldr	r5, [pc, #36]	; (8000834 <HAL_GPIO_Init+0x1f0>)
 800080e:	68aa      	ldr	r2, [r5, #8]
 8000810:	ea22 0203 	bic.w	r2, r2, r3
 8000814:	60aa      	str	r2, [r5, #8]
 8000816:	e78b      	b.n	8000730 <HAL_GPIO_Init+0xec>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000818:	4d06      	ldr	r5, [pc, #24]	; (8000834 <HAL_GPIO_Init+0x1f0>)
 800081a:	68ea      	ldr	r2, [r5, #12]
 800081c:	ea22 0303 	bic.w	r3, r2, r3
 8000820:	60eb      	str	r3, [r5, #12]
 8000822:	e78d      	b.n	8000740 <HAL_GPIO_Init+0xfc>
        }
      }
    }
  }
}
 8000824:	b003      	add	sp, #12
 8000826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	40010000 	.word	0x40010000
 8000830:	40010800 	.word	0x40010800
 8000834:	40010400 	.word	0x40010400
 8000838:	10210000 	.word	0x10210000
 800083c:	10310000 	.word	0x10310000

08000840 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000840:	b912      	cbnz	r2, 8000848 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000842:	0409      	lsls	r1, r1, #16
 8000844:	6101      	str	r1, [r0, #16]
 8000846:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000848:	6101      	str	r1, [r0, #16]
 800084a:	4770      	bx	lr

0800084c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800084c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <RCC_Delay+0x24>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <RCC_Delay+0x28>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	0a5b      	lsrs	r3, r3, #9
 800085a:	fb00 f003 	mul.w	r0, r0, r3
 800085e:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000860:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000862:	9b01      	ldr	r3, [sp, #4]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	9201      	str	r2, [sp, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f9      	bne.n	8000860 <RCC_Delay+0x14>
}
 800086c:	b002      	add	sp, #8
 800086e:	4770      	bx	lr
 8000870:	20000008 	.word	0x20000008
 8000874:	10624dd3 	.word	0x10624dd3

08000878 <HAL_RCC_OscConfig>:
{
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800087e:	6803      	ldr	r3, [r0, #0]
 8000880:	f013 0f01 	tst.w	r3, #1
 8000884:	d03d      	beq.n	8000902 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000886:	4bac      	ldr	r3, [pc, #688]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f003 030c 	and.w	r3, r3, #12
 800088e:	2b04      	cmp	r3, #4
 8000890:	d02e      	beq.n	80008f0 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000892:	4ba9      	ldr	r3, [pc, #676]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 030c 	and.w	r3, r3, #12
 800089a:	2b08      	cmp	r3, #8
 800089c:	d023      	beq.n	80008e6 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800089e:	6863      	ldr	r3, [r4, #4]
 80008a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a4:	d051      	beq.n	800094a <HAL_RCC_OscConfig+0xd2>
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d155      	bne.n	8000956 <HAL_RCC_OscConfig+0xde>
 80008aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008c0:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008c2:	6863      	ldr	r3, [r4, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d060      	beq.n	800098a <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 80008c8:	f7ff fcee 	bl	80002a8 <HAL_GetTick>
 80008cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ce:	4b9a      	ldr	r3, [pc, #616]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008d6:	d114      	bne.n	8000902 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d8:	f7ff fce6 	bl	80002a8 <HAL_GetTick>
 80008dc:	1b40      	subs	r0, r0, r5
 80008de:	2864      	cmp	r0, #100	; 0x64
 80008e0:	d9f5      	bls.n	80008ce <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80008e2:	2003      	movs	r0, #3
 80008e4:	e1af      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008e6:	4b94      	ldr	r3, [pc, #592]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80008ee:	d0d6      	beq.n	800089e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008f0:	4b91      	ldr	r3, [pc, #580]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008f8:	d003      	beq.n	8000902 <HAL_RCC_OscConfig+0x8a>
 80008fa:	6863      	ldr	r3, [r4, #4]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	f000 819f 	beq.w	8000c40 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000902:	6823      	ldr	r3, [r4, #0]
 8000904:	f013 0f02 	tst.w	r3, #2
 8000908:	d065      	beq.n	80009d6 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800090a:	4b8b      	ldr	r3, [pc, #556]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f013 0f0c 	tst.w	r3, #12
 8000912:	d04e      	beq.n	80009b2 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000914:	4b88      	ldr	r3, [pc, #544]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 030c 	and.w	r3, r3, #12
 800091c:	2b08      	cmp	r3, #8
 800091e:	d043      	beq.n	80009a8 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000920:	6923      	ldr	r3, [r4, #16]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d079      	beq.n	8000a1a <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000926:	2201      	movs	r2, #1
 8000928:	4b84      	ldr	r3, [pc, #528]	; (8000b3c <HAL_RCC_OscConfig+0x2c4>)
 800092a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800092c:	f7ff fcbc 	bl	80002a8 <HAL_GetTick>
 8000930:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000932:	4b81      	ldr	r3, [pc, #516]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f013 0f02 	tst.w	r3, #2
 800093a:	d165      	bne.n	8000a08 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800093c:	f7ff fcb4 	bl	80002a8 <HAL_GetTick>
 8000940:	1b40      	subs	r0, r0, r5
 8000942:	2802      	cmp	r0, #2
 8000944:	d9f5      	bls.n	8000932 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000946:	2003      	movs	r0, #3
 8000948:	e17d      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800094a:	4a7b      	ldr	r2, [pc, #492]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 800094c:	6813      	ldr	r3, [r2, #0]
 800094e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	e7b5      	b.n	80008c2 <HAL_RCC_OscConfig+0x4a>
 8000956:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800095a:	d009      	beq.n	8000970 <HAL_RCC_OscConfig+0xf8>
 800095c:	4b76      	ldr	r3, [pc, #472]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	e7a8      	b.n	80008c2 <HAL_RCC_OscConfig+0x4a>
 8000970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000974:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e79b      	b.n	80008c2 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 800098a:	f7ff fc8d 	bl	80002a8 <HAL_GetTick>
 800098e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000990:	4b69      	ldr	r3, [pc, #420]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000998:	d0b3      	beq.n	8000902 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099a:	f7ff fc85 	bl	80002a8 <HAL_GetTick>
 800099e:	1b40      	subs	r0, r0, r5
 80009a0:	2864      	cmp	r0, #100	; 0x64
 80009a2:	d9f5      	bls.n	8000990 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80009a4:	2003      	movs	r0, #3
 80009a6:	e14e      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009a8:	4b63      	ldr	r3, [pc, #396]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80009b0:	d1b6      	bne.n	8000920 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009b2:	4b61      	ldr	r3, [pc, #388]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f013 0f02 	tst.w	r3, #2
 80009ba:	d004      	beq.n	80009c6 <HAL_RCC_OscConfig+0x14e>
 80009bc:	6923      	ldr	r3, [r4, #16]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d001      	beq.n	80009c6 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
 80009c4:	e13f      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009c6:	4a5c      	ldr	r2, [pc, #368]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 80009c8:	6813      	ldr	r3, [r2, #0]
 80009ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009ce:	6961      	ldr	r1, [r4, #20]
 80009d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009d4:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	f013 0f08 	tst.w	r3, #8
 80009dc:	d032      	beq.n	8000a44 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009de:	69a3      	ldr	r3, [r4, #24]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d06e      	beq.n	8000ac2 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 80009e4:	2201      	movs	r2, #1
 80009e6:	4b56      	ldr	r3, [pc, #344]	; (8000b40 <HAL_RCC_OscConfig+0x2c8>)
 80009e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ea:	f7ff fc5d 	bl	80002a8 <HAL_GetTick>
 80009ee:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009f0:	4b51      	ldr	r3, [pc, #324]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f4:	f013 0f02 	tst.w	r3, #2
 80009f8:	d121      	bne.n	8000a3e <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009fa:	f7ff fc55 	bl	80002a8 <HAL_GetTick>
 80009fe:	1b40      	subs	r0, r0, r5
 8000a00:	2802      	cmp	r0, #2
 8000a02:	d9f5      	bls.n	80009f0 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000a04:	2003      	movs	r0, #3
 8000a06:	e11e      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a08:	4a4b      	ldr	r2, [pc, #300]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a10:	6961      	ldr	r1, [r4, #20]
 8000a12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	e7dd      	b.n	80009d6 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <HAL_RCC_OscConfig+0x2c4>)
 8000a1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a20:	f7ff fc42 	bl	80002a8 <HAL_GetTick>
 8000a24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a26:	4b44      	ldr	r3, [pc, #272]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f013 0f02 	tst.w	r3, #2
 8000a2e:	d0d2      	beq.n	80009d6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a30:	f7ff fc3a 	bl	80002a8 <HAL_GetTick>
 8000a34:	1b40      	subs	r0, r0, r5
 8000a36:	2802      	cmp	r0, #2
 8000a38:	d9f5      	bls.n	8000a26 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	e103      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff ff04 	bl	800084c <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	f013 0f04 	tst.w	r3, #4
 8000a4a:	f000 8099 	beq.w	8000b80 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a4e:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000a56:	d146      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000a5a:	69da      	ldr	r2, [r3, #28]
 8000a5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a60:	61da      	str	r2, [r3, #28]
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a6c:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <HAL_RCC_OscConfig+0x2cc>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a76:	d038      	beq.n	8000aea <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a78:	68e3      	ldr	r3, [r4, #12]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d049      	beq.n	8000b12 <HAL_RCC_OscConfig+0x29a>
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <HAL_RCC_OscConfig+0x2a6>
 8000a82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a86:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000a8a:	6a1a      	ldr	r2, [r3, #32]
 8000a8c:	f022 0201 	bic.w	r2, r2, #1
 8000a90:	621a      	str	r2, [r3, #32]
 8000a92:	6a1a      	ldr	r2, [r3, #32]
 8000a94:	f022 0204 	bic.w	r2, r2, #4
 8000a98:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a9a:	68e3      	ldr	r3, [r4, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d05d      	beq.n	8000b5c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000aa0:	f7ff fc02 	bl	80002a8 <HAL_GetTick>
 8000aa4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000aa8:	6a1b      	ldr	r3, [r3, #32]
 8000aaa:	f013 0f02 	tst.w	r3, #2
 8000aae:	d166      	bne.n	8000b7e <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab0:	f7ff fbfa 	bl	80002a8 <HAL_GetTick>
 8000ab4:	1b80      	subs	r0, r0, r6
 8000ab6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000aba:	4298      	cmp	r0, r3
 8000abc:	d9f3      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 8000abe:	2003      	movs	r0, #3
 8000ac0:	e0c1      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_RCC_OscConfig+0x2c8>)
 8000ac6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ac8:	f7ff fbee 	bl	80002a8 <HAL_GetTick>
 8000acc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	f013 0f02 	tst.w	r3, #2
 8000ad6:	d0b5      	beq.n	8000a44 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ad8:	f7ff fbe6 	bl	80002a8 <HAL_GetTick>
 8000adc:	1b40      	subs	r0, r0, r5
 8000ade:	2802      	cmp	r0, #2
 8000ae0:	d9f5      	bls.n	8000ace <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	e0af      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8000ae6:	2500      	movs	r5, #0
 8000ae8:	e7c1      	b.n	8000a6e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <HAL_RCC_OscConfig+0x2cc>)
 8000aec:	6813      	ldr	r3, [r2, #0]
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000af4:	f7ff fbd8 	bl	80002a8 <HAL_GetTick>
 8000af8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_RCC_OscConfig+0x2cc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b02:	d1b9      	bne.n	8000a78 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b04:	f7ff fbd0 	bl	80002a8 <HAL_GetTick>
 8000b08:	1b80      	subs	r0, r0, r6
 8000b0a:	2864      	cmp	r0, #100	; 0x64
 8000b0c:	d9f5      	bls.n	8000afa <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8000b0e:	2003      	movs	r0, #3
 8000b10:	e099      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b12:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000b14:	6a13      	ldr	r3, [r2, #32]
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6213      	str	r3, [r2, #32]
 8000b1c:	e7bd      	b.n	8000a9a <HAL_RCC_OscConfig+0x222>
 8000b1e:	2b05      	cmp	r3, #5
 8000b20:	d012      	beq.n	8000b48 <HAL_RCC_OscConfig+0x2d0>
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_RCC_OscConfig+0x2c0>)
 8000b24:	6a1a      	ldr	r2, [r3, #32]
 8000b26:	f022 0201 	bic.w	r2, r2, #1
 8000b2a:	621a      	str	r2, [r3, #32]
 8000b2c:	6a1a      	ldr	r2, [r3, #32]
 8000b2e:	f022 0204 	bic.w	r2, r2, #4
 8000b32:	621a      	str	r2, [r3, #32]
 8000b34:	e7b1      	b.n	8000a9a <HAL_RCC_OscConfig+0x222>
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	42420000 	.word	0x42420000
 8000b40:	42420480 	.word	0x42420480
 8000b44:	40007000 	.word	0x40007000
 8000b48:	4b41      	ldr	r3, [pc, #260]	; (8000c50 <HAL_RCC_OscConfig+0x3d8>)
 8000b4a:	6a1a      	ldr	r2, [r3, #32]
 8000b4c:	f042 0204 	orr.w	r2, r2, #4
 8000b50:	621a      	str	r2, [r3, #32]
 8000b52:	6a1a      	ldr	r2, [r3, #32]
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	621a      	str	r2, [r3, #32]
 8000b5a:	e79e      	b.n	8000a9a <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8000b5c:	f7ff fba4 	bl	80002a8 <HAL_GetTick>
 8000b60:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b62:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <HAL_RCC_OscConfig+0x3d8>)
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	f013 0f02 	tst.w	r3, #2
 8000b6a:	d008      	beq.n	8000b7e <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b6c:	f7ff fb9c 	bl	80002a8 <HAL_GetTick>
 8000b70:	1b80      	subs	r0, r0, r6
 8000b72:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b76:	4298      	cmp	r0, r3
 8000b78:	d9f3      	bls.n	8000b62 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	e063      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8000b7e:	b9e5      	cbnz	r5, 8000bba <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b80:	69e3      	ldr	r3, [r4, #28]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d05e      	beq.n	8000c44 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b86:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <HAL_RCC_OscConfig+0x3d8>)
 8000b88:	6852      	ldr	r2, [r2, #4]
 8000b8a:	f002 020c 	and.w	r2, r2, #12
 8000b8e:	2a08      	cmp	r2, #8
 8000b90:	d05b      	beq.n	8000c4a <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d017      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000b96:	2200      	movs	r2, #0
 8000b98:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_RCC_OscConfig+0x3dc>)
 8000b9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fb84 	bl	80002a8 <HAL_GetTick>
 8000ba0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <HAL_RCC_OscConfig+0x3d8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000baa:	d047      	beq.n	8000c3c <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bac:	f7ff fb7c 	bl	80002a8 <HAL_GetTick>
 8000bb0:	1b00      	subs	r0, r0, r4
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9f5      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	e045      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bba:	4a25      	ldr	r2, [pc, #148]	; (8000c50 <HAL_RCC_OscConfig+0x3d8>)
 8000bbc:	69d3      	ldr	r3, [r2, #28]
 8000bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	61d3      	str	r3, [r2, #28]
 8000bc4:	e7dc      	b.n	8000b80 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <HAL_RCC_OscConfig+0x3dc>)
 8000bca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fb6c 	bl	80002a8 <HAL_GetTick>
 8000bd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_RCC_OscConfig+0x3d8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bda:	d006      	beq.n	8000bea <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bdc:	f7ff fb64 	bl	80002a8 <HAL_GetTick>
 8000be0:	1b40      	subs	r0, r0, r5
 8000be2:	2802      	cmp	r0, #2
 8000be4:	d9f5      	bls.n	8000bd2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000be6:	2003      	movs	r0, #3
 8000be8:	e02d      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bea:	6a23      	ldr	r3, [r4, #32]
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d01a      	beq.n	8000c28 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf2:	4917      	ldr	r1, [pc, #92]	; (8000c50 <HAL_RCC_OscConfig+0x3d8>)
 8000bf4:	684b      	ldr	r3, [r1, #4]
 8000bf6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000bfa:	6a22      	ldr	r2, [r4, #32]
 8000bfc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000bfe:	4302      	orrs	r2, r0
 8000c00:	4313      	orrs	r3, r2
 8000c02:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c04:	2201      	movs	r2, #1
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_RCC_OscConfig+0x3dc>)
 8000c08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c0a:	f7ff fb4d 	bl	80002a8 <HAL_GetTick>
 8000c0e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_RCC_OscConfig+0x3d8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c18:	d10e      	bne.n	8000c38 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c1a:	f7ff fb45 	bl	80002a8 <HAL_GetTick>
 8000c1e:	1b00      	subs	r0, r0, r4
 8000c20:	2802      	cmp	r0, #2
 8000c22:	d9f5      	bls.n	8000c10 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8000c24:	2003      	movs	r0, #3
 8000c26:	e00e      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <HAL_RCC_OscConfig+0x3d8>)
 8000c2a:	6853      	ldr	r3, [r2, #4]
 8000c2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c30:	68a1      	ldr	r1, [r4, #8]
 8000c32:	430b      	orrs	r3, r1
 8000c34:	6053      	str	r3, [r2, #4]
 8000c36:	e7dc      	b.n	8000bf2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e004      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	e002      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8000c40:	2001      	movs	r0, #1
 8000c42:	e000      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8000c44:	2000      	movs	r0, #0
}
 8000c46:	b002      	add	sp, #8
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	e7fb      	b.n	8000c46 <HAL_RCC_OscConfig+0x3ce>
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	42420060 	.word	0x42420060

08000c58 <HAL_RCC_GetSysClockFreq>:
{
 8000c58:	b510      	push	{r4, lr}
 8000c5a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c5c:	4c15      	ldr	r4, [pc, #84]	; (8000cb4 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000c5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c62:	f10d 0e18 	add.w	lr, sp, #24
 8000c66:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c6a:	8a23      	ldrh	r3, [r4, #16]
 8000c6c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0x60>)
 8000c72:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c74:	f003 020c 	and.w	r2, r3, #12
 8000c78:	2a08      	cmp	r2, #8
 8000c7a:	d118      	bne.n	8000cae <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c7c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c80:	4472      	add	r2, lr
 8000c82:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c86:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c8a:	d103      	bne.n	8000c94 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <HAL_RCC_GetSysClockFreq+0x64>)
 8000c8e:	fb00 f002 	mul.w	r0, r0, r2
 8000c92:	e00d      	b.n	8000cb0 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0x60>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000c9c:	4473      	add	r3, lr
 8000c9e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <HAL_RCC_GetSysClockFreq+0x68>)
 8000ca4:	fb00 f002 	mul.w	r0, r0, r2
 8000ca8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cac:	e000      	b.n	8000cb0 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000cb0:	b006      	add	sp, #24
 8000cb2:	bd10      	pop	{r4, pc}
 8000cb4:	08001cdc 	.word	0x08001cdc
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	003d0900 	.word	0x003d0900
 8000cc0:	007a1200 	.word	0x007a1200

08000cc4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cc4:	4b59      	ldr	r3, [pc, #356]	; (8000e2c <HAL_RCC_ClockConfig+0x168>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d20c      	bcs.n	8000cea <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cd0:	4a56      	ldr	r2, [pc, #344]	; (8000e2c <HAL_RCC_ClockConfig+0x168>)
 8000cd2:	6813      	ldr	r3, [r2, #0]
 8000cd4:	f023 0307 	bic.w	r3, r3, #7
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d001      	beq.n	8000cea <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4770      	bx	lr
{
 8000cea:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cec:	6803      	ldr	r3, [r0, #0]
 8000cee:	f013 0f02 	tst.w	r3, #2
 8000cf2:	d006      	beq.n	8000d02 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf4:	4a4e      	ldr	r2, [pc, #312]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000cf6:	6853      	ldr	r3, [r2, #4]
 8000cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cfc:	6884      	ldr	r4, [r0, #8]
 8000cfe:	4323      	orrs	r3, r4
 8000d00:	6053      	str	r3, [r2, #4]
 8000d02:	460d      	mov	r5, r1
 8000d04:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d06:	6803      	ldr	r3, [r0, #0]
 8000d08:	f013 0f01 	tst.w	r3, #1
 8000d0c:	d052      	beq.n	8000db4 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d0e:	6843      	ldr	r3, [r0, #4]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d023      	beq.n	8000d5c <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d028      	beq.n	8000d6a <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	f012 0f02 	tst.w	r2, #2
 8000d20:	f000 8082 	beq.w	8000e28 <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d24:	4942      	ldr	r1, [pc, #264]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000d26:	684a      	ldr	r2, [r1, #4]
 8000d28:	f022 0203 	bic.w	r2, r2, #3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000d30:	f7ff faba 	bl	80002a8 <HAL_GetTick>
 8000d34:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d36:	6863      	ldr	r3, [r4, #4]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d01d      	beq.n	8000d78 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d02a      	beq.n	8000d96 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d40:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f013 0f0c 	tst.w	r3, #12
 8000d48:	d034      	beq.n	8000db4 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4a:	f7ff faad 	bl	80002a8 <HAL_GetTick>
 8000d4e:	1b80      	subs	r0, r0, r6
 8000d50:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d54:	4298      	cmp	r0, r3
 8000d56:	d9f3      	bls.n	8000d40 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8000d58:	2003      	movs	r0, #3
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5c:	4a34      	ldr	r2, [pc, #208]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000d64:	d1de      	bne.n	8000d24 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8000d66:	2001      	movs	r0, #1
 8000d68:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d6a:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000d6c:	6812      	ldr	r2, [r2, #0]
 8000d6e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d72:	d1d7      	bne.n	8000d24 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8000d74:	2001      	movs	r0, #1
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d017      	beq.n	8000db4 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d84:	f7ff fa90 	bl	80002a8 <HAL_GetTick>
 8000d88:	1b80      	subs	r0, r0, r6
 8000d8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d9f2      	bls.n	8000d78 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000d92:	2003      	movs	r0, #3
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d008      	beq.n	8000db4 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da2:	f7ff fa81 	bl	80002a8 <HAL_GetTick>
 8000da6:	1b80      	subs	r0, r0, r6
 8000da8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dac:	4298      	cmp	r0, r3
 8000dae:	d9f2      	bls.n	8000d96 <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8000db0:	2003      	movs	r0, #3
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_RCC_ClockConfig+0x168>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	429d      	cmp	r5, r3
 8000dbe:	d20c      	bcs.n	8000dda <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_RCC_ClockConfig+0x168>)
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	f023 0307 	bic.w	r3, r3, #7
 8000dc8:	432b      	orrs	r3, r5
 8000dca:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dcc:	6813      	ldr	r3, [r2, #0]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	429d      	cmp	r5, r3
 8000dd4:	d001      	beq.n	8000dda <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8000dd6:	2001      	movs	r0, #1
}
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	f013 0f04 	tst.w	r3, #4
 8000de0:	d006      	beq.n	8000df0 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000de2:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000de4:	6853      	ldr	r3, [r2, #4]
 8000de6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dea:	68e1      	ldr	r1, [r4, #12]
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df0:	6823      	ldr	r3, [r4, #0]
 8000df2:	f013 0f08 	tst.w	r3, #8
 8000df6:	d007      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000dfa:	6853      	ldr	r3, [r2, #4]
 8000dfc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e00:	6921      	ldr	r1, [r4, #16]
 8000e02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e06:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e08:	f7ff ff26 	bl	8000c58 <HAL_RCC_GetSysClockFreq>
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_RCC_ClockConfig+0x170>)
 8000e16:	5cd3      	ldrb	r3, [r2, r3]
 8000e18:	40d8      	lsrs	r0, r3
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_RCC_ClockConfig+0x174>)
 8000e1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fa00 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8000e24:	2000      	movs	r0, #0
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000e28:	2001      	movs	r0, #1
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
 8000e2c:	40022000 	.word	0x40022000
 8000e30:	40021000 	.word	0x40021000
 8000e34:	08001cf0 	.word	0x08001cf0
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_RCC_GetHCLKFreq>:
}
 8000e3c:	4b01      	ldr	r3, [pc, #4]	; (8000e44 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008

08000e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e4e:	6803      	ldr	r3, [r0, #0]
 8000e50:	f013 0f01 	tst.w	r3, #1
 8000e54:	d034      	beq.n	8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e56:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e5e:	d148      	bne.n	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000e62:	69da      	ldr	r2, [r3, #28]
 8000e64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e68:	61da      	str	r2, [r3, #28]
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e74:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e76:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e7e:	d03a      	beq.n	8000ef6 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e80:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e84:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000e88:	d011      	beq.n	8000eae <HAL_RCCEx_PeriphCLKConfig+0x66>
 8000e8a:	6862      	ldr	r2, [r4, #4]
 8000e8c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d00c      	beq.n	8000eae <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e94:	4a2e      	ldr	r2, [pc, #184]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000e96:	6a13      	ldr	r3, [r2, #32]
 8000e98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e9c:	492e      	ldr	r1, [pc, #184]	; (8000f58 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8000e9e:	2601      	movs	r6, #1
 8000ea0:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000ea6:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000ea8:	f013 0f01 	tst.w	r3, #1
 8000eac:	d137      	bne.n	8000f1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000eae:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000eb0:	6a13      	ldr	r3, [r2, #32]
 8000eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eb6:	6861      	ldr	r1, [r4, #4]
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	d13f      	bne.n	8000f40 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	f013 0f02 	tst.w	r3, #2
 8000ec6:	d006      	beq.n	8000ed6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000ec8:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000eca:	6853      	ldr	r3, [r2, #4]
 8000ecc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ed0:	68a1      	ldr	r1, [r4, #8]
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	f013 0f10 	tst.w	r3, #16
 8000edc:	d035      	beq.n	8000f4a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ede:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000ee0:	6853      	ldr	r3, [r2, #4]
 8000ee2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ee6:	6961      	ldr	r1, [r4, #20]
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000eec:	2000      	movs	r0, #0
}
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8000ef2:	2500      	movs	r5, #0
 8000ef4:	e7bf      	b.n	8000e76 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef6:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000ef8:	6813      	ldr	r3, [r2, #0]
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f00:	f7ff f9d2 	bl	80002a8 <HAL_GetTick>
 8000f04:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f0e:	d1b7      	bne.n	8000e80 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f10:	f7ff f9ca 	bl	80002a8 <HAL_GetTick>
 8000f14:	1b80      	subs	r0, r0, r6
 8000f16:	2864      	cmp	r0, #100	; 0x64
 8000f18:	d9f5      	bls.n	8000f06 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	e7e7      	b.n	8000eee <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8000f1e:	f7ff f9c3 	bl	80002a8 <HAL_GetTick>
 8000f22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	f013 0f02 	tst.w	r3, #2
 8000f2c:	d1bf      	bne.n	8000eae <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2e:	f7ff f9bb 	bl	80002a8 <HAL_GetTick>
 8000f32:	1b80      	subs	r0, r0, r6
 8000f34:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	d9f3      	bls.n	8000f24 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	e7d6      	b.n	8000eee <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f40:	69d3      	ldr	r3, [r2, #28]
 8000f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f46:	61d3      	str	r3, [r2, #28]
 8000f48:	e7ba      	b.n	8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	e7cf      	b.n	8000eee <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40007000 	.word	0x40007000
 8000f58:	42420440 	.word	0x42420440

08000f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000f5c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f5e:	6a03      	ldr	r3, [r0, #32]
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f68:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000f6a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000f6c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f70:	680d      	ldr	r5, [r1, #0]
 8000f72:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000f74:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000f78:	688d      	ldr	r5, [r1, #8]
 8000f7a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000f7c:	4d11      	ldr	r5, [pc, #68]	; (8000fc4 <TIM_OC1_SetConfig+0x68>)
 8000f7e:	42a8      	cmp	r0, r5
 8000f80:	d011      	beq.n	8000fa6 <TIM_OC1_SetConfig+0x4a>
 8000f82:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f86:	42a8      	cmp	r0, r5
 8000f88:	d00d      	beq.n	8000fa6 <TIM_OC1_SetConfig+0x4a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000f8a:	4d0e      	ldr	r5, [pc, #56]	; (8000fc4 <TIM_OC1_SetConfig+0x68>)
 8000f8c:	42a8      	cmp	r0, r5
 8000f8e:	d011      	beq.n	8000fb4 <TIM_OC1_SetConfig+0x58>
 8000f90:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f94:	42a8      	cmp	r0, r5
 8000f96:	d00d      	beq.n	8000fb4 <TIM_OC1_SetConfig+0x58>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f98:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000f9a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000f9c:	684a      	ldr	r2, [r1, #4]
 8000f9e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000fa0:	6203      	str	r3, [r0, #32]
}
 8000fa2:	bc30      	pop	{r4, r5}
 8000fa4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8000fa6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000faa:	68cd      	ldr	r5, [r1, #12]
 8000fac:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8000fae:	f023 0304 	bic.w	r3, r3, #4
 8000fb2:	e7ea      	b.n	8000f8a <TIM_OC1_SetConfig+0x2e>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000fb4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8000fb8:	694d      	ldr	r5, [r1, #20]
 8000fba:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8000fbc:	698d      	ldr	r5, [r1, #24]
 8000fbe:	432c      	orrs	r4, r5
 8000fc0:	e7ea      	b.n	8000f98 <TIM_OC1_SetConfig+0x3c>
 8000fc2:	bf00      	nop
 8000fc4:	40012c00 	.word	0x40012c00

08000fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000fc8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000fca:	6a03      	ldr	r3, [r0, #32]
 8000fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000fd2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000fd4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000fd6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000fd8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000fdc:	680d      	ldr	r5, [r1, #0]
 8000fde:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000fe4:	688d      	ldr	r5, [r1, #8]
 8000fe6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000fea:	4d13      	ldr	r5, [pc, #76]	; (8001038 <TIM_OC3_SetConfig+0x70>)
 8000fec:	42a8      	cmp	r0, r5
 8000fee:	d011      	beq.n	8001014 <TIM_OC3_SetConfig+0x4c>
 8000ff0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000ff4:	42a8      	cmp	r0, r5
 8000ff6:	d00d      	beq.n	8001014 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000ff8:	4d0f      	ldr	r5, [pc, #60]	; (8001038 <TIM_OC3_SetConfig+0x70>)
 8000ffa:	42a8      	cmp	r0, r5
 8000ffc:	d012      	beq.n	8001024 <TIM_OC3_SetConfig+0x5c>
 8000ffe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001002:	42a8      	cmp	r0, r5
 8001004:	d00e      	beq.n	8001024 <TIM_OC3_SetConfig+0x5c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001006:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001008:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800100a:	684a      	ldr	r2, [r1, #4]
 800100c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800100e:	6203      	str	r3, [r0, #32]
}
 8001010:	bc30      	pop	{r4, r5}
 8001012:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001018:	68cd      	ldr	r5, [r1, #12]
 800101a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800101e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001022:	e7e9      	b.n	8000ff8 <TIM_OC3_SetConfig+0x30>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001024:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001028:	694d      	ldr	r5, [r1, #20]
 800102a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800102e:	698d      	ldr	r5, [r1, #24]
 8001030:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8001034:	e7e7      	b.n	8001006 <TIM_OC3_SetConfig+0x3e>
 8001036:	bf00      	nop
 8001038:	40012c00 	.word	0x40012c00

0800103c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800103c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800103e:	6a03      	ldr	r3, [r0, #32]
 8001040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001044:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001046:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001048:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800104a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800104c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001050:	680d      	ldr	r5, [r1, #0]
 8001052:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800105a:	688d      	ldr	r5, [r1, #8]
 800105c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001060:	4d09      	ldr	r5, [pc, #36]	; (8001088 <TIM_OC4_SetConfig+0x4c>)
 8001062:	42a8      	cmp	r0, r5
 8001064:	d00a      	beq.n	800107c <TIM_OC4_SetConfig+0x40>
 8001066:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800106a:	42a8      	cmp	r0, r5
 800106c:	d006      	beq.n	800107c <TIM_OC4_SetConfig+0x40>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800106e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001070:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001072:	684a      	ldr	r2, [r1, #4]
 8001074:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001076:	6203      	str	r3, [r0, #32]
}
 8001078:	bc30      	pop	{r4, r5}
 800107a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800107c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001080:	694d      	ldr	r5, [r1, #20]
 8001082:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001086:	e7f2      	b.n	800106e <TIM_OC4_SetConfig+0x32>
 8001088:	40012c00 	.word	0x40012c00

0800108c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800108c:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800108e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001090:	6a04      	ldr	r4, [r0, #32]
 8001092:	f024 0401 	bic.w	r4, r4, #1
 8001096:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001098:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800109a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800109e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80010a2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80010a6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80010a8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80010aa:	6203      	str	r3, [r0, #32]
}
 80010ac:	bc10      	pop	{r4}
 80010ae:	4770      	bx	lr

080010b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80010b0:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010b2:	6a03      	ldr	r3, [r0, #32]
 80010b4:	f023 0310 	bic.w	r3, r3, #16
 80010b8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010ba:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80010bc:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80010be:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80010c2:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80010c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80010ca:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80010ce:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80010d0:	6203      	str	r3, [r0, #32]
}
 80010d2:	bc10      	pop	{r4}
 80010d4:	4770      	bx	lr

080010d6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80010d6:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80010d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80010dc:	f041 0107 	orr.w	r1, r1, #7
 80010e0:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80010e2:	6083      	str	r3, [r0, #8]
 80010e4:	4770      	bx	lr

080010e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80010e6:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80010e8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80010ea:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80010ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80010f2:	4319      	orrs	r1, r3
 80010f4:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80010f6:	6084      	str	r4, [r0, #8]
}
 80010f8:	bc10      	pop	{r4}
 80010fa:	4770      	bx	lr

080010fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80010fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001100:	2b01      	cmp	r3, #1
 8001102:	d07d      	beq.n	8001200 <HAL_TIM_ConfigClockSource+0x104>
{
 8001104:	b510      	push	{r4, lr}
 8001106:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001108:	2301      	movs	r3, #1
 800110a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800110e:	2302      	movs	r3, #2
 8001110:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001114:	6802      	ldr	r2, [r0, #0]
 8001116:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001118:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800111c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001120:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001122:	680b      	ldr	r3, [r1, #0]
 8001124:	2b40      	cmp	r3, #64	; 0x40
 8001126:	d057      	beq.n	80011d8 <HAL_TIM_ConfigClockSource+0xdc>
 8001128:	d910      	bls.n	800114c <HAL_TIM_ConfigClockSource+0x50>
 800112a:	2b70      	cmp	r3, #112	; 0x70
 800112c:	d03e      	beq.n	80011ac <HAL_TIM_ConfigClockSource+0xb0>
 800112e:	d81f      	bhi.n	8001170 <HAL_TIM_ConfigClockSource+0x74>
 8001130:	2b50      	cmp	r3, #80	; 0x50
 8001132:	d047      	beq.n	80011c4 <HAL_TIM_ConfigClockSource+0xc8>
 8001134:	2b60      	cmp	r3, #96	; 0x60
 8001136:	d132      	bne.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001138:	68ca      	ldr	r2, [r1, #12]
 800113a:	6849      	ldr	r1, [r1, #4]
 800113c:	6800      	ldr	r0, [r0, #0]
 800113e:	f7ff ffb7 	bl	80010b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001142:	2160      	movs	r1, #96	; 0x60
 8001144:	6820      	ldr	r0, [r4, #0]
 8001146:	f7ff ffc6 	bl	80010d6 <TIM_ITRx_SetConfig>
    break;
 800114a:	e028      	b.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 800114c:	2b10      	cmp	r3, #16
 800114e:	d04d      	beq.n	80011ec <HAL_TIM_ConfigClockSource+0xf0>
 8001150:	d908      	bls.n	8001164 <HAL_TIM_ConfigClockSource+0x68>
 8001152:	2b20      	cmp	r3, #32
 8001154:	d04f      	beq.n	80011f6 <HAL_TIM_ConfigClockSource+0xfa>
 8001156:	2b30      	cmp	r3, #48	; 0x30
 8001158:	d121      	bne.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800115a:	2130      	movs	r1, #48	; 0x30
 800115c:	6800      	ldr	r0, [r0, #0]
 800115e:	f7ff ffba 	bl	80010d6 <TIM_ITRx_SetConfig>
    break;
 8001162:	e01c      	b.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001164:	b9db      	cbnz	r3, 800119e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001166:	2100      	movs	r1, #0
 8001168:	6800      	ldr	r0, [r0, #0]
 800116a:	f7ff ffb4 	bl	80010d6 <TIM_ITRx_SetConfig>
    break;
 800116e:	e016      	b.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001174:	d00e      	beq.n	8001194 <HAL_TIM_ConfigClockSource+0x98>
 8001176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800117a:	d110      	bne.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 800117c:	68cb      	ldr	r3, [r1, #12]
 800117e:	684a      	ldr	r2, [r1, #4]
 8001180:	6889      	ldr	r1, [r1, #8]
 8001182:	6800      	ldr	r0, [r0, #0]
 8001184:	f7ff ffaf 	bl	80010e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001188:	6822      	ldr	r2, [r4, #0]
 800118a:	6893      	ldr	r3, [r2, #8]
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6093      	str	r3, [r2, #8]
    break;
 8001192:	e004      	b.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001194:	6802      	ldr	r2, [r0, #0]
 8001196:	6893      	ldr	r3, [r2, #8]
 8001198:	f023 0307 	bic.w	r3, r3, #7
 800119c:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800119e:	2301      	movs	r3, #1
 80011a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80011aa:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80011ac:	68cb      	ldr	r3, [r1, #12]
 80011ae:	684a      	ldr	r2, [r1, #4]
 80011b0:	6889      	ldr	r1, [r1, #8]
 80011b2:	6800      	ldr	r0, [r0, #0]
 80011b4:	f7ff ff97 	bl	80010e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80011b8:	6822      	ldr	r2, [r4, #0]
 80011ba:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80011bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80011c0:	6093      	str	r3, [r2, #8]
    break;
 80011c2:	e7ec      	b.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80011c4:	68ca      	ldr	r2, [r1, #12]
 80011c6:	6849      	ldr	r1, [r1, #4]
 80011c8:	6800      	ldr	r0, [r0, #0]
 80011ca:	f7ff ff5f 	bl	800108c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80011ce:	2150      	movs	r1, #80	; 0x50
 80011d0:	6820      	ldr	r0, [r4, #0]
 80011d2:	f7ff ff80 	bl	80010d6 <TIM_ITRx_SetConfig>
    break;
 80011d6:	e7e2      	b.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80011d8:	68ca      	ldr	r2, [r1, #12]
 80011da:	6849      	ldr	r1, [r1, #4]
 80011dc:	6800      	ldr	r0, [r0, #0]
 80011de:	f7ff ff55 	bl	800108c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80011e2:	2140      	movs	r1, #64	; 0x40
 80011e4:	6820      	ldr	r0, [r4, #0]
 80011e6:	f7ff ff76 	bl	80010d6 <TIM_ITRx_SetConfig>
    break;
 80011ea:	e7d8      	b.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80011ec:	2110      	movs	r1, #16
 80011ee:	6800      	ldr	r0, [r0, #0]
 80011f0:	f7ff ff71 	bl	80010d6 <TIM_ITRx_SetConfig>
    break;
 80011f4:	e7d3      	b.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80011f6:	2120      	movs	r1, #32
 80011f8:	6800      	ldr	r0, [r0, #0]
 80011fa:	f7ff ff6c 	bl	80010d6 <TIM_ITRx_SetConfig>
    break;
 80011fe:	e7ce      	b.n	800119e <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8001200:	2002      	movs	r0, #2
 8001202:	4770      	bx	lr

08001204 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001204:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001206:	4a25      	ldr	r2, [pc, #148]	; (800129c <TIM_Base_SetConfig+0x98>)
 8001208:	4290      	cmp	r0, r2
 800120a:	d012      	beq.n	8001232 <TIM_Base_SetConfig+0x2e>
 800120c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001210:	4290      	cmp	r0, r2
 8001212:	d00e      	beq.n	8001232 <TIM_Base_SetConfig+0x2e>
 8001214:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001218:	d00b      	beq.n	8001232 <TIM_Base_SetConfig+0x2e>
 800121a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800121e:	4290      	cmp	r0, r2
 8001220:	d007      	beq.n	8001232 <TIM_Base_SetConfig+0x2e>
 8001222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001226:	4290      	cmp	r0, r2
 8001228:	d003      	beq.n	8001232 <TIM_Base_SetConfig+0x2e>
 800122a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122e:	4290      	cmp	r0, r2
 8001230:	d103      	bne.n	800123a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001236:	684a      	ldr	r2, [r1, #4]
 8001238:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800123a:	4a18      	ldr	r2, [pc, #96]	; (800129c <TIM_Base_SetConfig+0x98>)
 800123c:	4290      	cmp	r0, r2
 800123e:	d012      	beq.n	8001266 <TIM_Base_SetConfig+0x62>
 8001240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001244:	4290      	cmp	r0, r2
 8001246:	d00e      	beq.n	8001266 <TIM_Base_SetConfig+0x62>
 8001248:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800124c:	d00b      	beq.n	8001266 <TIM_Base_SetConfig+0x62>
 800124e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001252:	4290      	cmp	r0, r2
 8001254:	d007      	beq.n	8001266 <TIM_Base_SetConfig+0x62>
 8001256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800125a:	4290      	cmp	r0, r2
 800125c:	d003      	beq.n	8001266 <TIM_Base_SetConfig+0x62>
 800125e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001262:	4290      	cmp	r0, r2
 8001264:	d103      	bne.n	800126e <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800126a:	68ca      	ldr	r2, [r1, #12]
 800126c:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 800126e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001272:	694a      	ldr	r2, [r1, #20]
 8001274:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001276:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001278:	688b      	ldr	r3, [r1, #8]
 800127a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800127c:	680b      	ldr	r3, [r1, #0]
 800127e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <TIM_Base_SetConfig+0x98>)
 8001282:	4298      	cmp	r0, r3
 8001284:	d006      	beq.n	8001294 <TIM_Base_SetConfig+0x90>
 8001286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800128a:	4298      	cmp	r0, r3
 800128c:	d002      	beq.n	8001294 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 800128e:	2301      	movs	r3, #1
 8001290:	6143      	str	r3, [r0, #20]
 8001292:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001294:	690b      	ldr	r3, [r1, #16]
 8001296:	6303      	str	r3, [r0, #48]	; 0x30
 8001298:	e7f9      	b.n	800128e <TIM_Base_SetConfig+0x8a>
 800129a:	bf00      	nop
 800129c:	40012c00 	.word	0x40012c00

080012a0 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80012a0:	b1a8      	cbz	r0, 80012ce <HAL_TIM_Base_Init+0x2e>
{
 80012a2:	b510      	push	{r4, lr}
 80012a4:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80012a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012aa:	b15b      	cbz	r3, 80012c4 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80012ac:	2302      	movs	r3, #2
 80012ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012b2:	1d21      	adds	r1, r4, #4
 80012b4:	6820      	ldr	r0, [r4, #0]
 80012b6:	f7ff ffa5 	bl	8001204 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80012c0:	2000      	movs	r0, #0
 80012c2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80012c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80012c8:	f000 fb88 	bl	80019dc <HAL_TIM_Base_MspInit>
 80012cc:	e7ee      	b.n	80012ac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80012ce:	2001      	movs	r0, #1
 80012d0:	4770      	bx	lr

080012d2 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80012d2:	b1a8      	cbz	r0, 8001300 <HAL_TIM_PWM_Init+0x2e>
{
 80012d4:	b510      	push	{r4, lr}
 80012d6:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80012d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012dc:	b15b      	cbz	r3, 80012f6 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80012de:	2302      	movs	r3, #2
 80012e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012e4:	1d21      	adds	r1, r4, #4
 80012e6:	6820      	ldr	r0, [r4, #0]
 80012e8:	f7ff ff8c 	bl	8001204 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80012ec:	2301      	movs	r3, #1
 80012ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80012f2:	2000      	movs	r0, #0
 80012f4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80012f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80012fa:	f000 fb39 	bl	8001970 <HAL_TIM_PWM_MspInit>
 80012fe:	e7ee      	b.n	80012de <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
 8001302:	4770      	bx	lr

08001304 <TIM_OC2_SetConfig>:
{
 8001304:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001306:	6a03      	ldr	r3, [r0, #32]
 8001308:	f023 0310 	bic.w	r3, r3, #16
 800130c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800130e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001310:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001312:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001314:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001318:	680d      	ldr	r5, [r1, #0]
 800131a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800131e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001322:	688d      	ldr	r5, [r1, #8]
 8001324:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001328:	4d12      	ldr	r5, [pc, #72]	; (8001374 <TIM_OC2_SetConfig+0x70>)
 800132a:	42a8      	cmp	r0, r5
 800132c:	d011      	beq.n	8001352 <TIM_OC2_SetConfig+0x4e>
 800132e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001332:	42a8      	cmp	r0, r5
 8001334:	d00d      	beq.n	8001352 <TIM_OC2_SetConfig+0x4e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001336:	4d0f      	ldr	r5, [pc, #60]	; (8001374 <TIM_OC2_SetConfig+0x70>)
 8001338:	42a8      	cmp	r0, r5
 800133a:	d012      	beq.n	8001362 <TIM_OC2_SetConfig+0x5e>
 800133c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001340:	42a8      	cmp	r0, r5
 8001342:	d00e      	beq.n	8001362 <TIM_OC2_SetConfig+0x5e>
  TIMx->CR2 = tmpcr2;
 8001344:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001346:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001348:	684a      	ldr	r2, [r1, #4]
 800134a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800134c:	6203      	str	r3, [r0, #32]
}
 800134e:	bc30      	pop	{r4, r5}
 8001350:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001356:	68cd      	ldr	r5, [r1, #12]
 8001358:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800135c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001360:	e7e9      	b.n	8001336 <TIM_OC2_SetConfig+0x32>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001362:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001366:	694d      	ldr	r5, [r1, #20]
 8001368:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800136c:	698d      	ldr	r5, [r1, #24]
 800136e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001372:	e7e7      	b.n	8001344 <TIM_OC2_SetConfig+0x40>
 8001374:	40012c00 	.word	0x40012c00

08001378 <HAL_TIM_PWM_ConfigChannel>:
{
 8001378:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800137a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800137e:	2b01      	cmp	r3, #1
 8001380:	d066      	beq.n	8001450 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001382:	460d      	mov	r5, r1
 8001384:	4604      	mov	r4, r0
 8001386:	2301      	movs	r3, #1
 8001388:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800138c:	2302      	movs	r3, #2
 800138e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8001392:	2a0c      	cmp	r2, #12
 8001394:	d81a      	bhi.n	80013cc <HAL_TIM_PWM_ConfigChannel+0x54>
 8001396:	e8df f002 	tbb	[pc, r2]
 800139a:	1907      	.short	0x1907
 800139c:	19201919 	.word	0x19201919
 80013a0:	19341919 	.word	0x19341919
 80013a4:	1919      	.short	0x1919
 80013a6:	47          	.byte	0x47
 80013a7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013a8:	6800      	ldr	r0, [r0, #0]
 80013aa:	f7ff fdd7 	bl	8000f5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013ae:	6822      	ldr	r2, [r4, #0]
 80013b0:	6993      	ldr	r3, [r2, #24]
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	6993      	ldr	r3, [r2, #24]
 80013bc:	f023 0304 	bic.w	r3, r3, #4
 80013c0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	6993      	ldr	r3, [r2, #24]
 80013c6:	6929      	ldr	r1, [r5, #16]
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80013cc:	2301      	movs	r3, #1
 80013ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80013d8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013da:	6800      	ldr	r0, [r0, #0]
 80013dc:	f7ff ff92 	bl	8001304 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013e0:	6822      	ldr	r2, [r4, #0]
 80013e2:	6993      	ldr	r3, [r2, #24]
 80013e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013e8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80013ea:	6822      	ldr	r2, [r4, #0]
 80013ec:	6993      	ldr	r3, [r2, #24]
 80013ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013f2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80013f4:	6822      	ldr	r2, [r4, #0]
 80013f6:	6993      	ldr	r3, [r2, #24]
 80013f8:	6929      	ldr	r1, [r5, #16]
 80013fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80013fe:	6193      	str	r3, [r2, #24]
    break;
 8001400:	e7e4      	b.n	80013cc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001402:	6800      	ldr	r0, [r0, #0]
 8001404:	f7ff fde0 	bl	8000fc8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001408:	6822      	ldr	r2, [r4, #0]
 800140a:	69d3      	ldr	r3, [r2, #28]
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	69d3      	ldr	r3, [r2, #28]
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800141c:	6822      	ldr	r2, [r4, #0]
 800141e:	69d3      	ldr	r3, [r2, #28]
 8001420:	6929      	ldr	r1, [r5, #16]
 8001422:	430b      	orrs	r3, r1
 8001424:	61d3      	str	r3, [r2, #28]
    break;
 8001426:	e7d1      	b.n	80013cc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001428:	6800      	ldr	r0, [r0, #0]
 800142a:	f7ff fe07 	bl	800103c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800142e:	6822      	ldr	r2, [r4, #0]
 8001430:	69d3      	ldr	r3, [r2, #28]
 8001432:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001436:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001438:	6822      	ldr	r2, [r4, #0]
 800143a:	69d3      	ldr	r3, [r2, #28]
 800143c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001440:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001442:	6822      	ldr	r2, [r4, #0]
 8001444:	69d3      	ldr	r3, [r2, #28]
 8001446:	6929      	ldr	r1, [r5, #16]
 8001448:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800144c:	61d3      	str	r3, [r2, #28]
    break;
 800144e:	e7bd      	b.n	80013cc <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8001450:	2002      	movs	r0, #2
}
 8001452:	bd38      	pop	{r3, r4, r5, pc}

08001454 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001454:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001458:	2b01      	cmp	r3, #1
 800145a:	d025      	beq.n	80014a8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800145c:	2301      	movs	r3, #1
 800145e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001462:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001468:	688a      	ldr	r2, [r1, #8]
 800146a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800146c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001470:	684a      	ldr	r2, [r1, #4]
 8001472:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001478:	680a      	ldr	r2, [r1, #0]
 800147a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800147c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001480:	690a      	ldr	r2, [r1, #16]
 8001482:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001488:	694a      	ldr	r2, [r1, #20]
 800148a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800148c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001490:	698a      	ldr	r2, [r1, #24]
 8001492:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001494:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001498:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800149a:	6802      	ldr	r2, [r0, #0]
 800149c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800149e:	2300      	movs	r3, #0
 80014a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80014a4:	4618      	mov	r0, r3
 80014a6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80014a8:	2002      	movs	r0, #2
}
 80014aa:	4770      	bx	lr

080014ac <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80014ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d022      	beq.n	80014fa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80014b4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80014b6:	2201      	movs	r2, #1
 80014b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80014bc:	2302      	movs	r3, #2
 80014be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014c2:	6804      	ldr	r4, [r0, #0]
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ca:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80014cc:	6804      	ldr	r4, [r0, #0]
 80014ce:	6863      	ldr	r3, [r4, #4]
 80014d0:	680d      	ldr	r5, [r1, #0]
 80014d2:	432b      	orrs	r3, r5
 80014d4:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80014d6:	6804      	ldr	r4, [r0, #0]
 80014d8:	68a3      	ldr	r3, [r4, #8]
 80014da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014de:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80014e0:	6804      	ldr	r4, [r0, #0]
 80014e2:	68a3      	ldr	r3, [r4, #8]
 80014e4:	6849      	ldr	r1, [r1, #4]
 80014e6:	430b      	orrs	r3, r1
 80014e8:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 80014ea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014ee:	2300      	movs	r3, #0
 80014f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80014f4:	4618      	mov	r0, r3
}
 80014f6:	bc30      	pop	{r4, r5}
 80014f8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80014fa:	2002      	movs	r0, #2
 80014fc:	4770      	bx	lr
	...

08001500 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001500:	b500      	push	{lr}
 8001502:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <MX_ADC1_Init+0x54>)
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_ADC1_Init+0x58>)
 8001508:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800150e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001510:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001512:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001516:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001518:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800151e:	f7fe ff8b 	bl	8000438 <HAL_ADC_Init>
 8001522:	b968      	cbnz	r0, 8001540 <MX_ADC1_Init+0x40>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8001524:	230a      	movs	r3, #10
 8001526:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001528:	2301      	movs	r3, #1
 800152a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800152c:	2300      	movs	r3, #0
 800152e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001530:	a901      	add	r1, sp, #4
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <MX_ADC1_Init+0x54>)
 8001534:	f7fe febe 	bl	80002b4 <HAL_ADC_ConfigChannel>
 8001538:	b938      	cbnz	r0, 800154a <MX_ADC1_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800153a:	b005      	add	sp, #20
 800153c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001540:	2143      	movs	r1, #67	; 0x43
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_ADC1_Init+0x5c>)
 8001544:	f000 f8ac 	bl	80016a0 <_Error_Handler>
 8001548:	e7ec      	b.n	8001524 <MX_ADC1_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 800154a:	214d      	movs	r1, #77	; 0x4d
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <MX_ADC1_Init+0x5c>)
 800154e:	f000 f8a7 	bl	80016a0 <_Error_Handler>
}
 8001552:	e7f2      	b.n	800153a <MX_ADC1_Init+0x3a>
 8001554:	2000002c 	.word	0x2000002c
 8001558:	40012400 	.word	0x40012400
 800155c:	08001d08 	.word	0x08001d08

08001560 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001560:	6802      	ldr	r2, [r0, #0]
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_ADC_MspInit+0x3c>)
 8001564:	429a      	cmp	r2, r3
 8001566:	d000      	beq.n	800156a <HAL_ADC_MspInit+0xa>
 8001568:	4770      	bx	lr
{
 800156a:	b500      	push	{lr}
 800156c:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800156e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001572:	699a      	ldr	r2, [r3, #24]
 8001574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001578:	619a      	str	r2, [r3, #24]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	9b01      	ldr	r3, [sp, #4]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC3_Pin|ADC4_Pin;
 8001584:	230f      	movs	r3, #15
 8001586:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001588:	2303      	movs	r3, #3
 800158a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	a902      	add	r1, sp, #8
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <HAL_ADC_MspInit+0x40>)
 8001590:	f7ff f858 	bl	8000644 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001594:	b007      	add	sp, #28
 8001596:	f85d fb04 	ldr.w	pc, [sp], #4
 800159a:	bf00      	nop
 800159c:	40012400 	.word	0x40012400
 80015a0:	40011000 	.word	0x40011000

080015a4 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 80015a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <MX_GPIO_Init+0xec>)
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	f042 0210 	orr.w	r2, r2, #16
 80015b2:	619a      	str	r2, [r3, #24]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	f002 0210 	and.w	r2, r2, #16
 80015ba:	9200      	str	r2, [sp, #0]
 80015bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	619a      	str	r2, [r3, #24]
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	f002 0220 	and.w	r2, r2, #32
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	f042 0204 	orr.w	r2, r2, #4
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	f002 0204 	and.w	r2, r2, #4
 80015de:	9202      	str	r2, [sp, #8]
 80015e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	f042 0208 	orr.w	r2, r2, #8
 80015e8:	619a      	str	r2, [r3, #24]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|MOTER_EN_Pin|L_CW_CCW_Pin 
 80015f4:	4e27      	ldr	r6, [pc, #156]	; (8001694 <MX_GPIO_Init+0xf0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	f246 11c0 	movw	r1, #25024	; 0x61c0
 80015fc:	4630      	mov	r0, r6
 80015fe:	f7ff f91f 	bl	8000840 <HAL_GPIO_WritePin>
                          |R_CW_CCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED4_Pin|BATTERY_Pin, GPIO_PIN_RESET);
 8001602:	4d25      	ldr	r5, [pc, #148]	; (8001698 <MX_GPIO_Init+0xf4>)
 8001604:	2200      	movs	r2, #0
 8001606:	2113      	movs	r1, #19
 8001608:	4628      	mov	r0, r5
 800160a:	f7ff f919 	bl	8000840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|MOTER_EN_Pin|L_CW_CCW_Pin 
 800160e:	f246 13c0 	movw	r3, #25024	; 0x61c0
 8001612:	9304      	str	r3, [sp, #16]
                          |R_CW_CCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	f04f 0801 	mov.w	r8, #1
 8001618:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2400      	movs	r4, #0
 800161e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2702      	movs	r7, #2
 8001622:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001624:	a904      	add	r1, sp, #16
 8001626:	4630      	mov	r0, r6
 8001628:	f7ff f80c 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BATTERY_Pin;
 800162c:	2313      	movs	r3, #19
 800162e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	a904      	add	r1, sp, #16
 800163a:	4628      	mov	r0, r5
 800163c:	f7ff f802 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001644:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	a904      	add	r1, sp, #16
 800164e:	4628      	mov	r0, r5
 8001650:	f7fe fff8 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001658:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	a904      	add	r1, sp, #16
 8001660:	4628      	mov	r0, r5
 8001662:	f7fe ffef 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin;
 8001666:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800166a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001670:	a904      	add	r1, sp, #16
 8001672:	4630      	mov	r0, r6
 8001674:	f7fe ffe6 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = BOOTO_SW1_Pin|SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin 
 8001678:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800167c:	9304      	str	r3, [sp, #16]
                          |SENSOR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	a904      	add	r1, sp, #16
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_GPIO_Init+0xf8>)
 8001686:	f7fe ffdd 	bl	8000644 <HAL_GPIO_Init>

}
 800168a:	b008      	add	sp, #32
 800168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	40011000 	.word	0x40011000
 8001698:	40010800 	.word	0x40010800
 800169c:	40010c00 	.word	0x40010c00

080016a0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80016a0:	e7fe      	b.n	80016a0 <_Error_Handler>
	...

080016a4 <SystemClock_Config>:
{
 80016a4:	b500      	push	{lr}
 80016a6:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a8:	2101      	movs	r1, #1
 80016aa:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016b0:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b6:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b8:	2102      	movs	r1, #2
 80016ba:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016bc:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80016be:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c0:	a80c      	add	r0, sp, #48	; 0x30
 80016c2:	f7ff f8d9 	bl	8000878 <HAL_RCC_OscConfig>
 80016c6:	bb58      	cbnz	r0, 8001720 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	230f      	movs	r3, #15
 80016ca:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2100      	movs	r1, #0
 80016d2:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80016d8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016de:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e0:	a807      	add	r0, sp, #28
 80016e2:	f7ff faef 	bl	8000cc4 <HAL_RCC_ClockConfig>
 80016e6:	b9f8      	cbnz	r0, 8001728 <SystemClock_Config+0x84>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016e8:	2302      	movs	r3, #2
 80016ea:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80016ec:	2300      	movs	r3, #0
 80016ee:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	a801      	add	r0, sp, #4
 80016f2:	f7ff fba9 	bl	8000e48 <HAL_RCCEx_PeriphCLKConfig>
 80016f6:	b9d8      	cbnz	r0, 8001730 <SystemClock_Config+0x8c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80016f8:	f7ff fba0 	bl	8000e3c <HAL_RCC_GetHCLKFreq>
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <SystemClock_Config+0x94>)
 80016fe:	fba3 3000 	umull	r3, r0, r3, r0
 8001702:	0980      	lsrs	r0, r0, #6
 8001704:	f7fe ff72 	bl	80005ec <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001708:	2004      	movs	r0, #4
 800170a:	f7fe ff85 	bl	8000618 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	4611      	mov	r1, r2
 8001712:	f04f 30ff 	mov.w	r0, #4294967295
 8001716:	f7fe ff37 	bl	8000588 <HAL_NVIC_SetPriority>
}
 800171a:	b017      	add	sp, #92	; 0x5c
 800171c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001720:	2190      	movs	r1, #144	; 0x90
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <SystemClock_Config+0x98>)
 8001724:	f7ff ffbc 	bl	80016a0 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001728:	219e      	movs	r1, #158	; 0x9e
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <SystemClock_Config+0x98>)
 800172c:	f7ff ffb8 	bl	80016a0 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001730:	21a5      	movs	r1, #165	; 0xa5
 8001732:	4802      	ldr	r0, [pc, #8]	; (800173c <SystemClock_Config+0x98>)
 8001734:	f7ff ffb4 	bl	80016a0 <_Error_Handler>
 8001738:	10624dd3 	.word	0x10624dd3
 800173c:	08001d18 	.word	0x08001d18

08001740 <main>:
{
 8001740:	b508      	push	{r3, lr}
  HAL_Init();
 8001742:	f7fe fd93 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001746:	f7ff ffad 	bl	80016a4 <SystemClock_Config>
  MX_GPIO_Init();
 800174a:	f7ff ff2b 	bl	80015a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800174e:	f7ff fed7 	bl	8001500 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001752:	f000 f99d 	bl	8001a90 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001756:	f000 f8d3 	bl	8001900 <MX_TIM4_Init>
  MX_TIM5_Init();
 800175a:	f000 f9d5 	bl	8001b08 <MX_TIM5_Init>
  MX_TIM8_Init();
 800175e:	f000 fa11 	bl	8001b84 <MX_TIM8_Init>
  MOTION_STRAIGHT();
 8001762:	f000 f801 	bl	8001768 <MOTION_STRAIGHT>
 8001766:	e7fe      	b.n	8001766 <main+0x26>

08001768 <MOTION_STRAIGHT>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;
TIM_OC_InitTypeDef sConfigOC;

void MOTION_STRAIGHT(void)
{
 8001768:	b510      	push	{r4, lr}
	  htim2.Init.Prescaler = 8000;
 800176a:	481e      	ldr	r0, [pc, #120]	; (80017e4 <MOTION_STRAIGHT+0x7c>)
 800176c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001770:	6043      	str	r3, [r0, #4]
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001772:	491d      	ldr	r1, [pc, #116]	; (80017e8 <MOTION_STRAIGHT+0x80>)
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	600b      	str	r3, [r1, #0]
	  sConfigOC.Pulse = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	604b      	str	r3, [r1, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177c:	2300      	movs	r3, #0
 800177e:	608b      	str	r3, [r1, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001780:	610b      	str	r3, [r1, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001782:	2208      	movs	r2, #8
 8001784:	f7ff fdf8 	bl	8001378 <HAL_TIM_PWM_ConfigChannel>
 8001788:	bb08      	cbnz	r0, 80017ce <MOTION_STRAIGHT+0x66>
	  {
	    _Error_Handler(__FILE__, __LINE__);
	  }

	  htim5.Init.Prescaler = 8000;
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <MOTION_STRAIGHT+0x84>)
 800178c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001790:	6043      	str	r3, [r0, #4]
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001792:	4915      	ldr	r1, [pc, #84]	; (80017e8 <MOTION_STRAIGHT+0x80>)
 8001794:	2360      	movs	r3, #96	; 0x60
 8001796:	600b      	str	r3, [r1, #0]
	  sConfigOC.Pulse = 1;
 8001798:	2301      	movs	r3, #1
 800179a:	604b      	str	r3, [r1, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179c:	2300      	movs	r3, #0
 800179e:	608b      	str	r3, [r1, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a0:	610b      	str	r3, [r1, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017a2:	220c      	movs	r2, #12
 80017a4:	f7ff fde8 	bl	8001378 <HAL_TIM_PWM_ConfigChannel>
 80017a8:	b9b0      	cbnz	r0, 80017d8 <MOTION_STRAIGHT+0x70>
	  {
	    _Error_Handler(__FILE__, __LINE__);
	  }

    HAL_GPIO_WritePin( MOTER_EN_GPIO_Port , MOTER_EN_Pin , GPIO_PIN_SET );
 80017aa:	4c11      	ldr	r4, [pc, #68]	; (80017f0 <MOTION_STRAIGHT+0x88>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	2140      	movs	r1, #64	; 0x40
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff f845 	bl	8000840 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin( R_CW_CCW_GPIO_Port , R_CW_CCW_Pin , GPIO_PIN_SET );
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff f83f 	bl	8000840 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin( L_CW_CCW_GPIO_Port , L_CW_CCW_Pin , GPIO_PIN_SET );
 80017c2:	2201      	movs	r2, #1
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff f83a 	bl	8000840 <HAL_GPIO_WritePin>
 80017cc:	bd10      	pop	{r4, pc}
	    _Error_Handler(__FILE__, __LINE__);
 80017ce:	211d      	movs	r1, #29
 80017d0:	4808      	ldr	r0, [pc, #32]	; (80017f4 <MOTION_STRAIGHT+0x8c>)
 80017d2:	f7ff ff65 	bl	80016a0 <_Error_Handler>
 80017d6:	e7d8      	b.n	800178a <MOTION_STRAIGHT+0x22>
	    _Error_Handler(__FILE__, __LINE__);
 80017d8:	2127      	movs	r1, #39	; 0x27
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MOTION_STRAIGHT+0x8c>)
 80017dc:	f7ff ff60 	bl	80016a0 <_Error_Handler>
 80017e0:	e7e3      	b.n	80017aa <MOTION_STRAIGHT+0x42>
 80017e2:	bf00      	nop
 80017e4:	200000b8 	.word	0x200000b8
 80017e8:	2000009c 	.word	0x2000009c
 80017ec:	20000138 	.word	0x20000138
 80017f0:	40011000 	.word	0x40011000
 80017f4:	08001d28 	.word	0x08001d28

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b500      	push	{lr}
 80017fa:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_MspInit+0x98>)
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	f042 0201 	orr.w	r2, r2, #1
 8001804:	619a      	str	r2, [r3, #24]
 8001806:	699a      	ldr	r2, [r3, #24]
 8001808:	f002 0201 	and.w	r2, r2, #1
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001816:	61da      	str	r2, [r3, #28]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001822:	2003      	movs	r0, #3
 8001824:	f7fe fe9e 	bl	8000564 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	4611      	mov	r1, r2
 800182c:	f06f 000b 	mvn.w	r0, #11
 8001830:	f7fe feaa 	bl	8000588 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	4611      	mov	r1, r2
 8001838:	f06f 000a 	mvn.w	r0, #10
 800183c:	f7fe fea4 	bl	8000588 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	4611      	mov	r1, r2
 8001844:	f06f 0009 	mvn.w	r0, #9
 8001848:	f7fe fe9e 	bl	8000588 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	4611      	mov	r1, r2
 8001850:	f06f 0004 	mvn.w	r0, #4
 8001854:	f7fe fe98 	bl	8000588 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	4611      	mov	r1, r2
 800185c:	f06f 0003 	mvn.w	r0, #3
 8001860:	f7fe fe92 	bl	8000588 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	4611      	mov	r1, r2
 8001868:	f06f 0001 	mvn.w	r0, #1
 800186c:	f7fe fe8c 	bl	8000588 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	4611      	mov	r1, r2
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7fe fe86 	bl	8000588 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800187c:	4a05      	ldr	r2, [pc, #20]	; (8001894 <HAL_MspInit+0x9c>)
 800187e:	6853      	ldr	r3, [r2, #4]
 8001880:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001888:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	b003      	add	sp, #12
 800188c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000

08001898 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001898:	4770      	bx	lr

0800189a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800189a:	e7fe      	b.n	800189a <HardFault_Handler>

0800189c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800189c:	e7fe      	b.n	800189c <MemManage_Handler>

0800189e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800189e:	e7fe      	b.n	800189e <BusFault_Handler>

080018a0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler>

080018a2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80018a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018aa:	f7fe fcf1 	bl	8000290 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80018ae:	f7fe fec4 	bl	800063a <HAL_SYSTICK_IRQHandler>
 80018b2:	bd08      	pop	{r3, pc}

080018b4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <SystemInit+0x40>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <SystemInit+0x44>)
 80018c2:	400a      	ands	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80018cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018d0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018d8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80018e0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80018e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80018e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <SystemInit+0x48>)
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	f8ff0000 	.word	0xf8ff0000
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001900:	b500      	push	{lr}
 8001902:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8001904:	4817      	ldr	r0, [pc, #92]	; (8001964 <MX_TIM4_Init+0x64>)
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <MX_TIM4_Init+0x68>)
 8001908:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 8001910:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001916:	f7ff fcc3 	bl	80012a0 <HAL_TIM_Base_Init>
 800191a:	b998      	cbnz	r0, 8001944 <MX_TIM4_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191c:	a906      	add	r1, sp, #24
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001926:	480f      	ldr	r0, [pc, #60]	; (8001964 <MX_TIM4_Init+0x64>)
 8001928:	f7ff fbe8 	bl	80010fc <HAL_TIM_ConfigClockSource>
 800192c:	b978      	cbnz	r0, 800194e <MX_TIM4_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001932:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001934:	4669      	mov	r1, sp
 8001936:	480b      	ldr	r0, [pc, #44]	; (8001964 <MX_TIM4_Init+0x64>)
 8001938:	f7ff fdb8 	bl	80014ac <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	b960      	cbnz	r0, 8001958 <MX_TIM4_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800193e:	b007      	add	sp, #28
 8001940:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001944:	2166      	movs	r1, #102	; 0x66
 8001946:	4809      	ldr	r0, [pc, #36]	; (800196c <MX_TIM4_Init+0x6c>)
 8001948:	f7ff feaa 	bl	80016a0 <_Error_Handler>
 800194c:	e7e6      	b.n	800191c <MX_TIM4_Init+0x1c>
    _Error_Handler(__FILE__, __LINE__);
 800194e:	216c      	movs	r1, #108	; 0x6c
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <MX_TIM4_Init+0x6c>)
 8001952:	f7ff fea5 	bl	80016a0 <_Error_Handler>
 8001956:	e7ea      	b.n	800192e <MX_TIM4_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 8001958:	2173      	movs	r1, #115	; 0x73
 800195a:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_TIM4_Init+0x6c>)
 800195c:	f7ff fea0 	bl	80016a0 <_Error_Handler>
}
 8001960:	e7ed      	b.n	800193e <MX_TIM4_Init+0x3e>
 8001962:	bf00      	nop
 8001964:	200000f8 	.word	0x200000f8
 8001968:	40000800 	.word	0x40000800
 800196c:	08001d38 	.word	0x08001d38

08001970 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001970:	b084      	sub	sp, #16

  if(tim_pwmHandle->Instance==TIM2)
 8001972:	6803      	ldr	r3, [r0, #0]
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001978:	d007      	beq.n	800198a <HAL_TIM_PWM_MspInit+0x1a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM5)
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <HAL_TIM_PWM_MspInit+0x60>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d010      	beq.n	80019a2 <HAL_TIM_PWM_MspInit+0x32>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM8)
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_TIM_PWM_MspInit+0x64>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d018      	beq.n	80019b8 <HAL_TIM_PWM_MspInit+0x48>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001986:	b004      	add	sp, #16
 8001988:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	61da      	str	r2, [r3, #28]
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9b01      	ldr	r3, [sp, #4]
 80019a0:	e7f1      	b.n	8001986 <HAL_TIM_PWM_MspInit+0x16>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_TIM_PWM_MspInit+0x68>)
 80019a4:	69da      	ldr	r2, [r3, #28]
 80019a6:	f042 0208 	orr.w	r2, r2, #8
 80019aa:	61da      	str	r2, [r3, #28]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	9b02      	ldr	r3, [sp, #8]
 80019b6:	e7e6      	b.n	8001986 <HAL_TIM_PWM_MspInit+0x16>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_TIM_PWM_MspInit+0x68>)
 80019ba:	699a      	ldr	r2, [r3, #24]
 80019bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019c0:	619a      	str	r2, [r3, #24]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c8:	9303      	str	r3, [sp, #12]
 80019ca:	9b03      	ldr	r3, [sp, #12]
}
 80019cc:	e7db      	b.n	8001986 <HAL_TIM_PWM_MspInit+0x16>
 80019ce:	bf00      	nop
 80019d0:	40000c00 	.word	0x40000c00
 80019d4:	40013400 	.word	0x40013400
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 80019dc:	6802      	ldr	r2, [r0, #0]
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_TIM_Base_MspInit+0x28>)
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d000      	beq.n	80019e6 <HAL_TIM_Base_MspInit+0xa>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019e4:	4770      	bx	lr
{
 80019e6:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	f042 0204 	orr.w	r2, r2, #4
 80019f2:	61da      	str	r2, [r3, #28]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b01      	ldr	r3, [sp, #4]
}
 80019fe:	b002      	add	sp, #8
 8001a00:	e7f0      	b.n	80019e4 <HAL_TIM_Base_MspInit+0x8>
 8001a02:	bf00      	nop
 8001a04:	40000800 	.word	0x40000800

08001a08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a08:	b500      	push	{lr}
 8001a0a:	b085      	sub	sp, #20

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8001a0c:	6803      	ldr	r3, [r0, #0]
 8001a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a12:	d008      	beq.n	8001a26 <HAL_TIM_MspPostInit+0x1e>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM5)
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_TIM_MspPostInit+0x70>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d019      	beq.n	8001a4e <HAL_TIM_MspPostInit+0x46>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8001a1a:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <HAL_TIM_MspPostInit+0x74>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d020      	beq.n	8001a62 <HAL_TIM_MspPostInit+0x5a>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a20:	b005      	add	sp, #20
 8001a22:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	4669      	mov	r1, sp
 8001a34:	4812      	ldr	r0, [pc, #72]	; (8001a80 <HAL_TIM_MspPostInit+0x78>)
 8001a36:	f7fe fe05 	bl	8000644 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_TIM_MspPostInit+0x7c>)
 8001a3c:	6853      	ldr	r3, [r2, #4]
 8001a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4a:	6053      	str	r3, [r2, #4]
 8001a4c:	e7e8      	b.n	8001a20 <HAL_TIM_MspPostInit+0x18>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a4e:	2308      	movs	r3, #8
 8001a50:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	4669      	mov	r1, sp
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <HAL_TIM_MspPostInit+0x80>)
 8001a5c:	f7fe fdf2 	bl	8000644 <HAL_GPIO_Init>
 8001a60:	e7de      	b.n	8001a20 <HAL_TIM_MspPostInit+0x18>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a66:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	4669      	mov	r1, sp
 8001a70:	4806      	ldr	r0, [pc, #24]	; (8001a8c <HAL_TIM_MspPostInit+0x84>)
 8001a72:	f7fe fde7 	bl	8000644 <HAL_GPIO_Init>
}
 8001a76:	e7d3      	b.n	8001a20 <HAL_TIM_MspPostInit+0x18>
 8001a78:	40000c00 	.word	0x40000c00
 8001a7c:	40013400 	.word	0x40013400
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	40011000 	.word	0x40011000

08001a90 <MX_TIM2_Init>:
{
 8001a90:	b500      	push	{lr}
 8001a92:	b08b      	sub	sp, #44	; 0x2c
  htim2.Instance = TIM2;
 8001a94:	481a      	ldr	r0, [pc, #104]	; (8001b00 <MX_TIM2_Init+0x70>)
 8001a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a9a:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 8001aa2:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa4:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aa8:	f7ff fc13 	bl	80012d2 <HAL_TIM_PWM_Init>
 8001aac:	b9c8      	cbnz	r0, 8001ae2 <MX_TIM2_Init+0x52>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab4:	a908      	add	r1, sp, #32
 8001ab6:	4812      	ldr	r0, [pc, #72]	; (8001b00 <MX_TIM2_Init+0x70>)
 8001ab8:	f7ff fcf8 	bl	80014ac <HAL_TIMEx_MasterConfigSynchronization>
 8001abc:	b9b0      	cbnz	r0, 8001aec <MX_TIM2_Init+0x5c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abe:	2360      	movs	r3, #96	; 0x60
 8001ac0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac6:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac8:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aca:	2208      	movs	r2, #8
 8001acc:	a901      	add	r1, sp, #4
 8001ace:	480c      	ldr	r0, [pc, #48]	; (8001b00 <MX_TIM2_Init+0x70>)
 8001ad0:	f7ff fc52 	bl	8001378 <HAL_TIM_PWM_ConfigChannel>
 8001ad4:	b978      	cbnz	r0, 8001af6 <MX_TIM2_Init+0x66>
  HAL_TIM_MspPostInit(&htim2);
 8001ad6:	480a      	ldr	r0, [pc, #40]	; (8001b00 <MX_TIM2_Init+0x70>)
 8001ad8:	f7ff ff96 	bl	8001a08 <HAL_TIM_MspPostInit>
}
 8001adc:	b00b      	add	sp, #44	; 0x2c
 8001ade:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001ae2:	2142      	movs	r1, #66	; 0x42
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <MX_TIM2_Init+0x74>)
 8001ae6:	f7ff fddb 	bl	80016a0 <_Error_Handler>
 8001aea:	e7e0      	b.n	8001aae <MX_TIM2_Init+0x1e>
    _Error_Handler(__FILE__, __LINE__);
 8001aec:	2149      	movs	r1, #73	; 0x49
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_TIM2_Init+0x74>)
 8001af0:	f7ff fdd6 	bl	80016a0 <_Error_Handler>
 8001af4:	e7e3      	b.n	8001abe <MX_TIM2_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 8001af6:	2152      	movs	r1, #82	; 0x52
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <MX_TIM2_Init+0x74>)
 8001afa:	f7ff fdd1 	bl	80016a0 <_Error_Handler>
 8001afe:	e7ea      	b.n	8001ad6 <MX_TIM2_Init+0x46>
 8001b00:	200000b8 	.word	0x200000b8
 8001b04:	08001d38 	.word	0x08001d38

08001b08 <MX_TIM5_Init>:
{
 8001b08:	b500      	push	{lr}
 8001b0a:	b08b      	sub	sp, #44	; 0x2c
  htim5.Instance = TIM5;
 8001b0c:	481a      	ldr	r0, [pc, #104]	; (8001b78 <MX_TIM5_Init+0x70>)
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_TIM5_Init+0x74>)
 8001b10:	6003      	str	r3, [r0, #0]
  htim5.Init.Prescaler = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 0;
 8001b18:	60c3      	str	r3, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b1e:	f7ff fbd8 	bl	80012d2 <HAL_TIM_PWM_Init>
 8001b22:	b9c8      	cbnz	r0, 8001b58 <MX_TIM5_Init+0x50>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b2a:	a908      	add	r1, sp, #32
 8001b2c:	4812      	ldr	r0, [pc, #72]	; (8001b78 <MX_TIM5_Init+0x70>)
 8001b2e:	f7ff fcbd 	bl	80014ac <HAL_TIMEx_MasterConfigSynchronization>
 8001b32:	b9b0      	cbnz	r0, 8001b62 <MX_TIM5_Init+0x5a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b34:	2360      	movs	r3, #96	; 0x60
 8001b36:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3c:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3e:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b40:	220c      	movs	r2, #12
 8001b42:	a901      	add	r1, sp, #4
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <MX_TIM5_Init+0x70>)
 8001b46:	f7ff fc17 	bl	8001378 <HAL_TIM_PWM_ConfigChannel>
 8001b4a:	b978      	cbnz	r0, 8001b6c <MX_TIM5_Init+0x64>
  HAL_TIM_MspPostInit(&htim5);
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <MX_TIM5_Init+0x70>)
 8001b4e:	f7ff ff5b 	bl	8001a08 <HAL_TIM_MspPostInit>
}
 8001b52:	b00b      	add	sp, #44	; 0x2c
 8001b54:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001b58:	2185      	movs	r1, #133	; 0x85
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <MX_TIM5_Init+0x78>)
 8001b5c:	f7ff fda0 	bl	80016a0 <_Error_Handler>
 8001b60:	e7e0      	b.n	8001b24 <MX_TIM5_Init+0x1c>
    _Error_Handler(__FILE__, __LINE__);
 8001b62:	218c      	movs	r1, #140	; 0x8c
 8001b64:	4806      	ldr	r0, [pc, #24]	; (8001b80 <MX_TIM5_Init+0x78>)
 8001b66:	f7ff fd9b 	bl	80016a0 <_Error_Handler>
 8001b6a:	e7e3      	b.n	8001b34 <MX_TIM5_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 8001b6c:	2195      	movs	r1, #149	; 0x95
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_TIM5_Init+0x78>)
 8001b70:	f7ff fd96 	bl	80016a0 <_Error_Handler>
 8001b74:	e7ea      	b.n	8001b4c <MX_TIM5_Init+0x44>
 8001b76:	bf00      	nop
 8001b78:	20000138 	.word	0x20000138
 8001b7c:	40000c00 	.word	0x40000c00
 8001b80:	08001d38 	.word	0x08001d38

08001b84 <MX_TIM8_Init>:
{
 8001b84:	b500      	push	{lr}
 8001b86:	b091      	sub	sp, #68	; 0x44
  htim8.Instance = TIM8;
 8001b88:	4826      	ldr	r0, [pc, #152]	; (8001c24 <MX_TIM8_Init+0xa0>)
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <MX_TIM8_Init+0xa4>)
 8001b8c:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 0;
 8001b94:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b98:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b9c:	f7ff fb99 	bl	80012d2 <HAL_TIM_PWM_Init>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d12a      	bne.n	8001bfa <MX_TIM8_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001baa:	a90e      	add	r1, sp, #56	; 0x38
 8001bac:	481d      	ldr	r0, [pc, #116]	; (8001c24 <MX_TIM8_Init+0xa0>)
 8001bae:	f7ff fc7d 	bl	80014ac <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	bb38      	cbnz	r0, 8001c04 <MX_TIM8_Init+0x80>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb4:	2360      	movs	r3, #96	; 0x60
 8001bb6:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbc:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bbe:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc0:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bc2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bc4:	220c      	movs	r2, #12
 8001bc6:	a907      	add	r1, sp, #28
 8001bc8:	4816      	ldr	r0, [pc, #88]	; (8001c24 <MX_TIM8_Init+0xa0>)
 8001bca:	f7ff fbd5 	bl	8001378 <HAL_TIM_PWM_ConfigChannel>
 8001bce:	b9f0      	cbnz	r0, 8001c0e <MX_TIM8_Init+0x8a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bd8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bda:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be0:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001be2:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001be4:	4669      	mov	r1, sp
 8001be6:	480f      	ldr	r0, [pc, #60]	; (8001c24 <MX_TIM8_Init+0xa0>)
 8001be8:	f7ff fc34 	bl	8001454 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bec:	b9a0      	cbnz	r0, 8001c18 <MX_TIM8_Init+0x94>
  HAL_TIM_MspPostInit(&htim8);
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <MX_TIM8_Init+0xa0>)
 8001bf0:	f7ff ff0a 	bl	8001a08 <HAL_TIM_MspPostInit>
}
 8001bf4:	b011      	add	sp, #68	; 0x44
 8001bf6:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001bfa:	21ab      	movs	r1, #171	; 0xab
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <MX_TIM8_Init+0xa8>)
 8001bfe:	f7ff fd4f 	bl	80016a0 <_Error_Handler>
 8001c02:	e7cf      	b.n	8001ba4 <MX_TIM8_Init+0x20>
    _Error_Handler(__FILE__, __LINE__);
 8001c04:	21b2      	movs	r1, #178	; 0xb2
 8001c06:	4809      	ldr	r0, [pc, #36]	; (8001c2c <MX_TIM8_Init+0xa8>)
 8001c08:	f7ff fd4a 	bl	80016a0 <_Error_Handler>
 8001c0c:	e7d2      	b.n	8001bb4 <MX_TIM8_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8001c0e:	21bd      	movs	r1, #189	; 0xbd
 8001c10:	4806      	ldr	r0, [pc, #24]	; (8001c2c <MX_TIM8_Init+0xa8>)
 8001c12:	f7ff fd45 	bl	80016a0 <_Error_Handler>
 8001c16:	e7db      	b.n	8001bd0 <MX_TIM8_Init+0x4c>
    _Error_Handler(__FILE__, __LINE__);
 8001c18:	21c9      	movs	r1, #201	; 0xc9
 8001c1a:	4804      	ldr	r0, [pc, #16]	; (8001c2c <MX_TIM8_Init+0xa8>)
 8001c1c:	f7ff fd40 	bl	80016a0 <_Error_Handler>
 8001c20:	e7e5      	b.n	8001bee <MX_TIM8_Init+0x6a>
 8001c22:	bf00      	nop
 8001c24:	2000005c 	.word	0x2000005c
 8001c28:	40013400 	.word	0x40013400
 8001c2c:	08001d38 	.word	0x08001d38

08001c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c32:	e003      	b.n	8001c3c <LoopCopyDataInit>

08001c34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c3a:	3104      	adds	r1, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c3c:	480a      	ldr	r0, [pc, #40]	; (8001c68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c44:	d3f6      	bcc.n	8001c34 <CopyDataInit>
  ldr r2, =_sbss
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c48:	e002      	b.n	8001c50 <LoopFillZerobss>

08001c4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c4c:	f842 3b04 	str.w	r3, [r2], #4

08001c50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c54:	d3f9      	bcc.n	8001c4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c56:	f7ff fe2d 	bl	80018b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f000 f80f 	bl	8001c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c5e:	f7ff fd6f 	bl	8001740 <main>
  bx lr
 8001c62:	4770      	bx	lr
  ldr r3, =_sidata
 8001c64:	08001d50 	.word	0x08001d50
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001c70:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001c74:	20000178 	.word	0x20000178

08001c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC1_2_IRQHandler>
	...

08001c7c <__libc_init_array>:
 8001c7c:	b570      	push	{r4, r5, r6, lr}
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4e0c      	ldr	r6, [pc, #48]	; (8001cb4 <__libc_init_array+0x38>)
 8001c82:	4c0d      	ldr	r4, [pc, #52]	; (8001cb8 <__libc_init_array+0x3c>)
 8001c84:	1ba4      	subs	r4, r4, r6
 8001c86:	10a4      	asrs	r4, r4, #2
 8001c88:	42a5      	cmp	r5, r4
 8001c8a:	d109      	bne.n	8001ca0 <__libc_init_array+0x24>
 8001c8c:	f000 f81a 	bl	8001cc4 <_init>
 8001c90:	2500      	movs	r5, #0
 8001c92:	4e0a      	ldr	r6, [pc, #40]	; (8001cbc <__libc_init_array+0x40>)
 8001c94:	4c0a      	ldr	r4, [pc, #40]	; (8001cc0 <__libc_init_array+0x44>)
 8001c96:	1ba4      	subs	r4, r4, r6
 8001c98:	10a4      	asrs	r4, r4, #2
 8001c9a:	42a5      	cmp	r5, r4
 8001c9c:	d105      	bne.n	8001caa <__libc_init_array+0x2e>
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ca4:	4798      	blx	r3
 8001ca6:	3501      	adds	r5, #1
 8001ca8:	e7ee      	b.n	8001c88 <__libc_init_array+0xc>
 8001caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cae:	4798      	blx	r3
 8001cb0:	3501      	adds	r5, #1
 8001cb2:	e7f2      	b.n	8001c9a <__libc_init_array+0x1e>
 8001cb4:	08001d48 	.word	0x08001d48
 8001cb8:	08001d48 	.word	0x08001d48
 8001cbc:	08001d48 	.word	0x08001d48
 8001cc0:	08001d4c 	.word	0x08001d4c

08001cc4 <_init>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	bf00      	nop
 8001cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cca:	bc08      	pop	{r3}
 8001ccc:	469e      	mov	lr, r3
 8001cce:	4770      	bx	lr

08001cd0 <_fini>:
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd2:	bf00      	nop
 8001cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd6:	bc08      	pop	{r3}
 8001cd8:	469e      	mov	lr, r3
 8001cda:	4770      	bx	lr
