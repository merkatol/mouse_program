
cubemx_mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  0800309c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000160  20000074  08003110  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200001d4  08003110  000201d4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012fea  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024ac  00000000  00000000  00033087  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000061c3  00000000  00000000  00035533  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009c0  00000000  00000000  0003b6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000960  00000000  00000000  0003c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001790a  00000000  00000000  0003ca18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000873b  00000000  00000000  00054322  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007fb01  00000000  00000000  0005ca5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000dc55e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000020cc  00000000  00000000  000dc5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  000de6a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  000de744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08002f70 	.word	0x08002f70

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08002f70 	.word	0x08002f70

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b510      	push	{r4, lr}
 8000226:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <HAL_InitTick+0x40>)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0c      	ldr	r2, [pc, #48]	; (8000268 <HAL_InitTick+0x44>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 fb48 	bl	80008d0 <HAL_SYSTICK_Config>
 8000240:	b968      	cbnz	r0, 800025e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	2c0f      	cmp	r4, #15
 8000244:	d901      	bls.n	800024a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000246:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000248:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800024a:	2200      	movs	r2, #0
 800024c:	4621      	mov	r1, r4
 800024e:	f04f 30ff 	mov.w	r0, #4294967295
 8000252:	f000 fb0b 	bl	800086c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000256:	4b03      	ldr	r3, [pc, #12]	; (8000264 <HAL_InitTick+0x40>)
 8000258:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	bf00      	nop
 8000264:	20000000 	.word	0x20000000
 8000268:	2000000c 	.word	0x2000000c

0800026c <HAL_Init>:
{
 800026c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026e:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
 8000270:	6813      	ldr	r3, [r2, #0]
 8000272:	f043 0310 	orr.w	r3, r3, #16
 8000276:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000278:	2003      	movs	r0, #3
 800027a:	f000 fae5 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f001 fcc2 	bl	8001c0c <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	6811      	ldr	r1, [r2, #0]
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_IncTick+0x14>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	2000009c 	.word	0x2000009c
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	2000009c 	.word	0x2000009c

080002b4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	b083      	sub	sp, #12
 80002b8:	4605      	mov	r5, r0
 80002ba:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80002bc:	2300      	movs	r3, #0
 80002be:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80002c0:	f7ff fff2 	bl	80002a8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80002c4:	682b      	ldr	r3, [r5, #0]
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80002cc:	d123      	bne.n	8000316 <HAL_ADC_PollForConversion+0x62>
 80002ce:	4606      	mov	r6, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80002d0:	685a      	ldr	r2, [r3, #4]
 80002d2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80002d6:	d103      	bne.n	80002e0 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80002d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80002da:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80002de:	d024      	beq.n	800032a <HAL_ADC_PollForConversion+0x76>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80002e0:	4b4b      	ldr	r3, [pc, #300]	; (8000410 <HAL_ADC_PollForConversion+0x15c>)
 80002e2:	681f      	ldr	r7, [r3, #0]
 80002e4:	2002      	movs	r0, #2
 80002e6:	f000 ffbb 	bl	8001260 <HAL_RCCEx_GetPeriphCLKFreq>
 80002ea:	fbb7 f7f0 	udiv	r7, r7, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80002ee:	682b      	ldr	r3, [r5, #0]
 80002f0:	6919      	ldr	r1, [r3, #16]
 80002f2:	4a48      	ldr	r2, [pc, #288]	; (8000414 <HAL_ADC_PollForConversion+0x160>)
 80002f4:	4211      	tst	r1, r2
 80002f6:	d12f      	bne.n	8000358 <HAL_ADC_PollForConversion+0xa4>
 80002f8:	68d9      	ldr	r1, [r3, #12]
 80002fa:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 80002fe:	4211      	tst	r1, r2
 8000300:	d12a      	bne.n	8000358 <HAL_ADC_PollForConversion+0xa4>
 8000302:	6919      	ldr	r1, [r3, #16]
 8000304:	4a44      	ldr	r2, [pc, #272]	; (8000418 <HAL_ADC_PollForConversion+0x164>)
 8000306:	4211      	tst	r1, r2
 8000308:	d139      	bne.n	800037e <HAL_ADC_PollForConversion+0xca>
 800030a:	68da      	ldr	r2, [r3, #12]
 800030c:	4b43      	ldr	r3, [pc, #268]	; (800041c <HAL_ADC_PollForConversion+0x168>)
 800030e:	421a      	tst	r2, r3
 8000310:	d037      	beq.n	8000382 <HAL_ADC_PollForConversion+0xce>
 8000312:	2029      	movs	r0, #41	; 0x29
 8000314:	e03a      	b.n	800038c <HAL_ADC_PollForConversion+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000316:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	62ab      	str	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800031e:	2300      	movs	r3, #0
 8000320:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 8000324:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8000326:	b003      	add	sp, #12
 8000328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800032a:	682b      	ldr	r3, [r5, #0]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f013 0f02 	tst.w	r3, #2
 8000332:	d148      	bne.n	80003c6 <HAL_ADC_PollForConversion+0x112>
      if(Timeout != HAL_MAX_DELAY)
 8000334:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000338:	d0f7      	beq.n	800032a <HAL_ADC_PollForConversion+0x76>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800033a:	b124      	cbz	r4, 8000346 <HAL_ADC_PollForConversion+0x92>
 800033c:	f7ff ffb4 	bl	80002a8 <HAL_GetTick>
 8000340:	1b80      	subs	r0, r0, r6
 8000342:	4284      	cmp	r4, r0
 8000344:	d2f1      	bcs.n	800032a <HAL_ADC_PollForConversion+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000346:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	62ab      	str	r3, [r5, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800034e:	2300      	movs	r3, #0
 8000350:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
          return HAL_TIMEOUT;
 8000354:	2003      	movs	r0, #3
 8000356:	e7e6      	b.n	8000326 <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000358:	6919      	ldr	r1, [r3, #16]
 800035a:	4a2f      	ldr	r2, [pc, #188]	; (8000418 <HAL_ADC_PollForConversion+0x164>)
 800035c:	4211      	tst	r1, r2
 800035e:	d104      	bne.n	800036a <HAL_ADC_PollForConversion+0xb6>
 8000360:	68d9      	ldr	r1, [r3, #12]
 8000362:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8000366:	4211      	tst	r1, r2
 8000368:	d00d      	beq.n	8000386 <HAL_ADC_PollForConversion+0xd2>
 800036a:	6919      	ldr	r1, [r3, #16]
 800036c:	4a2c      	ldr	r2, [pc, #176]	; (8000420 <HAL_ADC_PollForConversion+0x16c>)
 800036e:	400a      	ands	r2, r1
 8000370:	b95a      	cbnz	r2, 800038a <HAL_ADC_PollForConversion+0xd6>
 8000372:	68da      	ldr	r2, [r3, #12]
 8000374:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <HAL_ADC_PollForConversion+0x16c>)
 8000376:	4013      	ands	r3, r2
 8000378:	b15b      	cbz	r3, 8000392 <HAL_ADC_PollForConversion+0xde>
 800037a:	20fc      	movs	r0, #252	; 0xfc
 800037c:	e006      	b.n	800038c <HAL_ADC_PollForConversion+0xd8>
 800037e:	2029      	movs	r0, #41	; 0x29
 8000380:	e004      	b.n	800038c <HAL_ADC_PollForConversion+0xd8>
 8000382:	2014      	movs	r0, #20
 8000384:	e002      	b.n	800038c <HAL_ADC_PollForConversion+0xd8>
 8000386:	2054      	movs	r0, #84	; 0x54
 8000388:	e000      	b.n	800038c <HAL_ADC_PollForConversion+0xd8>
 800038a:	20fc      	movs	r0, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800038c:	fb07 f700 	mul.w	r7, r7, r0
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000390:	e004      	b.n	800039c <HAL_ADC_PollForConversion+0xe8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000392:	2054      	movs	r0, #84	; 0x54
 8000394:	e7fa      	b.n	800038c <HAL_ADC_PollForConversion+0xd8>
      Conversion_Timeout_CPU_cycles ++;
 8000396:	9b01      	ldr	r3, [sp, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800039c:	9b01      	ldr	r3, [sp, #4]
 800039e:	429f      	cmp	r7, r3
 80003a0:	d911      	bls.n	80003c6 <HAL_ADC_PollForConversion+0x112>
      if(Timeout != HAL_MAX_DELAY)
 80003a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80003a6:	d0f6      	beq.n	8000396 <HAL_ADC_PollForConversion+0xe2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80003a8:	b124      	cbz	r4, 80003b4 <HAL_ADC_PollForConversion+0x100>
 80003aa:	f7ff ff7d 	bl	80002a8 <HAL_GetTick>
 80003ae:	1b80      	subs	r0, r0, r6
 80003b0:	4284      	cmp	r4, r0
 80003b2:	d2f0      	bcs.n	8000396 <HAL_ADC_PollForConversion+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80003b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	62ab      	str	r3, [r5, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80003bc:	2300      	movs	r3, #0
 80003be:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
          return HAL_TIMEOUT;
 80003c2:	2003      	movs	r0, #3
 80003c4:	e7af      	b.n	8000326 <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80003c6:	682b      	ldr	r3, [r5, #0]
 80003c8:	f06f 0212 	mvn.w	r2, #18
 80003cc:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80003ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80003d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003d4:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003d6:	682b      	ldr	r3, [r5, #0]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80003de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80003e2:	d001      	beq.n	80003e8 <HAL_ADC_PollForConversion+0x134>
  return HAL_OK;
 80003e4:	2000      	movs	r0, #0
 80003e6:	e79e      	b.n	8000326 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80003e8:	68eb      	ldr	r3, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003ea:	b96b      	cbnz	r3, 8000408 <HAL_ADC_PollForConversion+0x154>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80003ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80003ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003f2:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80003f6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80003fa:	d107      	bne.n	800040c <HAL_ADC_PollForConversion+0x158>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80003fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	62ab      	str	r3, [r5, #40]	; 0x28
  return HAL_OK;
 8000404:	2000      	movs	r0, #0
 8000406:	e78e      	b.n	8000326 <HAL_ADC_PollForConversion+0x72>
 8000408:	2000      	movs	r0, #0
 800040a:	e78c      	b.n	8000326 <HAL_ADC_PollForConversion+0x72>
 800040c:	2000      	movs	r0, #0
 800040e:	e78a      	b.n	8000326 <HAL_ADC_PollForConversion+0x72>
 8000410:	2000000c 	.word	0x2000000c
 8000414:	24924924 	.word	0x24924924
 8000418:	12492492 	.word	0x12492492
 800041c:	00492492 	.word	0x00492492
 8000420:	00249249 	.word	0x00249249

08000424 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000424:	6803      	ldr	r3, [r0, #0]
 8000426:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000428:	4770      	bx	lr
	...

0800042c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800042c:	b430      	push	{r4, r5}
 800042e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000430:	2300      	movs	r3, #0
 8000432:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000434:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000438:	2b01      	cmp	r3, #1
 800043a:	f000 808b 	beq.w	8000554 <HAL_ADC_ConfigChannel+0x128>
 800043e:	4602      	mov	r2, r0
 8000440:	2301      	movs	r3, #1
 8000442:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000446:	684b      	ldr	r3, [r1, #4]
 8000448:	2b06      	cmp	r3, #6
 800044a:	d829      	bhi.n	80004a0 <HAL_ADC_ConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800044c:	6805      	ldr	r5, [r0, #0]
 800044e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000450:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000454:	3b05      	subs	r3, #5
 8000456:	241f      	movs	r4, #31
 8000458:	409c      	lsls	r4, r3
 800045a:	ea20 0004 	bic.w	r0, r0, r4
 800045e:	680c      	ldr	r4, [r1, #0]
 8000460:	fa04 f303 	lsl.w	r3, r4, r3
 8000464:	4303      	orrs	r3, r0
 8000466:	636b      	str	r3, [r5, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000468:	680b      	ldr	r3, [r1, #0]
 800046a:	2b09      	cmp	r3, #9
 800046c:	d938      	bls.n	80004e0 <HAL_ADC_ConfigChannel+0xb4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800046e:	6815      	ldr	r5, [r2, #0]
 8000470:	68e8      	ldr	r0, [r5, #12]
 8000472:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000476:	3b1e      	subs	r3, #30
 8000478:	2407      	movs	r4, #7
 800047a:	409c      	lsls	r4, r3
 800047c:	ea20 0004 	bic.w	r0, r0, r4
 8000480:	688c      	ldr	r4, [r1, #8]
 8000482:	fa04 f303 	lsl.w	r3, r4, r3
 8000486:	4303      	orrs	r3, r0
 8000488:	60eb      	str	r3, [r5, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800048a:	680b      	ldr	r3, [r1, #0]
 800048c:	3b10      	subs	r3, #16
 800048e:	2b01      	cmp	r3, #1
 8000490:	d934      	bls.n	80004fc <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000492:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000494:	2300      	movs	r3, #0
 8000496:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800049a:	b002      	add	sp, #8
 800049c:	bc30      	pop	{r4, r5}
 800049e:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80004a0:	2b0c      	cmp	r3, #12
 80004a2:	d80e      	bhi.n	80004c2 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80004a4:	6805      	ldr	r5, [r0, #0]
 80004a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80004a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004ac:	3b23      	subs	r3, #35	; 0x23
 80004ae:	241f      	movs	r4, #31
 80004b0:	409c      	lsls	r4, r3
 80004b2:	ea20 0004 	bic.w	r0, r0, r4
 80004b6:	680c      	ldr	r4, [r1, #0]
 80004b8:	fa04 f303 	lsl.w	r3, r4, r3
 80004bc:	4303      	orrs	r3, r0
 80004be:	632b      	str	r3, [r5, #48]	; 0x30
 80004c0:	e7d2      	b.n	8000468 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80004c2:	6805      	ldr	r5, [r0, #0]
 80004c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80004c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004ca:	3b41      	subs	r3, #65	; 0x41
 80004cc:	241f      	movs	r4, #31
 80004ce:	409c      	lsls	r4, r3
 80004d0:	ea20 0004 	bic.w	r0, r0, r4
 80004d4:	680c      	ldr	r4, [r1, #0]
 80004d6:	fa04 f303 	lsl.w	r3, r4, r3
 80004da:	4303      	orrs	r3, r0
 80004dc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80004de:	e7c3      	b.n	8000468 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004e0:	6815      	ldr	r5, [r2, #0]
 80004e2:	6928      	ldr	r0, [r5, #16]
 80004e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80004e8:	2407      	movs	r4, #7
 80004ea:	409c      	lsls	r4, r3
 80004ec:	ea20 0004 	bic.w	r0, r0, r4
 80004f0:	688c      	ldr	r4, [r1, #8]
 80004f2:	fa04 f303 	lsl.w	r3, r4, r3
 80004f6:	4303      	orrs	r3, r0
 80004f8:	612b      	str	r3, [r5, #16]
 80004fa:	e7c6      	b.n	800048a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80004fc:	6813      	ldr	r3, [r2, #0]
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <HAL_ADC_ConfigChannel+0x12c>)
 8000500:	4283      	cmp	r3, r0
 8000502:	d005      	beq.n	8000510 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000504:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800050c:	2001      	movs	r0, #1
 800050e:	e7c1      	b.n	8000494 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000510:	6898      	ldr	r0, [r3, #8]
 8000512:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000516:	d11b      	bne.n	8000550 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000518:	6898      	ldr	r0, [r3, #8]
 800051a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800051e:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000520:	680b      	ldr	r3, [r1, #0]
 8000522:	2b10      	cmp	r3, #16
 8000524:	d001      	beq.n	800052a <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000526:	2000      	movs	r0, #0
 8000528:	e7b4      	b.n	8000494 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HAL_ADC_ConfigChannel+0x130>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	490c      	ldr	r1, [pc, #48]	; (8000560 <HAL_ADC_ConfigChannel+0x134>)
 8000530:	fba1 1303 	umull	r1, r3, r1, r3
 8000534:	0c9b      	lsrs	r3, r3, #18
 8000536:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800053a:	0059      	lsls	r1, r3, #1
 800053c:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800053e:	e002      	b.n	8000546 <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 8000540:	9b01      	ldr	r3, [sp, #4]
 8000542:	3b01      	subs	r3, #1
 8000544:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000546:	9b01      	ldr	r3, [sp, #4]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1f9      	bne.n	8000540 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800054c:	2000      	movs	r0, #0
 800054e:	e7a1      	b.n	8000494 <HAL_ADC_ConfigChannel+0x68>
 8000550:	2000      	movs	r0, #0
 8000552:	e79f      	b.n	8000494 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8000554:	2002      	movs	r0, #2
 8000556:	e7a0      	b.n	800049a <HAL_ADC_ConfigChannel+0x6e>
 8000558:	40012400 	.word	0x40012400
 800055c:	2000000c 	.word	0x2000000c
 8000560:	431bde83 	.word	0x431bde83

08000564 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000568:	2300      	movs	r3, #0
 800056a:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800056c:	6803      	ldr	r3, [r0, #0]
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	f012 0f01 	tst.w	r2, #1
 8000574:	d12e      	bne.n	80005d4 <ADC_Enable+0x70>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	f042 0201 	orr.w	r2, r2, #1
 800057c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <ADC_Enable+0x78>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <ADC_Enable+0x7c>)
 8000584:	fba2 2303 	umull	r2, r3, r2, r3
 8000588:	0c9b      	lsrs	r3, r3, #18
 800058a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800058c:	e002      	b.n	8000594 <ADC_Enable+0x30>
    {
      wait_loop_index--;
 800058e:	9b01      	ldr	r3, [sp, #4]
 8000590:	3b01      	subs	r3, #1
 8000592:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000594:	9b01      	ldr	r3, [sp, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f9      	bne.n	800058e <ADC_Enable+0x2a>
 800059a:	4604      	mov	r4, r0
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800059c:	f7ff fe84 	bl	80002a8 <HAL_GetTick>
 80005a0:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	f013 0f01 	tst.w	r3, #1
 80005aa:	d111      	bne.n	80005d0 <ADC_Enable+0x6c>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80005ac:	f7ff fe7c 	bl	80002a8 <HAL_GetTick>
 80005b0:	1b40      	subs	r0, r0, r5
 80005b2:	2802      	cmp	r0, #2
 80005b4:	d9f5      	bls.n	80005a2 <ADC_Enable+0x3e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	62e3      	str	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80005c6:	2300      	movs	r3, #0
 80005c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      
        return HAL_ERROR;
 80005cc:	2001      	movs	r0, #1
 80005ce:	e002      	b.n	80005d6 <ADC_Enable+0x72>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80005d0:	2000      	movs	r0, #0
 80005d2:	e000      	b.n	80005d6 <ADC_Enable+0x72>
 80005d4:	2000      	movs	r0, #0
}
 80005d6:	b003      	add	sp, #12
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	2000000c 	.word	0x2000000c
 80005e0:	431bde83 	.word	0x431bde83

080005e4 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80005e4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d102      	bne.n	80005f2 <HAL_ADC_Start+0xe>
 80005ec:	2302      	movs	r3, #2
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	4770      	bx	lr
{
 80005f2:	b510      	push	{r4, lr}
 80005f4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80005f6:	2301      	movs	r3, #1
 80005f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80005fc:	f7ff ffb2 	bl	8000564 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000600:	4603      	mov	r3, r0
 8000602:	2800      	cmp	r0, #0
 8000604:	d15b      	bne.n	80006be <HAL_ADC_Start+0xda>
    ADC_STATE_CLR_SET(hadc->State,
 8000606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000608:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800060c:	f022 0201 	bic.w	r2, r2, #1
 8000610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000614:	62a2      	str	r2, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	492b      	ldr	r1, [pc, #172]	; (80006c8 <HAL_ADC_Start+0xe4>)
 800061a:	428a      	cmp	r2, r1
 800061c:	d027      	beq.n	800066e <HAL_ADC_Start+0x8a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800061e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000620:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8000624:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000626:	6851      	ldr	r1, [r2, #4]
 8000628:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800062c:	d005      	beq.n	800063a <HAL_ADC_Start+0x56>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800062e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000630:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000634:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000638:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800063a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800063c:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8000640:	d02b      	beq.n	800069a <HAL_ADC_Start+0xb6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000642:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000644:	f021 0106 	bic.w	r1, r1, #6
 8000648:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800064a:	2100      	movs	r1, #0
 800064c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000650:	f06f 0102 	mvn.w	r1, #2
 8000654:	6011      	str	r1, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000656:	6822      	ldr	r2, [r4, #0]
 8000658:	6891      	ldr	r1, [r2, #8]
 800065a:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 800065e:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 8000662:	d01d      	beq.n	80006a0 <HAL_ADC_Start+0xbc>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000664:	6891      	ldr	r1, [r2, #8]
 8000666:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066a:	6091      	str	r1, [r2, #8]
 800066c:	e02a      	b.n	80006c4 <HAL_ADC_Start+0xe0>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800066e:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8000672:	6849      	ldr	r1, [r1, #4]
 8000674:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8000678:	d0d1      	beq.n	800061e <HAL_ADC_Start+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800067a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000682:	4912      	ldr	r1, [pc, #72]	; (80006cc <HAL_ADC_Start+0xe8>)
 8000684:	6849      	ldr	r1, [r1, #4]
 8000686:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800068a:	d0d6      	beq.n	800063a <HAL_ADC_Start+0x56>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800068c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800068e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000692:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000696:	62a1      	str	r1, [r4, #40]	; 0x28
 8000698:	e7cf      	b.n	800063a <HAL_ADC_Start+0x56>
      ADC_CLEAR_ERRORCODE(hadc);
 800069a:	2100      	movs	r1, #0
 800069c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800069e:	e7d4      	b.n	800064a <HAL_ADC_Start+0x66>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80006a0:	4909      	ldr	r1, [pc, #36]	; (80006c8 <HAL_ADC_Start+0xe4>)
 80006a2:	428a      	cmp	r2, r1
 80006a4:	d004      	beq.n	80006b0 <HAL_ADC_Start+0xcc>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80006a6:	6891      	ldr	r1, [r2, #8]
 80006a8:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 80006ac:	6091      	str	r1, [r2, #8]
 80006ae:	e009      	b.n	80006c4 <HAL_ADC_Start+0xe0>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80006b0:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 80006b4:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80006b6:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 80006ba:	d1d3      	bne.n	8000664 <HAL_ADC_Start+0x80>
 80006bc:	e7f3      	b.n	80006a6 <HAL_ADC_Start+0xc2>
    __HAL_UNLOCK(hadc);
 80006be:	2200      	movs	r2, #0
 80006c0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	bd10      	pop	{r4, pc}
 80006c8:	40012800 	.word	0x40012800
 80006cc:	40012400 	.word	0x40012400

080006d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80006d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006d2:	6803      	ldr	r3, [r0, #0]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	f012 0f01 	tst.w	r2, #1
 80006da:	d101      	bne.n	80006e0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80006dc:	2000      	movs	r0, #0
}
 80006de:	bd38      	pop	{r3, r4, r5, pc}
 80006e0:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	f022 0201 	bic.w	r2, r2, #1
 80006e8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80006ea:	f7ff fddd 	bl	80002a8 <HAL_GetTick>
 80006ee:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	f013 0f01 	tst.w	r3, #1
 80006f8:	d00e      	beq.n	8000718 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80006fa:	f7ff fdd5 	bl	80002a8 <HAL_GetTick>
 80006fe:	1b40      	subs	r0, r0, r5
 8000700:	2802      	cmp	r0, #2
 8000702:	d9f5      	bls.n	80006f0 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000704:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800070c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8000714:	2001      	movs	r0, #1
 8000716:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000718:	2000      	movs	r0, #0
 800071a:	bd38      	pop	{r3, r4, r5, pc}

0800071c <HAL_ADC_Init>:
  if(hadc == NULL)
 800071c:	2800      	cmp	r0, #0
 800071e:	f000 808a 	beq.w	8000836 <HAL_ADC_Init+0x11a>
{
 8000722:	b570      	push	{r4, r5, r6, lr}
 8000724:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000726:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000728:	2b00      	cmp	r3, #0
 800072a:	d04d      	beq.n	80007c8 <HAL_ADC_Init+0xac>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800072c:	4620      	mov	r0, r4
 800072e:	f7ff ffcf 	bl	80006d0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000732:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000734:	f013 0310 	ands.w	r3, r3, #16
 8000738:	d177      	bne.n	800082a <HAL_ADC_Init+0x10e>
 800073a:	2800      	cmp	r0, #0
 800073c:	d175      	bne.n	800082a <HAL_ADC_Init+0x10e>
    ADC_STATE_CLR_SET(hadc->State,
 800073e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000740:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000744:	f022 0202 	bic.w	r2, r2, #2
 8000748:	f042 0202 	orr.w	r2, r2, #2
 800074c:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800074e:	6865      	ldr	r5, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000750:	6821      	ldr	r1, [r4, #0]
 8000752:	4a3a      	ldr	r2, [pc, #232]	; (800083c <HAL_ADC_Init+0x120>)
 8000754:	4291      	cmp	r1, r2
 8000756:	d03d      	beq.n	80007d4 <HAL_ADC_Init+0xb8>
 8000758:	69e2      	ldr	r2, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800075a:	432a      	orrs	r2, r5
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800075c:	68e6      	ldr	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800075e:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000762:	68a5      	ldr	r5, [r4, #8]
 8000764:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000768:	d03e      	beq.n	80007e8 <HAL_ADC_Init+0xcc>
 800076a:	2d01      	cmp	r5, #1
 800076c:	d039      	beq.n	80007e2 <HAL_ADC_Init+0xc6>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800076e:	6965      	ldr	r5, [r4, #20]
 8000770:	2d01      	cmp	r5, #1
 8000772:	d03c      	beq.n	80007ee <HAL_ADC_Init+0xd2>
      MODIFY_REG(hadc->Instance->CR1,
 8000774:	684d      	ldr	r5, [r1, #4]
 8000776:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800077a:	432b      	orrs	r3, r5
 800077c:	604b      	str	r3, [r1, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800077e:	6821      	ldr	r1, [r4, #0]
 8000780:	688d      	ldr	r5, [r1, #8]
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <HAL_ADC_Init+0x124>)
 8000784:	402b      	ands	r3, r5
 8000786:	4313      	orrs	r3, r2
 8000788:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800078a:	68a3      	ldr	r3, [r4, #8]
 800078c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000790:	d03e      	beq.n	8000810 <HAL_ADC_Init+0xf4>
 8000792:	2b01      	cmp	r3, #1
 8000794:	d03c      	beq.n	8000810 <HAL_ADC_Init+0xf4>
  uint32_t tmp_sqr1 = 0U;
 8000796:	2300      	movs	r3, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8000798:	6825      	ldr	r5, [r4, #0]
 800079a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800079c:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80007a0:	430b      	orrs	r3, r1
 80007a2:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007a4:	6823      	ldr	r3, [r4, #0]
 80007a6:	6899      	ldr	r1, [r3, #8]
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <HAL_ADC_Init+0x128>)
 80007aa:	400b      	ands	r3, r1
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d033      	beq.n	8000818 <HAL_ADC_Init+0xfc>
      ADC_STATE_CLR_SET(hadc->State,
 80007b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007b2:	f023 0312 	bic.w	r3, r3, #18
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80007c4:	2001      	movs	r0, #1
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80007c8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80007ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80007ce:	f001 f8d5 	bl	800197c <HAL_ADC_MspInit>
 80007d2:	e7ab      	b.n	800072c <HAL_ADC_Init+0x10>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80007d4:	69e2      	ldr	r2, [r4, #28]
 80007d6:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80007da:	d1be      	bne.n	800075a <HAL_ADC_Init+0x3e>
 80007dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007e0:	e7bb      	b.n	800075a <HAL_ADC_Init+0x3e>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e6:	e7c2      	b.n	800076e <HAL_ADC_Init+0x52>
 80007e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ec:	e7bf      	b.n	800076e <HAL_ADC_Init+0x52>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007ee:	b936      	cbnz	r6, 80007fe <HAL_ADC_Init+0xe2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007f0:	69a5      	ldr	r5, [r4, #24]
 80007f2:	3d01      	subs	r5, #1
 80007f4:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
 80007f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007fc:	e7ba      	b.n	8000774 <HAL_ADC_Init+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007fe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000800:	f045 0520 	orr.w	r5, r5, #32
 8000804:	62a5      	str	r5, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000806:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000808:	f045 0501 	orr.w	r5, r5, #1
 800080c:	62e5      	str	r5, [r4, #44]	; 0x2c
 800080e:	e7b1      	b.n	8000774 <HAL_ADC_Init+0x58>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000810:	6923      	ldr	r3, [r4, #16]
 8000812:	3b01      	subs	r3, #1
 8000814:	051b      	lsls	r3, r3, #20
 8000816:	e7bf      	b.n	8000798 <HAL_ADC_Init+0x7c>
      ADC_CLEAR_ERRORCODE(hadc);
 8000818:	2300      	movs	r3, #0
 800081a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800081c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800081e:	f023 0303 	bic.w	r3, r3, #3
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	62a3      	str	r3, [r4, #40]	; 0x28
 8000828:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800082a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800082c:	f043 0310 	orr.w	r3, r3, #16
 8000830:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8000832:	2001      	movs	r0, #1
 8000834:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000836:	2001      	movs	r0, #1
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40013c00 	.word	0x40013c00
 8000840:	ffe1f7fd 	.word	0xffe1f7fd
 8000844:	ff1f0efe 	.word	0xff1f0efe

08000848 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800084a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000850:	041b      	lsls	r3, r3, #16
 8000852:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000854:	0200      	lsls	r0, r0, #8
 8000856:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800085c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000860:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000864:	60d0      	str	r0, [r2, #12]
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <HAL_NVIC_SetPriority+0x5c>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000876:	f1c3 0407 	rsb	r4, r3, #7
 800087a:	2c04      	cmp	r4, #4
 800087c:	bf28      	it	cs
 800087e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000880:	1d1d      	adds	r5, r3, #4
 8000882:	2d06      	cmp	r5, #6
 8000884:	d917      	bls.n	80008b6 <HAL_NVIC_SetPriority+0x4a>
 8000886:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	2501      	movs	r5, #1
 800088a:	fa05 f404 	lsl.w	r4, r5, r4
 800088e:	3c01      	subs	r4, #1
 8000890:	4021      	ands	r1, r4
 8000892:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	fa05 f303 	lsl.w	r3, r5, r3
 8000898:	3b01      	subs	r3, #1
 800089a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800089e:	2800      	cmp	r0, #0
 80008a0:	db0b      	blt.n	80008ba <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	0109      	lsls	r1, r1, #4
 80008a4:	b2c9      	uxtb	r1, r1
 80008a6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80008aa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80008ae:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80008b2:	bc30      	pop	{r4, r5}
 80008b4:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	2300      	movs	r3, #0
 80008b8:	e7e6      	b.n	8000888 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	f000 000f 	and.w	r0, r0, #15
 80008be:	0109      	lsls	r1, r1, #4
 80008c0:	b2c9      	uxtb	r1, r1
 80008c2:	4b02      	ldr	r3, [pc, #8]	; (80008cc <HAL_NVIC_SetPriority+0x60>)
 80008c4:	5419      	strb	r1, [r3, r0]
 80008c6:	e7f4      	b.n	80008b2 <HAL_NVIC_SetPriority+0x46>
 80008c8:	e000ed00 	.word	0xe000ed00
 80008cc:	e000ed14 	.word	0xe000ed14

080008d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	3801      	subs	r0, #1
 80008d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008d6:	d20a      	bcs.n	80008ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_SYSTICK_Config+0x24>)
 80008da:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	21f0      	movs	r1, #240	; 0xf0
 80008de:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <HAL_SYSTICK_Config+0x28>)
 80008e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	2000      	movs	r0, #0
 80008e6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008fc:	2804      	cmp	r0, #4
 80008fe:	d005      	beq.n	800090c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000900:	4a05      	ldr	r2, [pc, #20]	; (8000918 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000902:	6813      	ldr	r3, [r2, #0]
 8000904:	f023 0304 	bic.w	r3, r3, #4
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800090c:	4a02      	ldr	r2, [pc, #8]	; (8000918 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800090e:	6813      	ldr	r3, [r2, #0]
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	4770      	bx	lr
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800091c:	4770      	bx	lr

0800091e <HAL_SYSTICK_IRQHandler>:
{
 800091e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000920:	f7ff fffc 	bl	800091c <HAL_SYSTICK_Callback>
 8000924:	bd08      	pop	{r3, pc}
	...

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092a:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800092c:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800092e:	4634      	mov	r4, r6
 8000930:	e079      	b.n	8000a26 <HAL_GPIO_Init+0xfe>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80a9 	beq.w	8000a8a <HAL_GPIO_Init+0x162>
 8000938:	2d01      	cmp	r5, #1
 800093a:	d100      	bne.n	800093e <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800093c:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800093e:	2bff      	cmp	r3, #255	; 0xff
 8000940:	f200 80b7 	bhi.w	8000ab2 <HAL_GPIO_Init+0x18a>
 8000944:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000946:	2bff      	cmp	r3, #255	; 0xff
 8000948:	f200 80b6 	bhi.w	8000ab8 <HAL_GPIO_Init+0x190>
 800094c:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800094e:	f8de 2000 	ldr.w	r2, [lr]
 8000952:	270f      	movs	r7, #15
 8000954:	40af      	lsls	r7, r5
 8000956:	ea22 0207 	bic.w	r2, r2, r7
 800095a:	fa06 f505 	lsl.w	r5, r6, r5
 800095e:	432a      	orrs	r2, r5
 8000960:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000964:	684a      	ldr	r2, [r1, #4]
 8000966:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800096a:	d05b      	beq.n	8000a24 <HAL_GPIO_Init+0xfc>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800096c:	4a67      	ldr	r2, [pc, #412]	; (8000b0c <HAL_GPIO_Init+0x1e4>)
 800096e:	6995      	ldr	r5, [r2, #24]
 8000970:	f045 0501 	orr.w	r5, r5, #1
 8000974:	6195      	str	r5, [r2, #24]
 8000976:	6992      	ldr	r2, [r2, #24]
 8000978:	f002 0201 	and.w	r2, r2, #1
 800097c:	9201      	str	r2, [sp, #4]
 800097e:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000980:	08a2      	lsrs	r2, r4, #2
 8000982:	1c97      	adds	r7, r2, #2
 8000984:	4d62      	ldr	r5, [pc, #392]	; (8000b10 <HAL_GPIO_Init+0x1e8>)
 8000986:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800098a:	f004 0703 	and.w	r7, r4, #3
 800098e:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 8000992:	270f      	movs	r7, #15
 8000994:	fa07 f70e 	lsl.w	r7, r7, lr
 8000998:	ea25 0507 	bic.w	r5, r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800099c:	4f5d      	ldr	r7, [pc, #372]	; (8000b14 <HAL_GPIO_Init+0x1ec>)
 800099e:	42b8      	cmp	r0, r7
 80009a0:	f000 8090 	beq.w	8000ac4 <HAL_GPIO_Init+0x19c>
 80009a4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009a8:	42b8      	cmp	r0, r7
 80009aa:	f000 808d 	beq.w	8000ac8 <HAL_GPIO_Init+0x1a0>
 80009ae:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009b2:	42b8      	cmp	r0, r7
 80009b4:	f000 808a 	beq.w	8000acc <HAL_GPIO_Init+0x1a4>
 80009b8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009bc:	42b8      	cmp	r0, r7
 80009be:	f000 8087 	beq.w	8000ad0 <HAL_GPIO_Init+0x1a8>
 80009c2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009c6:	42b8      	cmp	r0, r7
 80009c8:	f000 8084 	beq.w	8000ad4 <HAL_GPIO_Init+0x1ac>
 80009cc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009d0:	42b8      	cmp	r0, r7
 80009d2:	d075      	beq.n	8000ac0 <HAL_GPIO_Init+0x198>
 80009d4:	2706      	movs	r7, #6
 80009d6:	fa07 f70e 	lsl.w	r7, r7, lr
 80009da:	433d      	orrs	r5, r7
        AFIO->EXTICR[position >> 2U] = temp;
 80009dc:	3202      	adds	r2, #2
 80009de:	4f4c      	ldr	r7, [pc, #304]	; (8000b10 <HAL_GPIO_Init+0x1e8>)
 80009e0:	f847 5022 	str.w	r5, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009e4:	684a      	ldr	r2, [r1, #4]
 80009e6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80009ea:	d075      	beq.n	8000ad8 <HAL_GPIO_Init+0x1b0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009ec:	4d4a      	ldr	r5, [pc, #296]	; (8000b18 <HAL_GPIO_Init+0x1f0>)
 80009ee:	682a      	ldr	r2, [r5, #0]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f4:	684a      	ldr	r2, [r1, #4]
 80009f6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80009fa:	d073      	beq.n	8000ae4 <HAL_GPIO_Init+0x1bc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009fc:	4d46      	ldr	r5, [pc, #280]	; (8000b18 <HAL_GPIO_Init+0x1f0>)
 80009fe:	686a      	ldr	r2, [r5, #4]
 8000a00:	431a      	orrs	r2, r3
 8000a02:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a04:	684a      	ldr	r2, [r1, #4]
 8000a06:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8000a0a:	d071      	beq.n	8000af0 <HAL_GPIO_Init+0x1c8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a0c:	4d42      	ldr	r5, [pc, #264]	; (8000b18 <HAL_GPIO_Init+0x1f0>)
 8000a0e:	68aa      	ldr	r2, [r5, #8]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a14:	684a      	ldr	r2, [r1, #4]
 8000a16:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000a1a:	d06f      	beq.n	8000afc <HAL_GPIO_Init+0x1d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a1c:	4d3e      	ldr	r5, [pc, #248]	; (8000b18 <HAL_GPIO_Init+0x1f0>)
 8000a1e:	68ea      	ldr	r2, [r5, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000a24:	3401      	adds	r4, #1
 8000a26:	2c0f      	cmp	r4, #15
 8000a28:	d86e      	bhi.n	8000b08 <HAL_GPIO_Init+0x1e0>
    ioposition = (0x01U << position);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2e:	680b      	ldr	r3, [r1, #0]
 8000a30:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d1f6      	bne.n	8000a24 <HAL_GPIO_Init+0xfc>
      switch (GPIO_Init->Mode)
 8000a36:	684d      	ldr	r5, [r1, #4]
 8000a38:	2d12      	cmp	r5, #18
 8000a3a:	d030      	beq.n	8000a9e <HAL_GPIO_Init+0x176>
 8000a3c:	d80b      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 8000a3e:	2d02      	cmp	r5, #2
 8000a40:	d02a      	beq.n	8000a98 <HAL_GPIO_Init+0x170>
 8000a42:	f67f af76 	bls.w	8000932 <HAL_GPIO_Init+0xa>
 8000a46:	2d03      	cmp	r5, #3
 8000a48:	d02f      	beq.n	8000aaa <HAL_GPIO_Init+0x182>
 8000a4a:	2d11      	cmp	r5, #17
 8000a4c:	f47f af77 	bne.w	800093e <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a50:	68ce      	ldr	r6, [r1, #12]
 8000a52:	3604      	adds	r6, #4
          break;
 8000a54:	e773      	b.n	800093e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000a56:	4f31      	ldr	r7, [pc, #196]	; (8000b1c <HAL_GPIO_Init+0x1f4>)
 8000a58:	42bd      	cmp	r5, r7
 8000a5a:	d016      	beq.n	8000a8a <HAL_GPIO_Init+0x162>
 8000a5c:	d90c      	bls.n	8000a78 <HAL_GPIO_Init+0x150>
 8000a5e:	4f30      	ldr	r7, [pc, #192]	; (8000b20 <HAL_GPIO_Init+0x1f8>)
 8000a60:	42bd      	cmp	r5, r7
 8000a62:	d012      	beq.n	8000a8a <HAL_GPIO_Init+0x162>
 8000a64:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000a68:	42bd      	cmp	r5, r7
 8000a6a:	d00e      	beq.n	8000a8a <HAL_GPIO_Init+0x162>
 8000a6c:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000a70:	42bd      	cmp	r5, r7
 8000a72:	f47f af64 	bne.w	800093e <HAL_GPIO_Init+0x16>
 8000a76:	e008      	b.n	8000a8a <HAL_GPIO_Init+0x162>
 8000a78:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000a7c:	42bd      	cmp	r5, r7
 8000a7e:	d004      	beq.n	8000a8a <HAL_GPIO_Init+0x162>
 8000a80:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000a84:	42bd      	cmp	r5, r7
 8000a86:	f47f af5a 	bne.w	800093e <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a8a:	688d      	ldr	r5, [r1, #8]
 8000a8c:	b17d      	cbz	r5, 8000aae <HAL_GPIO_Init+0x186>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a8e:	2d01      	cmp	r5, #1
 8000a90:	d008      	beq.n	8000aa4 <HAL_GPIO_Init+0x17c>
            GPIOx->BRR = ioposition;
 8000a92:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a94:	2608      	movs	r6, #8
 8000a96:	e752      	b.n	800093e <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a98:	68ce      	ldr	r6, [r1, #12]
 8000a9a:	3608      	adds	r6, #8
          break;
 8000a9c:	e74f      	b.n	800093e <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a9e:	68ce      	ldr	r6, [r1, #12]
 8000aa0:	360c      	adds	r6, #12
          break;
 8000aa2:	e74c      	b.n	800093e <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8000aa4:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa6:	2608      	movs	r6, #8
 8000aa8:	e749      	b.n	800093e <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aaa:	2600      	movs	r6, #0
 8000aac:	e747      	b.n	800093e <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aae:	2604      	movs	r6, #4
 8000ab0:	e745      	b.n	800093e <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab2:	f100 0e04 	add.w	lr, r0, #4
 8000ab6:	e746      	b.n	8000946 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000ab8:	f1a4 0508 	sub.w	r5, r4, #8
 8000abc:	00ad      	lsls	r5, r5, #2
 8000abe:	e746      	b.n	800094e <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac0:	2705      	movs	r7, #5
 8000ac2:	e788      	b.n	80009d6 <HAL_GPIO_Init+0xae>
 8000ac4:	2700      	movs	r7, #0
 8000ac6:	e786      	b.n	80009d6 <HAL_GPIO_Init+0xae>
 8000ac8:	2701      	movs	r7, #1
 8000aca:	e784      	b.n	80009d6 <HAL_GPIO_Init+0xae>
 8000acc:	2702      	movs	r7, #2
 8000ace:	e782      	b.n	80009d6 <HAL_GPIO_Init+0xae>
 8000ad0:	2703      	movs	r7, #3
 8000ad2:	e780      	b.n	80009d6 <HAL_GPIO_Init+0xae>
 8000ad4:	2704      	movs	r7, #4
 8000ad6:	e77e      	b.n	80009d6 <HAL_GPIO_Init+0xae>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad8:	4d0f      	ldr	r5, [pc, #60]	; (8000b18 <HAL_GPIO_Init+0x1f0>)
 8000ada:	682a      	ldr	r2, [r5, #0]
 8000adc:	ea22 0203 	bic.w	r2, r2, r3
 8000ae0:	602a      	str	r2, [r5, #0]
 8000ae2:	e787      	b.n	80009f4 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ae4:	4d0c      	ldr	r5, [pc, #48]	; (8000b18 <HAL_GPIO_Init+0x1f0>)
 8000ae6:	686a      	ldr	r2, [r5, #4]
 8000ae8:	ea22 0203 	bic.w	r2, r2, r3
 8000aec:	606a      	str	r2, [r5, #4]
 8000aee:	e789      	b.n	8000a04 <HAL_GPIO_Init+0xdc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000af0:	4d09      	ldr	r5, [pc, #36]	; (8000b18 <HAL_GPIO_Init+0x1f0>)
 8000af2:	68aa      	ldr	r2, [r5, #8]
 8000af4:	ea22 0203 	bic.w	r2, r2, r3
 8000af8:	60aa      	str	r2, [r5, #8]
 8000afa:	e78b      	b.n	8000a14 <HAL_GPIO_Init+0xec>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000afc:	4d06      	ldr	r5, [pc, #24]	; (8000b18 <HAL_GPIO_Init+0x1f0>)
 8000afe:	68ea      	ldr	r2, [r5, #12]
 8000b00:	ea22 0303 	bic.w	r3, r2, r3
 8000b04:	60eb      	str	r3, [r5, #12]
 8000b06:	e78d      	b.n	8000a24 <HAL_GPIO_Init+0xfc>
        }
      }
    }
  }
}
 8000b08:	b003      	add	sp, #12
 8000b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010400 	.word	0x40010400
 8000b1c:	10210000 	.word	0x10210000
 8000b20:	10310000 	.word	0x10310000

08000b24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b24:	b912      	cbnz	r2, 8000b2c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b26:	0409      	lsls	r1, r1, #16
 8000b28:	6101      	str	r1, [r0, #16]
 8000b2a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000b2c:	6101      	str	r1, [r0, #16]
 8000b2e:	4770      	bx	lr

08000b30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000b30:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <RCC_Delay+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <RCC_Delay+0x28>)
 8000b38:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3c:	0a5b      	lsrs	r3, r3, #9
 8000b3e:	fb00 f003 	mul.w	r0, r0, r3
 8000b42:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000b44:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000b46:	9b01      	ldr	r3, [sp, #4]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	9201      	str	r2, [sp, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1f9      	bne.n	8000b44 <RCC_Delay+0x14>
}
 8000b50:	b002      	add	sp, #8
 8000b52:	4770      	bx	lr
 8000b54:	2000000c 	.word	0x2000000c
 8000b58:	10624dd3 	.word	0x10624dd3

08000b5c <HAL_RCC_OscConfig>:
{
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b62:	6803      	ldr	r3, [r0, #0]
 8000b64:	f013 0f01 	tst.w	r3, #1
 8000b68:	d03d      	beq.n	8000be6 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b6a:	4bac      	ldr	r3, [pc, #688]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d02e      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b76:	4ba9      	ldr	r3, [pc, #676]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d023      	beq.n	8000bca <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b82:	6863      	ldr	r3, [r4, #4]
 8000b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b88:	d051      	beq.n	8000c2e <HAL_RCC_OscConfig+0xd2>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d155      	bne.n	8000c3a <HAL_RCC_OscConfig+0xde>
 8000b8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b92:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ba4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ba6:	6863      	ldr	r3, [r4, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d060      	beq.n	8000c6e <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000bac:	f7ff fb7c 	bl	80002a8 <HAL_GetTick>
 8000bb0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	4b9a      	ldr	r3, [pc, #616]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000bba:	d114      	bne.n	8000be6 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bbc:	f7ff fb74 	bl	80002a8 <HAL_GetTick>
 8000bc0:	1b40      	subs	r0, r0, r5
 8000bc2:	2864      	cmp	r0, #100	; 0x64
 8000bc4:	d9f5      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	e1af      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bca:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000bd2:	d0d6      	beq.n	8000b82 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd4:	4b91      	ldr	r3, [pc, #580]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000bdc:	d003      	beq.n	8000be6 <HAL_RCC_OscConfig+0x8a>
 8000bde:	6863      	ldr	r3, [r4, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f000 819f 	beq.w	8000f24 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	f013 0f02 	tst.w	r3, #2
 8000bec:	d065      	beq.n	8000cba <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bee:	4b8b      	ldr	r3, [pc, #556]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f013 0f0c 	tst.w	r3, #12
 8000bf6:	d04e      	beq.n	8000c96 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bf8:	4b88      	ldr	r3, [pc, #544]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 030c 	and.w	r3, r3, #12
 8000c00:	2b08      	cmp	r3, #8
 8000c02:	d043      	beq.n	8000c8c <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c04:	6923      	ldr	r3, [r4, #16]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d079      	beq.n	8000cfe <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4b84      	ldr	r3, [pc, #528]	; (8000e20 <HAL_RCC_OscConfig+0x2c4>)
 8000c0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c10:	f7ff fb4a 	bl	80002a8 <HAL_GetTick>
 8000c14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c16:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f013 0f02 	tst.w	r3, #2
 8000c1e:	d165      	bne.n	8000cec <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c20:	f7ff fb42 	bl	80002a8 <HAL_GetTick>
 8000c24:	1b40      	subs	r0, r0, r5
 8000c26:	2802      	cmp	r0, #2
 8000c28:	d9f5      	bls.n	8000c16 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	e17d      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2e:	4a7b      	ldr	r2, [pc, #492]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e7b5      	b.n	8000ba6 <HAL_RCC_OscConfig+0x4a>
 8000c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c3e:	d009      	beq.n	8000c54 <HAL_RCC_OscConfig+0xf8>
 8000c40:	4b76      	ldr	r3, [pc, #472]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	e7a8      	b.n	8000ba6 <HAL_RCC_OscConfig+0x4a>
 8000c54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c58:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	e79b      	b.n	8000ba6 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8000c6e:	f7ff fb1b 	bl	80002a8 <HAL_GetTick>
 8000c72:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c74:	4b69      	ldr	r3, [pc, #420]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c7c:	d0b3      	beq.n	8000be6 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c7e:	f7ff fb13 	bl	80002a8 <HAL_GetTick>
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	2864      	cmp	r0, #100	; 0x64
 8000c86:	d9f5      	bls.n	8000c74 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000c88:	2003      	movs	r0, #3
 8000c8a:	e14e      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c8c:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c94:	d1b6      	bne.n	8000c04 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c96:	4b61      	ldr	r3, [pc, #388]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f013 0f02 	tst.w	r3, #2
 8000c9e:	d004      	beq.n	8000caa <HAL_RCC_OscConfig+0x14e>
 8000ca0:	6923      	ldr	r3, [r4, #16]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d001      	beq.n	8000caa <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	e13f      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000caa:	4a5c      	ldr	r2, [pc, #368]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000cac:	6813      	ldr	r3, [r2, #0]
 8000cae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cb2:	6961      	ldr	r1, [r4, #20]
 8000cb4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cb8:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	f013 0f08 	tst.w	r3, #8
 8000cc0:	d032      	beq.n	8000d28 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cc2:	69a3      	ldr	r3, [r4, #24]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d06e      	beq.n	8000da6 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4b56      	ldr	r3, [pc, #344]	; (8000e24 <HAL_RCC_OscConfig+0x2c8>)
 8000ccc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cce:	f7ff faeb 	bl	80002a8 <HAL_GetTick>
 8000cd2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd4:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	f013 0f02 	tst.w	r3, #2
 8000cdc:	d121      	bne.n	8000d22 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cde:	f7ff fae3 	bl	80002a8 <HAL_GetTick>
 8000ce2:	1b40      	subs	r0, r0, r5
 8000ce4:	2802      	cmp	r0, #2
 8000ce6:	d9f5      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000ce8:	2003      	movs	r0, #3
 8000cea:	e11e      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cec:	4a4b      	ldr	r2, [pc, #300]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000cee:	6813      	ldr	r3, [r2, #0]
 8000cf0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cf4:	6961      	ldr	r1, [r4, #20]
 8000cf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	e7dd      	b.n	8000cba <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <HAL_RCC_OscConfig+0x2c4>)
 8000d02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d04:	f7ff fad0 	bl	80002a8 <HAL_GetTick>
 8000d08:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f013 0f02 	tst.w	r3, #2
 8000d12:	d0d2      	beq.n	8000cba <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d14:	f7ff fac8 	bl	80002a8 <HAL_GetTick>
 8000d18:	1b40      	subs	r0, r0, r5
 8000d1a:	2802      	cmp	r0, #2
 8000d1c:	d9f5      	bls.n	8000d0a <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000d1e:	2003      	movs	r0, #3
 8000d20:	e103      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff ff04 	bl	8000b30 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	f013 0f04 	tst.w	r3, #4
 8000d2e:	f000 8099 	beq.w	8000e64 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d32:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d3a:	d146      	bne.n	8000dca <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d3c:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000d3e:	69da      	ldr	r2, [r3, #28]
 8000d40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d44:	61da      	str	r2, [r3, #28]
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d50:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d52:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <HAL_RCC_OscConfig+0x2cc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d5a:	d038      	beq.n	8000dce <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d5c:	68e3      	ldr	r3, [r4, #12]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d049      	beq.n	8000df6 <HAL_RCC_OscConfig+0x29a>
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14d      	bne.n	8000e02 <HAL_RCC_OscConfig+0x2a6>
 8000d66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d6a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d6e:	6a1a      	ldr	r2, [r3, #32]
 8000d70:	f022 0201 	bic.w	r2, r2, #1
 8000d74:	621a      	str	r2, [r3, #32]
 8000d76:	6a1a      	ldr	r2, [r3, #32]
 8000d78:	f022 0204 	bic.w	r2, r2, #4
 8000d7c:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d7e:	68e3      	ldr	r3, [r4, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d05d      	beq.n	8000e40 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000d84:	f7ff fa90 	bl	80002a8 <HAL_GetTick>
 8000d88:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	f013 0f02 	tst.w	r3, #2
 8000d92:	d166      	bne.n	8000e62 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d94:	f7ff fa88 	bl	80002a8 <HAL_GetTick>
 8000d98:	1b80      	subs	r0, r0, r6
 8000d9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d9f3      	bls.n	8000d8a <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 8000da2:	2003      	movs	r0, #3
 8000da4:	e0c1      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8000da6:	2200      	movs	r2, #0
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <HAL_RCC_OscConfig+0x2c8>)
 8000daa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dac:	f7ff fa7c 	bl	80002a8 <HAL_GetTick>
 8000db0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	f013 0f02 	tst.w	r3, #2
 8000dba:	d0b5      	beq.n	8000d28 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fa74 	bl	80002a8 <HAL_GetTick>
 8000dc0:	1b40      	subs	r0, r0, r5
 8000dc2:	2802      	cmp	r0, #2
 8000dc4:	d9f5      	bls.n	8000db2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	e0af      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8000dca:	2500      	movs	r5, #0
 8000dcc:	e7c1      	b.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dce:	4a16      	ldr	r2, [pc, #88]	; (8000e28 <HAL_RCC_OscConfig+0x2cc>)
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fa66 	bl	80002a8 <HAL_GetTick>
 8000ddc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_RCC_OscConfig+0x2cc>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000de6:	d1b9      	bne.n	8000d5c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de8:	f7ff fa5e 	bl	80002a8 <HAL_GetTick>
 8000dec:	1b80      	subs	r0, r0, r6
 8000dee:	2864      	cmp	r0, #100	; 0x64
 8000df0:	d9f5      	bls.n	8000dde <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8000df2:	2003      	movs	r0, #3
 8000df4:	e099      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000df8:	6a13      	ldr	r3, [r2, #32]
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6213      	str	r3, [r2, #32]
 8000e00:	e7bd      	b.n	8000d7e <HAL_RCC_OscConfig+0x222>
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d012      	beq.n	8000e2c <HAL_RCC_OscConfig+0x2d0>
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000e08:	6a1a      	ldr	r2, [r3, #32]
 8000e0a:	f022 0201 	bic.w	r2, r2, #1
 8000e0e:	621a      	str	r2, [r3, #32]
 8000e10:	6a1a      	ldr	r2, [r3, #32]
 8000e12:	f022 0204 	bic.w	r2, r2, #4
 8000e16:	621a      	str	r2, [r3, #32]
 8000e18:	e7b1      	b.n	8000d7e <HAL_RCC_OscConfig+0x222>
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	42420000 	.word	0x42420000
 8000e24:	42420480 	.word	0x42420480
 8000e28:	40007000 	.word	0x40007000
 8000e2c:	4b41      	ldr	r3, [pc, #260]	; (8000f34 <HAL_RCC_OscConfig+0x3d8>)
 8000e2e:	6a1a      	ldr	r2, [r3, #32]
 8000e30:	f042 0204 	orr.w	r2, r2, #4
 8000e34:	621a      	str	r2, [r3, #32]
 8000e36:	6a1a      	ldr	r2, [r3, #32]
 8000e38:	f042 0201 	orr.w	r2, r2, #1
 8000e3c:	621a      	str	r2, [r3, #32]
 8000e3e:	e79e      	b.n	8000d7e <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8000e40:	f7ff fa32 	bl	80002a8 <HAL_GetTick>
 8000e44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e46:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <HAL_RCC_OscConfig+0x3d8>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	f013 0f02 	tst.w	r3, #2
 8000e4e:	d008      	beq.n	8000e62 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e50:	f7ff fa2a 	bl	80002a8 <HAL_GetTick>
 8000e54:	1b80      	subs	r0, r0, r6
 8000e56:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d9f3      	bls.n	8000e46 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000e5e:	2003      	movs	r0, #3
 8000e60:	e063      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8000e62:	b9e5      	cbnz	r5, 8000e9e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e64:	69e3      	ldr	r3, [r4, #28]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d05e      	beq.n	8000f28 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e6a:	4a32      	ldr	r2, [pc, #200]	; (8000f34 <HAL_RCC_OscConfig+0x3d8>)
 8000e6c:	6852      	ldr	r2, [r2, #4]
 8000e6e:	f002 020c 	and.w	r2, r2, #12
 8000e72:	2a08      	cmp	r2, #8
 8000e74:	d05b      	beq.n	8000f2e <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d017      	beq.n	8000eaa <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <HAL_RCC_OscConfig+0x3dc>)
 8000e7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e80:	f7ff fa12 	bl	80002a8 <HAL_GetTick>
 8000e84:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <HAL_RCC_OscConfig+0x3d8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e8e:	d047      	beq.n	8000f20 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e90:	f7ff fa0a 	bl	80002a8 <HAL_GetTick>
 8000e94:	1b00      	subs	r0, r0, r4
 8000e96:	2802      	cmp	r0, #2
 8000e98:	d9f5      	bls.n	8000e86 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	e045      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9e:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <HAL_RCC_OscConfig+0x3d8>)
 8000ea0:	69d3      	ldr	r3, [r2, #28]
 8000ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	61d3      	str	r3, [r2, #28]
 8000ea8:	e7dc      	b.n	8000e64 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <HAL_RCC_OscConfig+0x3dc>)
 8000eae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eb0:	f7ff f9fa 	bl	80002a8 <HAL_GetTick>
 8000eb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <HAL_RCC_OscConfig+0x3d8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ebe:	d006      	beq.n	8000ece <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec0:	f7ff f9f2 	bl	80002a8 <HAL_GetTick>
 8000ec4:	1b40      	subs	r0, r0, r5
 8000ec6:	2802      	cmp	r0, #2
 8000ec8:	d9f5      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000eca:	2003      	movs	r0, #3
 8000ecc:	e02d      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ece:	6a23      	ldr	r3, [r4, #32]
 8000ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed4:	d01a      	beq.n	8000f0c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ed6:	4917      	ldr	r1, [pc, #92]	; (8000f34 <HAL_RCC_OscConfig+0x3d8>)
 8000ed8:	684b      	ldr	r3, [r1, #4]
 8000eda:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000ede:	6a22      	ldr	r2, [r4, #32]
 8000ee0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000ee2:	4302      	orrs	r2, r0
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_RCC_OscConfig+0x3dc>)
 8000eec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eee:	f7ff f9db 	bl	80002a8 <HAL_GetTick>
 8000ef2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_RCC_OscConfig+0x3d8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000efc:	d10e      	bne.n	8000f1c <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000efe:	f7ff f9d3 	bl	80002a8 <HAL_GetTick>
 8000f02:	1b00      	subs	r0, r0, r4
 8000f04:	2802      	cmp	r0, #2
 8000f06:	d9f5      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8000f08:	2003      	movs	r0, #3
 8000f0a:	e00e      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <HAL_RCC_OscConfig+0x3d8>)
 8000f0e:	6853      	ldr	r3, [r2, #4]
 8000f10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f14:	68a1      	ldr	r1, [r4, #8]
 8000f16:	430b      	orrs	r3, r1
 8000f18:	6053      	str	r3, [r2, #4]
 8000f1a:	e7dc      	b.n	8000ed6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e004      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
 8000f20:	2000      	movs	r0, #0
 8000f22:	e002      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8000f24:	2001      	movs	r0, #1
 8000f26:	e000      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8000f28:	2000      	movs	r0, #0
}
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000f2e:	2001      	movs	r0, #1
 8000f30:	e7fb      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ce>
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	42420060 	.word	0x42420060

08000f3c <HAL_RCC_GetSysClockFreq>:
{
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f40:	4c15      	ldr	r4, [pc, #84]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000f42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f46:	f10d 0e18 	add.w	lr, sp, #24
 8000f4a:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f4e:	8a23      	ldrh	r3, [r4, #16]
 8000f50:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x60>)
 8000f56:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f58:	f003 020c 	and.w	r2, r3, #12
 8000f5c:	2a08      	cmp	r2, #8
 8000f5e:	d118      	bne.n	8000f92 <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f60:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000f64:	4472      	add	r2, lr
 8000f66:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f6a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f6e:	d103      	bne.n	8000f78 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x64>)
 8000f72:	fb00 f002 	mul.w	r0, r0, r2
 8000f76:	e00d      	b.n	8000f94 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x60>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000f80:	4473      	add	r3, lr
 8000f82:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000f88:	fb00 f002 	mul.w	r0, r0, r2
 8000f8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f90:	e000      	b.n	8000f94 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000f94:	b006      	add	sp, #24
 8000f96:	bd10      	pop	{r4, pc}
 8000f98:	08002f88 	.word	0x08002f88
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	003d0900 	.word	0x003d0900
 8000fa4:	007a1200 	.word	0x007a1200

08000fa8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fa8:	4b59      	ldr	r3, [pc, #356]	; (8001110 <HAL_RCC_ClockConfig+0x168>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	d20c      	bcs.n	8000fce <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb4:	4a56      	ldr	r2, [pc, #344]	; (8001110 <HAL_RCC_ClockConfig+0x168>)
 8000fb6:	6813      	ldr	r3, [r2, #0]
 8000fb8:	f023 0307 	bic.w	r3, r3, #7
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	d001      	beq.n	8000fce <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000fca:	2001      	movs	r0, #1
 8000fcc:	4770      	bx	lr
{
 8000fce:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fd0:	6803      	ldr	r3, [r0, #0]
 8000fd2:	f013 0f02 	tst.w	r3, #2
 8000fd6:	d006      	beq.n	8000fe6 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fd8:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 8000fda:	6853      	ldr	r3, [r2, #4]
 8000fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fe0:	6884      	ldr	r4, [r0, #8]
 8000fe2:	4323      	orrs	r3, r4
 8000fe4:	6053      	str	r3, [r2, #4]
 8000fe6:	460d      	mov	r5, r1
 8000fe8:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fea:	6803      	ldr	r3, [r0, #0]
 8000fec:	f013 0f01 	tst.w	r3, #1
 8000ff0:	d052      	beq.n	8001098 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff2:	6843      	ldr	r3, [r0, #4]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d023      	beq.n	8001040 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d028      	beq.n	800104e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	4a45      	ldr	r2, [pc, #276]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	f012 0f02 	tst.w	r2, #2
 8001004:	f000 8082 	beq.w	800110c <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001008:	4942      	ldr	r1, [pc, #264]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 800100a:	684a      	ldr	r2, [r1, #4]
 800100c:	f022 0203 	bic.w	r2, r2, #3
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001014:	f7ff f948 	bl	80002a8 <HAL_GetTick>
 8001018:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800101a:	6863      	ldr	r3, [r4, #4]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d01d      	beq.n	800105c <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001020:	2b02      	cmp	r3, #2
 8001022:	d02a      	beq.n	800107a <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f013 0f0c 	tst.w	r3, #12
 800102c:	d034      	beq.n	8001098 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800102e:	f7ff f93b 	bl	80002a8 <HAL_GetTick>
 8001032:	1b80      	subs	r0, r0, r6
 8001034:	f241 3388 	movw	r3, #5000	; 0x1388
 8001038:	4298      	cmp	r0, r3
 800103a:	d9f3      	bls.n	8001024 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 800103c:	2003      	movs	r0, #3
 800103e:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001040:	4a34      	ldr	r2, [pc, #208]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001048:	d1de      	bne.n	8001008 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 800104a:	2001      	movs	r0, #1
 800104c:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104e:	4a31      	ldr	r2, [pc, #196]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001056:	d1d7      	bne.n	8001008 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8001058:	2001      	movs	r0, #1
 800105a:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b04      	cmp	r3, #4
 8001066:	d017      	beq.n	8001098 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001068:	f7ff f91e 	bl	80002a8 <HAL_GetTick>
 800106c:	1b80      	subs	r0, r0, r6
 800106e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001072:	4298      	cmp	r0, r3
 8001074:	d9f2      	bls.n	800105c <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001076:	2003      	movs	r0, #3
 8001078:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d008      	beq.n	8001098 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001086:	f7ff f90f 	bl	80002a8 <HAL_GetTick>
 800108a:	1b80      	subs	r0, r0, r6
 800108c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001090:	4298      	cmp	r0, r3
 8001092:	d9f2      	bls.n	800107a <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8001094:	2003      	movs	r0, #3
 8001096:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_RCC_ClockConfig+0x168>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	429d      	cmp	r5, r3
 80010a2:	d20c      	bcs.n	80010be <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a4:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <HAL_RCC_ClockConfig+0x168>)
 80010a6:	6813      	ldr	r3, [r2, #0]
 80010a8:	f023 0307 	bic.w	r3, r3, #7
 80010ac:	432b      	orrs	r3, r5
 80010ae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	429d      	cmp	r5, r3
 80010b8:	d001      	beq.n	80010be <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 80010ba:	2001      	movs	r0, #1
}
 80010bc:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	f013 0f04 	tst.w	r3, #4
 80010c4:	d006      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 80010c8:	6853      	ldr	r3, [r2, #4]
 80010ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ce:	68e1      	ldr	r1, [r4, #12]
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	f013 0f08 	tst.w	r3, #8
 80010da:	d007      	beq.n	80010ec <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 80010de:	6853      	ldr	r3, [r2, #4]
 80010e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010e4:	6921      	ldr	r1, [r4, #16]
 80010e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010ea:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ec:	f7ff ff26 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_RCC_ClockConfig+0x16c>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_RCC_ClockConfig+0x170>)
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	40d8      	lsrs	r0, r3
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_RCC_ClockConfig+0x174>)
 8001100:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff f88e 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8001108:	2000      	movs	r0, #0
 800110a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800110c:	2001      	movs	r0, #1
 800110e:	bd70      	pop	{r4, r5, r6, pc}
 8001110:	40022000 	.word	0x40022000
 8001114:	40021000 	.word	0x40021000
 8001118:	08002fb0 	.word	0x08002fb0
 800111c:	2000000c 	.word	0x2000000c

08001120 <HAL_RCC_GetHCLKFreq>:
}
 8001120:	4b01      	ldr	r3, [pc, #4]	; (8001128 <HAL_RCC_GetHCLKFreq+0x8>)
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2000000c 	.word	0x2000000c

0800112c <HAL_RCC_GetPCLK2Freq>:
{
 800112c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800112e:	f7ff fff7 	bl	8001120 <HAL_RCC_GetHCLKFreq>
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800113a:	4a03      	ldr	r2, [pc, #12]	; (8001148 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
} 
 800113e:	40d8      	lsrs	r0, r3
 8001140:	bd08      	pop	{r3, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	08002fc0 	.word	0x08002fc0

0800114c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001152:	6803      	ldr	r3, [r0, #0]
 8001154:	f013 0f01 	tst.w	r3, #1
 8001158:	d034      	beq.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115a:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001162:	d148      	bne.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001166:	69da      	ldr	r2, [r3, #28]
 8001168:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800116c:	61da      	str	r2, [r3, #28]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001178:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001182:	d03a      	beq.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001184:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001188:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800118c:	d011      	beq.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800118e:	6862      	ldr	r2, [r4, #4]
 8001190:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001194:	4293      	cmp	r3, r2
 8001196:	d00c      	beq.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001198:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800119a:	6a13      	ldr	r3, [r2, #32]
 800119c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80011a0:	492e      	ldr	r1, [pc, #184]	; (800125c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80011a2:	2601      	movs	r6, #1
 80011a4:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011a6:	2600      	movs	r6, #0
 80011a8:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80011aa:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80011ac:	f013 0f01 	tst.w	r3, #1
 80011b0:	d137      	bne.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011b2:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80011b4:	6a13      	ldr	r3, [r2, #32]
 80011b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ba:	6861      	ldr	r1, [r4, #4]
 80011bc:	430b      	orrs	r3, r1
 80011be:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011c0:	2d00      	cmp	r5, #0
 80011c2:	d13f      	bne.n	8001244 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	f013 0f02 	tst.w	r3, #2
 80011ca:	d006      	beq.n	80011da <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80011ce:	6853      	ldr	r3, [r2, #4]
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011d4:	68a1      	ldr	r1, [r4, #8]
 80011d6:	430b      	orrs	r3, r1
 80011d8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	f013 0f10 	tst.w	r3, #16
 80011e0:	d035      	beq.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80011e2:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80011e4:	6853      	ldr	r3, [r2, #4]
 80011e6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011ea:	6961      	ldr	r1, [r4, #20]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80011f0:	2000      	movs	r0, #0
}
 80011f2:	b002      	add	sp, #8
 80011f4:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80011f6:	2500      	movs	r5, #0
 80011f8:	e7bf      	b.n	800117a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80011fc:	6813      	ldr	r3, [r2, #0]
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001204:	f7ff f850 	bl	80002a8 <HAL_GetTick>
 8001208:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001212:	d1b7      	bne.n	8001184 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001214:	f7ff f848 	bl	80002a8 <HAL_GetTick>
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	2864      	cmp	r0, #100	; 0x64
 800121c:	d9f5      	bls.n	800120a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800121e:	2003      	movs	r0, #3
 8001220:	e7e7      	b.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8001222:	f7ff f841 	bl	80002a8 <HAL_GetTick>
 8001226:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	f013 0f02 	tst.w	r3, #2
 8001230:	d1bf      	bne.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7ff f839 	bl	80002a8 <HAL_GetTick>
 8001236:	1b80      	subs	r0, r0, r6
 8001238:	f241 3388 	movw	r3, #5000	; 0x1388
 800123c:	4298      	cmp	r0, r3
 800123e:	d9f3      	bls.n	8001228 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8001240:	2003      	movs	r0, #3
 8001242:	e7d6      	b.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001244:	69d3      	ldr	r3, [r2, #28]
 8001246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800124a:	61d3      	str	r3, [r2, #28]
 800124c:	e7ba      	b.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 800124e:	2000      	movs	r0, #0
 8001250:	e7cf      	b.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	40007000 	.word	0x40007000
 800125c:	42420440 	.word	0x42420440

08001260 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001260:	b530      	push	{r4, r5, lr}
 8001262:	b087      	sub	sp, #28
 8001264:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001266:	4c3f      	ldr	r4, [pc, #252]	; (8001364 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8001268:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800126c:	f10d 0e18 	add.w	lr, sp, #24
 8001270:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001274:	8a23      	ldrh	r3, [r4, #16]
 8001276:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800127a:	1e68      	subs	r0, r5, #1
 800127c:	280f      	cmp	r0, #15
 800127e:	d869      	bhi.n	8001354 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8001280:	e8df f000 	tbb	[pc, r0]
 8001284:	32685d39 	.word	0x32685d39
 8001288:	36686868 	.word	0x36686868
 800128c:	68686868 	.word	0x68686868
 8001290:	08686868 	.word	0x08686868
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8001296:	685a      	ldr	r2, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800129e:	d05b      	beq.n	8001358 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012a0:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80012a4:	a906      	add	r1, sp, #24
 80012a6:	440b      	add	r3, r1
 80012a8:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ac:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80012b0:	d016      	beq.n	80012e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80012ba:	440b      	add	r3, r1
 80012bc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 80012c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80012c6:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80012ca:	4b27      	ldr	r3, [pc, #156]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012d2:	d10b      	bne.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 80012d4:	0040      	lsls	r0, r0, #1
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_RCCEx_GetPeriphCLKFreq+0x110>)
 80012d8:	fba3 3000 	umull	r3, r0, r3, r0
 80012dc:	0840      	lsrs	r0, r0, #1
 80012de:	e005      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_RCCEx_GetPeriphCLKFreq+0x114>)
 80012e2:	fb03 f000 	mul.w	r0, r3, r0
 80012e6:	e7f0      	b.n	80012ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80012e8:	f7ff fe28 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
    {
      break;
    }
  }
  return(frequency);
}
 80012ec:	b007      	add	sp, #28
 80012ee:	bd30      	pop	{r4, r5, pc}
      frequency = HAL_RCC_GetSysClockFreq();
 80012f0:	f7ff fe24 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
      break;
 80012f4:	e7fa      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
      temp_reg = RCC->BDCR;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 80012f8:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80012fa:	f240 3202 	movw	r2, #770	; 0x302
 80012fe:	401a      	ands	r2, r3
 8001300:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8001304:	d02a      	beq.n	800135c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800130a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800130e:	d004      	beq.n	800131a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001314:	d009      	beq.n	800132a <HAL_RCCEx_GetPeriphCLKFreq+0xca>
        frequency = 0U;
 8001316:	2000      	movs	r0, #0
 8001318:	e7e8      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 800131c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800131e:	f012 0f02 	tst.w	r2, #2
 8001322:	d0f5      	beq.n	8001310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        frequency = LSI_VALUE;
 8001324:	f649 4040 	movw	r0, #40000	; 0x9c40
 8001328:	e7e0      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001332:	d002      	beq.n	800133a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        frequency = HSE_VALUE / 128U;
 8001334:	f24f 4024 	movw	r0, #62500	; 0xf424
  return(frequency);
 8001338:	e7d8      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        frequency = 0U;
 800133a:	2000      	movs	r0, #0
 800133c:	e7d6      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800133e:	f7ff fef5 	bl	800112c <HAL_RCC_GetPCLK2Freq>
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800134a:	3301      	adds	r3, #1
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001352:	e7cb      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001354:	2000      	movs	r0, #0
 8001356:	e7c9      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 8001358:	2000      	movs	r0, #0
 800135a:	e7c7      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        frequency = LSE_VALUE;
 800135c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001360:	e7c4      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 8001362:	bf00      	nop
 8001364:	08002f9c 	.word	0x08002f9c
 8001368:	40021000 	.word	0x40021000
 800136c:	007a1200 	.word	0x007a1200
 8001370:	aaaaaaab 	.word	0xaaaaaaab
 8001374:	003d0900 	.word	0x003d0900

08001378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001378:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800137a:	6a03      	ldr	r3, [r0, #32]
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001382:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001384:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001386:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001388:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800138c:	680d      	ldr	r5, [r1, #0]
 800138e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001390:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001394:	688d      	ldr	r5, [r1, #8]
 8001396:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001398:	4d11      	ldr	r5, [pc, #68]	; (80013e0 <TIM_OC1_SetConfig+0x68>)
 800139a:	42a8      	cmp	r0, r5
 800139c:	d011      	beq.n	80013c2 <TIM_OC1_SetConfig+0x4a>
 800139e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80013a2:	42a8      	cmp	r0, r5
 80013a4:	d00d      	beq.n	80013c2 <TIM_OC1_SetConfig+0x4a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80013a6:	4d0e      	ldr	r5, [pc, #56]	; (80013e0 <TIM_OC1_SetConfig+0x68>)
 80013a8:	42a8      	cmp	r0, r5
 80013aa:	d011      	beq.n	80013d0 <TIM_OC1_SetConfig+0x58>
 80013ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80013b0:	42a8      	cmp	r0, r5
 80013b2:	d00d      	beq.n	80013d0 <TIM_OC1_SetConfig+0x58>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013b6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80013b8:	684a      	ldr	r2, [r1, #4]
 80013ba:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013bc:	6203      	str	r3, [r0, #32]
}
 80013be:	bc30      	pop	{r4, r5}
 80013c0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80013c2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80013c6:	68cd      	ldr	r5, [r1, #12]
 80013c8:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80013ca:	f023 0304 	bic.w	r3, r3, #4
 80013ce:	e7ea      	b.n	80013a6 <TIM_OC1_SetConfig+0x2e>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80013d0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80013d4:	694d      	ldr	r5, [r1, #20]
 80013d6:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80013d8:	698d      	ldr	r5, [r1, #24]
 80013da:	432c      	orrs	r4, r5
 80013dc:	e7ea      	b.n	80013b4 <TIM_OC1_SetConfig+0x3c>
 80013de:	bf00      	nop
 80013e0:	40012c00 	.word	0x40012c00

080013e4 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80013e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013e6:	6a03      	ldr	r3, [r0, #32]
 80013e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80013f4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013f8:	680d      	ldr	r5, [r1, #0]
 80013fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80013fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001400:	688d      	ldr	r5, [r1, #8]
 8001402:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001406:	4d13      	ldr	r5, [pc, #76]	; (8001454 <TIM_OC3_SetConfig+0x70>)
 8001408:	42a8      	cmp	r0, r5
 800140a:	d011      	beq.n	8001430 <TIM_OC3_SetConfig+0x4c>
 800140c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001410:	42a8      	cmp	r0, r5
 8001412:	d00d      	beq.n	8001430 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001414:	4d0f      	ldr	r5, [pc, #60]	; (8001454 <TIM_OC3_SetConfig+0x70>)
 8001416:	42a8      	cmp	r0, r5
 8001418:	d012      	beq.n	8001440 <TIM_OC3_SetConfig+0x5c>
 800141a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800141e:	42a8      	cmp	r0, r5
 8001420:	d00e      	beq.n	8001440 <TIM_OC3_SetConfig+0x5c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001422:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001424:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001426:	684a      	ldr	r2, [r1, #4]
 8001428:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800142a:	6203      	str	r3, [r0, #32]
}
 800142c:	bc30      	pop	{r4, r5}
 800142e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001434:	68cd      	ldr	r5, [r1, #12]
 8001436:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800143a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800143e:	e7e9      	b.n	8001414 <TIM_OC3_SetConfig+0x30>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001440:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001444:	694d      	ldr	r5, [r1, #20]
 8001446:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800144a:	698d      	ldr	r5, [r1, #24]
 800144c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8001450:	e7e7      	b.n	8001422 <TIM_OC3_SetConfig+0x3e>
 8001452:	bf00      	nop
 8001454:	40012c00 	.word	0x40012c00

08001458 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001458:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800145a:	6a03      	ldr	r3, [r0, #32]
 800145c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001460:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001462:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001464:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001466:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001468:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800146c:	680d      	ldr	r5, [r1, #0]
 800146e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001476:	688d      	ldr	r5, [r1, #8]
 8001478:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800147c:	4d09      	ldr	r5, [pc, #36]	; (80014a4 <TIM_OC4_SetConfig+0x4c>)
 800147e:	42a8      	cmp	r0, r5
 8001480:	d00a      	beq.n	8001498 <TIM_OC4_SetConfig+0x40>
 8001482:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001486:	42a8      	cmp	r0, r5
 8001488:	d006      	beq.n	8001498 <TIM_OC4_SetConfig+0x40>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800148a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800148c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800148e:	684a      	ldr	r2, [r1, #4]
 8001490:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001492:	6203      	str	r3, [r0, #32]
}
 8001494:	bc30      	pop	{r4, r5}
 8001496:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001498:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800149c:	694d      	ldr	r5, [r1, #20]
 800149e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80014a2:	e7f2      	b.n	800148a <TIM_OC4_SetConfig+0x32>
 80014a4:	40012c00 	.word	0x40012c00

080014a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014a8:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80014aa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014ac:	6a04      	ldr	r4, [r0, #32]
 80014ae:	f024 0401 	bic.w	r4, r4, #1
 80014b2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014b4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014b6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014ba:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014be:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80014c2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80014c4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80014c6:	6203      	str	r3, [r0, #32]
}
 80014c8:	bc10      	pop	{r4}
 80014ca:	4770      	bx	lr

080014cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014cc:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014ce:	6a03      	ldr	r3, [r0, #32]
 80014d0:	f023 0310 	bic.w	r3, r3, #16
 80014d4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014d6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80014d8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80014da:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80014de:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80014e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80014e6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80014ea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80014ec:	6203      	str	r3, [r0, #32]
}
 80014ee:	bc10      	pop	{r4}
 80014f0:	4770      	bx	lr

080014f2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80014f2:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80014f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80014f8:	f041 0107 	orr.w	r1, r1, #7
 80014fc:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80014fe:	6083      	str	r3, [r0, #8]
 8001500:	4770      	bx	lr

08001502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001502:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001504:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001506:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800150a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800150e:	4319      	orrs	r1, r3
 8001510:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001512:	6084      	str	r4, [r0, #8]
}
 8001514:	bc10      	pop	{r4}
 8001516:	4770      	bx	lr

08001518 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001518:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800151c:	2b01      	cmp	r3, #1
 800151e:	d07d      	beq.n	800161c <HAL_TIM_ConfigClockSource+0x104>
{
 8001520:	b510      	push	{r4, lr}
 8001522:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001524:	2301      	movs	r3, #1
 8001526:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800152a:	2302      	movs	r3, #2
 800152c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001534:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001538:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800153c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800153e:	680b      	ldr	r3, [r1, #0]
 8001540:	2b40      	cmp	r3, #64	; 0x40
 8001542:	d057      	beq.n	80015f4 <HAL_TIM_ConfigClockSource+0xdc>
 8001544:	d910      	bls.n	8001568 <HAL_TIM_ConfigClockSource+0x50>
 8001546:	2b70      	cmp	r3, #112	; 0x70
 8001548:	d03e      	beq.n	80015c8 <HAL_TIM_ConfigClockSource+0xb0>
 800154a:	d81f      	bhi.n	800158c <HAL_TIM_ConfigClockSource+0x74>
 800154c:	2b50      	cmp	r3, #80	; 0x50
 800154e:	d047      	beq.n	80015e0 <HAL_TIM_ConfigClockSource+0xc8>
 8001550:	2b60      	cmp	r3, #96	; 0x60
 8001552:	d132      	bne.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001554:	68ca      	ldr	r2, [r1, #12]
 8001556:	6849      	ldr	r1, [r1, #4]
 8001558:	6800      	ldr	r0, [r0, #0]
 800155a:	f7ff ffb7 	bl	80014cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800155e:	2160      	movs	r1, #96	; 0x60
 8001560:	6820      	ldr	r0, [r4, #0]
 8001562:	f7ff ffc6 	bl	80014f2 <TIM_ITRx_SetConfig>
    break;
 8001566:	e028      	b.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001568:	2b10      	cmp	r3, #16
 800156a:	d04d      	beq.n	8001608 <HAL_TIM_ConfigClockSource+0xf0>
 800156c:	d908      	bls.n	8001580 <HAL_TIM_ConfigClockSource+0x68>
 800156e:	2b20      	cmp	r3, #32
 8001570:	d04f      	beq.n	8001612 <HAL_TIM_ConfigClockSource+0xfa>
 8001572:	2b30      	cmp	r3, #48	; 0x30
 8001574:	d121      	bne.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001576:	2130      	movs	r1, #48	; 0x30
 8001578:	6800      	ldr	r0, [r0, #0]
 800157a:	f7ff ffba 	bl	80014f2 <TIM_ITRx_SetConfig>
    break;
 800157e:	e01c      	b.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001580:	b9db      	cbnz	r3, 80015ba <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001582:	2100      	movs	r1, #0
 8001584:	6800      	ldr	r0, [r0, #0]
 8001586:	f7ff ffb4 	bl	80014f2 <TIM_ITRx_SetConfig>
    break;
 800158a:	e016      	b.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 800158c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001590:	d00e      	beq.n	80015b0 <HAL_TIM_ConfigClockSource+0x98>
 8001592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001596:	d110      	bne.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8001598:	68cb      	ldr	r3, [r1, #12]
 800159a:	684a      	ldr	r2, [r1, #4]
 800159c:	6889      	ldr	r1, [r1, #8]
 800159e:	6800      	ldr	r0, [r0, #0]
 80015a0:	f7ff ffaf 	bl	8001502 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015a4:	6822      	ldr	r2, [r4, #0]
 80015a6:	6893      	ldr	r3, [r2, #8]
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6093      	str	r3, [r2, #8]
    break;
 80015ae:	e004      	b.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80015b0:	6802      	ldr	r2, [r0, #0]
 80015b2:	6893      	ldr	r3, [r2, #8]
 80015b4:	f023 0307 	bic.w	r3, r3, #7
 80015b8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80015c6:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80015c8:	68cb      	ldr	r3, [r1, #12]
 80015ca:	684a      	ldr	r2, [r1, #4]
 80015cc:	6889      	ldr	r1, [r1, #8]
 80015ce:	6800      	ldr	r0, [r0, #0]
 80015d0:	f7ff ff97 	bl	8001502 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80015d4:	6822      	ldr	r2, [r4, #0]
 80015d6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80015d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80015dc:	6093      	str	r3, [r2, #8]
    break;
 80015de:	e7ec      	b.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015e0:	68ca      	ldr	r2, [r1, #12]
 80015e2:	6849      	ldr	r1, [r1, #4]
 80015e4:	6800      	ldr	r0, [r0, #0]
 80015e6:	f7ff ff5f 	bl	80014a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80015ea:	2150      	movs	r1, #80	; 0x50
 80015ec:	6820      	ldr	r0, [r4, #0]
 80015ee:	f7ff ff80 	bl	80014f2 <TIM_ITRx_SetConfig>
    break;
 80015f2:	e7e2      	b.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015f4:	68ca      	ldr	r2, [r1, #12]
 80015f6:	6849      	ldr	r1, [r1, #4]
 80015f8:	6800      	ldr	r0, [r0, #0]
 80015fa:	f7ff ff55 	bl	80014a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	6820      	ldr	r0, [r4, #0]
 8001602:	f7ff ff76 	bl	80014f2 <TIM_ITRx_SetConfig>
    break;
 8001606:	e7d8      	b.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001608:	2110      	movs	r1, #16
 800160a:	6800      	ldr	r0, [r0, #0]
 800160c:	f7ff ff71 	bl	80014f2 <TIM_ITRx_SetConfig>
    break;
 8001610:	e7d3      	b.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001612:	2120      	movs	r1, #32
 8001614:	6800      	ldr	r0, [r0, #0]
 8001616:	f7ff ff6c 	bl	80014f2 <TIM_ITRx_SetConfig>
    break;
 800161a:	e7ce      	b.n	80015ba <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 800161c:	2002      	movs	r0, #2
 800161e:	4770      	bx	lr

08001620 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001620:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001622:	4a25      	ldr	r2, [pc, #148]	; (80016b8 <TIM_Base_SetConfig+0x98>)
 8001624:	4290      	cmp	r0, r2
 8001626:	d012      	beq.n	800164e <TIM_Base_SetConfig+0x2e>
 8001628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800162c:	4290      	cmp	r0, r2
 800162e:	d00e      	beq.n	800164e <TIM_Base_SetConfig+0x2e>
 8001630:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001634:	d00b      	beq.n	800164e <TIM_Base_SetConfig+0x2e>
 8001636:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800163a:	4290      	cmp	r0, r2
 800163c:	d007      	beq.n	800164e <TIM_Base_SetConfig+0x2e>
 800163e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001642:	4290      	cmp	r0, r2
 8001644:	d003      	beq.n	800164e <TIM_Base_SetConfig+0x2e>
 8001646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800164a:	4290      	cmp	r0, r2
 800164c:	d103      	bne.n	8001656 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800164e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001652:	684a      	ldr	r2, [r1, #4]
 8001654:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001656:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <TIM_Base_SetConfig+0x98>)
 8001658:	4290      	cmp	r0, r2
 800165a:	d012      	beq.n	8001682 <TIM_Base_SetConfig+0x62>
 800165c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001660:	4290      	cmp	r0, r2
 8001662:	d00e      	beq.n	8001682 <TIM_Base_SetConfig+0x62>
 8001664:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001668:	d00b      	beq.n	8001682 <TIM_Base_SetConfig+0x62>
 800166a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800166e:	4290      	cmp	r0, r2
 8001670:	d007      	beq.n	8001682 <TIM_Base_SetConfig+0x62>
 8001672:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001676:	4290      	cmp	r0, r2
 8001678:	d003      	beq.n	8001682 <TIM_Base_SetConfig+0x62>
 800167a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800167e:	4290      	cmp	r0, r2
 8001680:	d103      	bne.n	800168a <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001686:	68ca      	ldr	r2, [r1, #12]
 8001688:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 800168a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800168e:	694a      	ldr	r2, [r1, #20]
 8001690:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001692:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001694:	688b      	ldr	r3, [r1, #8]
 8001696:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001698:	680b      	ldr	r3, [r1, #0]
 800169a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <TIM_Base_SetConfig+0x98>)
 800169e:	4298      	cmp	r0, r3
 80016a0:	d006      	beq.n	80016b0 <TIM_Base_SetConfig+0x90>
 80016a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a6:	4298      	cmp	r0, r3
 80016a8:	d002      	beq.n	80016b0 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80016aa:	2301      	movs	r3, #1
 80016ac:	6143      	str	r3, [r0, #20]
 80016ae:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80016b0:	690b      	ldr	r3, [r1, #16]
 80016b2:	6303      	str	r3, [r0, #48]	; 0x30
 80016b4:	e7f9      	b.n	80016aa <TIM_Base_SetConfig+0x8a>
 80016b6:	bf00      	nop
 80016b8:	40012c00 	.word	0x40012c00

080016bc <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80016bc:	b1a8      	cbz	r0, 80016ea <HAL_TIM_Base_Init+0x2e>
{
 80016be:	b510      	push	{r4, lr}
 80016c0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80016c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016c6:	b15b      	cbz	r3, 80016e0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ce:	1d21      	adds	r1, r4, #4
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	f7ff ffa5 	bl	8001620 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016dc:	2000      	movs	r0, #0
 80016de:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80016e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016e4:	f000 fb84 	bl	8001df0 <HAL_TIM_Base_MspInit>
 80016e8:	e7ee      	b.n	80016c8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
 80016ec:	4770      	bx	lr

080016ee <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80016ee:	b1a8      	cbz	r0, 800171c <HAL_TIM_PWM_Init+0x2e>
{
 80016f0:	b510      	push	{r4, lr}
 80016f2:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80016f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016f8:	b15b      	cbz	r3, 8001712 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80016fa:	2302      	movs	r3, #2
 80016fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001700:	1d21      	adds	r1, r4, #4
 8001702:	6820      	ldr	r0, [r4, #0]
 8001704:	f7ff ff8c 	bl	8001620 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001708:	2301      	movs	r3, #1
 800170a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800170e:	2000      	movs	r0, #0
 8001710:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001712:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001716:	f000 fb35 	bl	8001d84 <HAL_TIM_PWM_MspInit>
 800171a:	e7ee      	b.n	80016fa <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
 800171e:	4770      	bx	lr

08001720 <TIM_OC2_SetConfig>:
{
 8001720:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001722:	6a03      	ldr	r3, [r0, #32]
 8001724:	f023 0310 	bic.w	r3, r3, #16
 8001728:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800172a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800172c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800172e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001730:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001734:	680d      	ldr	r5, [r1, #0]
 8001736:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800173a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800173e:	688d      	ldr	r5, [r1, #8]
 8001740:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001744:	4d12      	ldr	r5, [pc, #72]	; (8001790 <TIM_OC2_SetConfig+0x70>)
 8001746:	42a8      	cmp	r0, r5
 8001748:	d011      	beq.n	800176e <TIM_OC2_SetConfig+0x4e>
 800174a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800174e:	42a8      	cmp	r0, r5
 8001750:	d00d      	beq.n	800176e <TIM_OC2_SetConfig+0x4e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001752:	4d0f      	ldr	r5, [pc, #60]	; (8001790 <TIM_OC2_SetConfig+0x70>)
 8001754:	42a8      	cmp	r0, r5
 8001756:	d012      	beq.n	800177e <TIM_OC2_SetConfig+0x5e>
 8001758:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800175c:	42a8      	cmp	r0, r5
 800175e:	d00e      	beq.n	800177e <TIM_OC2_SetConfig+0x5e>
  TIMx->CR2 = tmpcr2;
 8001760:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001762:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001764:	684a      	ldr	r2, [r1, #4]
 8001766:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001768:	6203      	str	r3, [r0, #32]
}
 800176a:	bc30      	pop	{r4, r5}
 800176c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800176e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001772:	68cd      	ldr	r5, [r1, #12]
 8001774:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800177c:	e7e9      	b.n	8001752 <TIM_OC2_SetConfig+0x32>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800177e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001782:	694d      	ldr	r5, [r1, #20]
 8001784:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001788:	698d      	ldr	r5, [r1, #24]
 800178a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800178e:	e7e7      	b.n	8001760 <TIM_OC2_SetConfig+0x40>
 8001790:	40012c00 	.word	0x40012c00

08001794 <HAL_TIM_PWM_ConfigChannel>:
{
 8001794:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001796:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800179a:	2b01      	cmp	r3, #1
 800179c:	d066      	beq.n	800186c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800179e:	460d      	mov	r5, r1
 80017a0:	4604      	mov	r4, r0
 80017a2:	2301      	movs	r3, #1
 80017a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80017a8:	2302      	movs	r3, #2
 80017aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80017ae:	2a0c      	cmp	r2, #12
 80017b0:	d81a      	bhi.n	80017e8 <HAL_TIM_PWM_ConfigChannel+0x54>
 80017b2:	e8df f002 	tbb	[pc, r2]
 80017b6:	1907      	.short	0x1907
 80017b8:	19201919 	.word	0x19201919
 80017bc:	19341919 	.word	0x19341919
 80017c0:	1919      	.short	0x1919
 80017c2:	47          	.byte	0x47
 80017c3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017c4:	6800      	ldr	r0, [r0, #0]
 80017c6:	f7ff fdd7 	bl	8001378 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017ca:	6822      	ldr	r2, [r4, #0]
 80017cc:	6993      	ldr	r3, [r2, #24]
 80017ce:	f043 0308 	orr.w	r3, r3, #8
 80017d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80017d4:	6822      	ldr	r2, [r4, #0]
 80017d6:	6993      	ldr	r3, [r2, #24]
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017de:	6822      	ldr	r2, [r4, #0]
 80017e0:	6993      	ldr	r3, [r2, #24]
 80017e2:	6929      	ldr	r1, [r5, #16]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80017f4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017f6:	6800      	ldr	r0, [r0, #0]
 80017f8:	f7ff ff92 	bl	8001720 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017fc:	6822      	ldr	r2, [r4, #0]
 80017fe:	6993      	ldr	r3, [r2, #24]
 8001800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001804:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001806:	6822      	ldr	r2, [r4, #0]
 8001808:	6993      	ldr	r3, [r2, #24]
 800180a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800180e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001810:	6822      	ldr	r2, [r4, #0]
 8001812:	6993      	ldr	r3, [r2, #24]
 8001814:	6929      	ldr	r1, [r5, #16]
 8001816:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800181a:	6193      	str	r3, [r2, #24]
    break;
 800181c:	e7e4      	b.n	80017e8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800181e:	6800      	ldr	r0, [r0, #0]
 8001820:	f7ff fde0 	bl	80013e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001824:	6822      	ldr	r2, [r4, #0]
 8001826:	69d3      	ldr	r3, [r2, #28]
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800182e:	6822      	ldr	r2, [r4, #0]
 8001830:	69d3      	ldr	r3, [r2, #28]
 8001832:	f023 0304 	bic.w	r3, r3, #4
 8001836:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001838:	6822      	ldr	r2, [r4, #0]
 800183a:	69d3      	ldr	r3, [r2, #28]
 800183c:	6929      	ldr	r1, [r5, #16]
 800183e:	430b      	orrs	r3, r1
 8001840:	61d3      	str	r3, [r2, #28]
    break;
 8001842:	e7d1      	b.n	80017e8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001844:	6800      	ldr	r0, [r0, #0]
 8001846:	f7ff fe07 	bl	8001458 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800184a:	6822      	ldr	r2, [r4, #0]
 800184c:	69d3      	ldr	r3, [r2, #28]
 800184e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001852:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001854:	6822      	ldr	r2, [r4, #0]
 8001856:	69d3      	ldr	r3, [r2, #28]
 8001858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800185c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800185e:	6822      	ldr	r2, [r4, #0]
 8001860:	69d3      	ldr	r3, [r2, #28]
 8001862:	6929      	ldr	r1, [r5, #16]
 8001864:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001868:	61d3      	str	r3, [r2, #28]
    break;
 800186a:	e7bd      	b.n	80017e8 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800186c:	2002      	movs	r0, #2
}
 800186e:	bd38      	pop	{r3, r4, r5, pc}

08001870 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001870:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001874:	2b01      	cmp	r3, #1
 8001876:	d025      	beq.n	80018c4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8001878:	2301      	movs	r3, #1
 800187a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800187e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001884:	688a      	ldr	r2, [r1, #8]
 8001886:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800188c:	684a      	ldr	r2, [r1, #4]
 800188e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001894:	680a      	ldr	r2, [r1, #0]
 8001896:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800189c:	690a      	ldr	r2, [r1, #16]
 800189e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80018a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018a4:	694a      	ldr	r2, [r1, #20]
 80018a6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ac:	698a      	ldr	r2, [r1, #24]
 80018ae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018b4:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80018b6:	6802      	ldr	r2, [r0, #0]
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80018ba:	2300      	movs	r3, #0
 80018bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80018c0:	4618      	mov	r0, r3
 80018c2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80018c4:	2002      	movs	r0, #2
}
 80018c6:	4770      	bx	lr

080018c8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80018c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d022      	beq.n	8001916 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80018d0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80018d2:	2201      	movs	r2, #1
 80018d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80018d8:	2302      	movs	r3, #2
 80018da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80018de:	6804      	ldr	r4, [r0, #0]
 80018e0:	6863      	ldr	r3, [r4, #4]
 80018e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e6:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80018e8:	6804      	ldr	r4, [r0, #0]
 80018ea:	6863      	ldr	r3, [r4, #4]
 80018ec:	680d      	ldr	r5, [r1, #0]
 80018ee:	432b      	orrs	r3, r5
 80018f0:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80018f2:	6804      	ldr	r4, [r0, #0]
 80018f4:	68a3      	ldr	r3, [r4, #8]
 80018f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018fa:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80018fc:	6804      	ldr	r4, [r0, #0]
 80018fe:	68a3      	ldr	r3, [r4, #8]
 8001900:	6849      	ldr	r1, [r1, #4]
 8001902:	430b      	orrs	r3, r1
 8001904:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001906:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800190a:	2300      	movs	r3, #0
 800190c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001910:	4618      	mov	r0, r3
}
 8001912:	bc30      	pop	{r4, r5}
 8001914:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001916:	2002      	movs	r0, #2
 8001918:	4770      	bx	lr
	...

0800191c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800191c:	b500      	push	{lr}
 800191e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001920:	4813      	ldr	r0, [pc, #76]	; (8001970 <MX_ADC1_Init+0x54>)
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_ADC1_Init+0x58>)
 8001924:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800192a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800192c:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800192e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001932:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001934:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001936:	2301      	movs	r3, #1
 8001938:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800193a:	f7fe feef 	bl	800071c <HAL_ADC_Init>
 800193e:	b968      	cbnz	r0, 800195c <MX_ADC1_Init+0x40>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8001940:	230a      	movs	r3, #10
 8001942:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001944:	2301      	movs	r3, #1
 8001946:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001948:	2300      	movs	r3, #0
 800194a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194c:	a901      	add	r1, sp, #4
 800194e:	4808      	ldr	r0, [pc, #32]	; (8001970 <MX_ADC1_Init+0x54>)
 8001950:	f7fe fd6c 	bl	800042c <HAL_ADC_ConfigChannel>
 8001954:	b938      	cbnz	r0, 8001966 <MX_ADC1_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001956:	b005      	add	sp, #20
 8001958:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800195c:	214c      	movs	r1, #76	; 0x4c
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <MX_ADC1_Init+0x5c>)
 8001960:	f000 f8f0 	bl	8001b44 <_Error_Handler>
 8001964:	e7ec      	b.n	8001940 <MX_ADC1_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8001966:	2156      	movs	r1, #86	; 0x56
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <MX_ADC1_Init+0x5c>)
 800196a:	f000 f8eb 	bl	8001b44 <_Error_Handler>
}
 800196e:	e7f2      	b.n	8001956 <MX_ADC1_Init+0x3a>
 8001970:	200000a0 	.word	0x200000a0
 8001974:	40012400 	.word	0x40012400
 8001978:	08002fc8 	.word	0x08002fc8

0800197c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800197c:	6802      	ldr	r2, [r0, #0]
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_ADC_MspInit+0x3c>)
 8001980:	429a      	cmp	r2, r3
 8001982:	d000      	beq.n	8001986 <HAL_ADC_MspInit+0xa>
 8001984:	4770      	bx	lr
{
 8001986:	b500      	push	{lr}
 8001988:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001994:	619a      	str	r2, [r3, #24]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9b01      	ldr	r3, [sp, #4]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC3_Pin|ADC4_Pin;
 80019a0:	230f      	movs	r3, #15
 80019a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a4:	2303      	movs	r3, #3
 80019a6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a8:	a902      	add	r1, sp, #8
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <HAL_ADC_MspInit+0x40>)
 80019ac:	f7fe ffbc 	bl	8000928 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80019b0:	b007      	add	sp, #28
 80019b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019b6:	bf00      	nop
 80019b8:	40012400 	.word	0x40012400
 80019bc:	40011000 	.word	0x40011000

080019c0 <ADC_UPDATE>:
} 

/* USER CODE BEGIN 1 */

void ADC_UPDATE(void)
{
 80019c0:	b510      	push	{r4, lr}
 80019c2:	b084      	sub	sp, #16
	ADC_ChannelConfTypeDef sConfig;

	sConfig.Rank = 1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019c8:	2300      	movs	r3, #0
 80019ca:	9303      	str	r3, [sp, #12]
	sConfig.Channel = ADC_CHANNEL_10;
 80019cc:	a904      	add	r1, sp, #16
 80019ce:	230a      	movs	r3, #10
 80019d0:	f841 3d0c 	str.w	r3, [r1, #-12]!
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019d4:	4c19      	ldr	r4, [pc, #100]	; (8001a3c <ADC_UPDATE+0x7c>)
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7fe fd28 	bl	800042c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80019dc:	4620      	mov	r0, r4
 80019de:	f7fe fe01 	bl	80005e4 <HAL_ADC_Start>
	while( HAL_ADC_PollForConversion(&hadc1,1000) != HAL_OK );
 80019e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019e6:	4815      	ldr	r0, [pc, #84]	; (8001a3c <ADC_UPDATE+0x7c>)
 80019e8:	f7fe fc64 	bl	80002b4 <HAL_ADC_PollForConversion>
 80019ec:	2800      	cmp	r0, #0
 80019ee:	d1f8      	bne.n	80019e2 <ADC_UPDATE+0x22>
	adc1_ch10 = HAL_ADC_GetValue(&hadc1);
 80019f0:	4c12      	ldr	r4, [pc, #72]	; (8001a3c <ADC_UPDATE+0x7c>)
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7fe fd16 	bl	8000424 <HAL_ADC_GetValue>
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <ADC_UPDATE+0x80>)
 80019fa:	8018      	strh	r0, [r3, #0]

	sConfig.Rank = 2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a00:	2300      	movs	r3, #0
 8001a02:	9303      	str	r3, [sp, #12]
	sConfig.Channel = ADC_CHANNEL_11;
 8001a04:	a904      	add	r1, sp, #16
 8001a06:	230b      	movs	r3, #11
 8001a08:	f841 3d0c 	str.w	r3, [r1, #-12]!
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7fe fd0d 	bl	800042c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7fe fde6 	bl	80005e4 <HAL_ADC_Start>
	while( HAL_ADC_PollForConversion(&hadc1,1000) != HAL_OK );
 8001a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <ADC_UPDATE+0x7c>)
 8001a1e:	f7fe fc49 	bl	80002b4 <HAL_ADC_PollForConversion>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d1f8      	bne.n	8001a18 <ADC_UPDATE+0x58>
	adc1_ch11 = HAL_ADC_GetValue(&hadc1);
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <ADC_UPDATE+0x7c>)
 8001a28:	f7fe fcfc 	bl	8000424 <HAL_ADC_GetValue>
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <ADC_UPDATE+0x80>)
 8001a2e:	8058      	strh	r0, [r3, #2]

	printf("%d\r",adc1_ch10);
 8001a30:	8819      	ldrh	r1, [r3, #0]
 8001a32:	4804      	ldr	r0, [pc, #16]	; (8001a44 <ADC_UPDATE+0x84>)
 8001a34:	f000 fb52 	bl	80020dc <iprintf>
}
 8001a38:	b004      	add	sp, #16
 8001a3a:	bd10      	pop	{r4, pc}
 8001a3c:	200000a0 	.word	0x200000a0
 8001a40:	20000008 	.word	0x20000008
 8001a44:	08002fd8 	.word	0x08002fd8

08001a48 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8001a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a4c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <MX_GPIO_Init+0xec>)
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	f042 0210 	orr.w	r2, r2, #16
 8001a56:	619a      	str	r2, [r3, #24]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	f002 0210 	and.w	r2, r2, #16
 8001a5e:	9200      	str	r2, [sp, #0]
 8001a60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	f042 0220 	orr.w	r2, r2, #32
 8001a68:	619a      	str	r2, [r3, #24]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	f002 0220 	and.w	r2, r2, #32
 8001a70:	9201      	str	r2, [sp, #4]
 8001a72:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	f042 0204 	orr.w	r2, r2, #4
 8001a7a:	619a      	str	r2, [r3, #24]
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	f002 0204 	and.w	r2, r2, #4
 8001a82:	9202      	str	r2, [sp, #8]
 8001a84:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	699a      	ldr	r2, [r3, #24]
 8001a88:	f042 0208 	orr.w	r2, r2, #8
 8001a8c:	619a      	str	r2, [r3, #24]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	9303      	str	r3, [sp, #12]
 8001a96:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|MOTER_EN_Pin|L_CW_CCW_Pin 
 8001a98:	4e27      	ldr	r6, [pc, #156]	; (8001b38 <MX_GPIO_Init+0xf0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f246 11c0 	movw	r1, #25024	; 0x61c0
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	f7ff f83f 	bl	8000b24 <HAL_GPIO_WritePin>
                          |R_CW_CCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED4_Pin|BATTERY_Pin, GPIO_PIN_RESET);
 8001aa6:	4d25      	ldr	r5, [pc, #148]	; (8001b3c <MX_GPIO_Init+0xf4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2113      	movs	r1, #19
 8001aac:	4628      	mov	r0, r5
 8001aae:	f7ff f839 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|MOTER_EN_Pin|L_CW_CCW_Pin 
 8001ab2:	f246 13c0 	movw	r3, #25024	; 0x61c0
 8001ab6:	9304      	str	r3, [sp, #16]
                          |R_CW_CCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	f04f 0801 	mov.w	r8, #1
 8001abc:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2702      	movs	r7, #2
 8001ac6:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	a904      	add	r1, sp, #16
 8001aca:	4630      	mov	r0, r6
 8001acc:	f7fe ff2c 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BATTERY_Pin;
 8001ad0:	2313      	movs	r3, #19
 8001ad2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	a904      	add	r1, sp, #16
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f7fe ff22 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	a904      	add	r1, sp, #16
 8001af2:	4628      	mov	r0, r5
 8001af4:	f7fe ff18 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	a904      	add	r1, sp, #16
 8001b04:	4628      	mov	r0, r5
 8001b06:	f7fe ff0f 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin;
 8001b0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b0e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	a904      	add	r1, sp, #16
 8001b16:	4630      	mov	r0, r6
 8001b18:	f7fe ff06 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = BOOTO_SW1_Pin|SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin 
 8001b1c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001b20:	9304      	str	r3, [sp, #16]
                          |SENSOR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b22:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	a904      	add	r1, sp, #16
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_GPIO_Init+0xf8>)
 8001b2a:	f7fe fefd 	bl	8000928 <HAL_GPIO_Init>

}
 8001b2e:	b008      	add	sp, #32
 8001b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40010800 	.word	0x40010800
 8001b40:	40010c00 	.word	0x40010c00

08001b44 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001b44:	e7fe      	b.n	8001b44 <_Error_Handler>
	...

08001b48 <SystemClock_Config>:
{
 8001b48:	b500      	push	{lr}
 8001b4a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b50:	2201      	movs	r2, #1
 8001b52:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001b54:	2210      	movs	r2, #16
 8001b56:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b5e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b62:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b64:	a80c      	add	r0, sp, #48	; 0x30
 8001b66:	f7fe fff9 	bl	8000b5c <HAL_RCC_OscConfig>
 8001b6a:	bb50      	cbnz	r0, 8001bc2 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b70:	2102      	movs	r1, #2
 8001b72:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b80:	a807      	add	r0, sp, #28
 8001b82:	f7ff fa11 	bl	8000fa8 <HAL_RCC_ClockConfig>
 8001b86:	bb00      	cbnz	r0, 8001bca <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001b8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b90:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b92:	a801      	add	r0, sp, #4
 8001b94:	f7ff fada 	bl	800114c <HAL_RCCEx_PeriphCLKConfig>
 8001b98:	b9d8      	cbnz	r0, 8001bd2 <SystemClock_Config+0x8a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b9a:	f7ff fac1 	bl	8001120 <HAL_RCC_GetHCLKFreq>
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <SystemClock_Config+0x94>)
 8001ba0:	fba3 3000 	umull	r3, r0, r3, r0
 8001ba4:	0980      	lsrs	r0, r0, #6
 8001ba6:	f7fe fe93 	bl	80008d0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001baa:	2004      	movs	r0, #4
 8001bac:	f7fe fea6 	bl	80008fc <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f7fe fe58 	bl	800086c <HAL_NVIC_SetPriority>
}
 8001bbc:	b017      	add	sp, #92	; 0x5c
 8001bbe:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001bc2:	2193      	movs	r1, #147	; 0x93
 8001bc4:	4806      	ldr	r0, [pc, #24]	; (8001be0 <SystemClock_Config+0x98>)
 8001bc6:	f7ff ffbd 	bl	8001b44 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001bca:	21a1      	movs	r1, #161	; 0xa1
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <SystemClock_Config+0x98>)
 8001bce:	f7ff ffb9 	bl	8001b44 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001bd2:	21a8      	movs	r1, #168	; 0xa8
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <SystemClock_Config+0x98>)
 8001bd6:	f7ff ffb5 	bl	8001b44 <_Error_Handler>
 8001bda:	bf00      	nop
 8001bdc:	10624dd3 	.word	0x10624dd3
 8001be0:	08002fdc 	.word	0x08002fdc

08001be4 <main>:
{
 8001be4:	b508      	push	{r3, lr}
  HAL_Init();
 8001be6:	f7fe fb41 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001bea:	f7ff ffad 	bl	8001b48 <SystemClock_Config>
  MX_GPIO_Init();
 8001bee:	f7ff ff2b 	bl	8001a48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001bf2:	f7ff fe93 	bl	800191c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001bf6:	f000 f955 	bl	8001ea4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001bfa:	f000 f88b 	bl	8001d14 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001bfe:	f000 f98f 	bl	8001f20 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001c02:	f000 f9cb 	bl	8001f9c <MX_TIM8_Init>
	  ADC_UPDATE();
 8001c06:	f7ff fedb 	bl	80019c0 <ADC_UPDATE>
 8001c0a:	e7fc      	b.n	8001c06 <main+0x22>

08001c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0c:	b500      	push	{lr}
 8001c0e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_MspInit+0x98>)
 8001c12:	699a      	ldr	r2, [r3, #24]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	619a      	str	r2, [r3, #24]
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	f002 0201 	and.w	r2, r2, #1
 8001c20:	9200      	str	r2, [sp, #0]
 8001c22:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c2a:	61da      	str	r2, [r3, #28]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c36:	2003      	movs	r0, #3
 8001c38:	f7fe fe06 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4611      	mov	r1, r2
 8001c40:	f06f 000b 	mvn.w	r0, #11
 8001c44:	f7fe fe12 	bl	800086c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	f06f 000a 	mvn.w	r0, #10
 8001c50:	f7fe fe0c 	bl	800086c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	4611      	mov	r1, r2
 8001c58:	f06f 0009 	mvn.w	r0, #9
 8001c5c:	f7fe fe06 	bl	800086c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	4611      	mov	r1, r2
 8001c64:	f06f 0004 	mvn.w	r0, #4
 8001c68:	f7fe fe00 	bl	800086c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4611      	mov	r1, r2
 8001c70:	f06f 0003 	mvn.w	r0, #3
 8001c74:	f7fe fdfa 	bl	800086c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	f06f 0001 	mvn.w	r0, #1
 8001c80:	f7fe fdf4 	bl	800086c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	4611      	mov	r1, r2
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7fe fdee 	bl	800086c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c90:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <HAL_MspInit+0x9c>)
 8001c92:	6853      	ldr	r3, [r2, #4]
 8001c94:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	b003      	add	sp, #12
 8001ca0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000

08001cac <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001cac:	4770      	bx	lr

08001cae <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler>

08001cb0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler>

08001cb2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001cb2:	e7fe      	b.n	8001cb2 <BusFault_Handler>

08001cb4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001cb4:	e7fe      	b.n	8001cb4 <UsageFault_Handler>

08001cb6 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001cb8:	4770      	bx	lr

08001cba <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001cba:	4770      	bx	lr

08001cbc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001cbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbe:	f7fe fae7 	bl	8000290 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001cc2:	f7fe fe2c 	bl	800091e <HAL_SYSTICK_IRQHandler>
 8001cc6:	bd08      	pop	{r3, pc}

08001cc8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <SystemInit+0x40>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <SystemInit+0x44>)
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001ce0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ce4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001cf4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001cf6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001cfa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <SystemInit+0x48>)
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	f8ff0000 	.word	0xf8ff0000
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d14:	b500      	push	{lr}
 8001d16:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8001d18:	4817      	ldr	r0, [pc, #92]	; (8001d78 <MX_TIM4_Init+0x64>)
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <MX_TIM4_Init+0x68>)
 8001d1c:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 8001d24:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d26:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d2a:	f7ff fcc7 	bl	80016bc <HAL_TIM_Base_Init>
 8001d2e:	b998      	cbnz	r0, 8001d58 <MX_TIM4_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d30:	a906      	add	r1, sp, #24
 8001d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d36:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d3a:	480f      	ldr	r0, [pc, #60]	; (8001d78 <MX_TIM4_Init+0x64>)
 8001d3c:	f7ff fbec 	bl	8001518 <HAL_TIM_ConfigClockSource>
 8001d40:	b978      	cbnz	r0, 8001d62 <MX_TIM4_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d48:	4669      	mov	r1, sp
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <MX_TIM4_Init+0x64>)
 8001d4c:	f7ff fdbc 	bl	80018c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d50:	b960      	cbnz	r0, 8001d6c <MX_TIM4_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001d52:	b007      	add	sp, #28
 8001d54:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001d58:	2166      	movs	r1, #102	; 0x66
 8001d5a:	4809      	ldr	r0, [pc, #36]	; (8001d80 <MX_TIM4_Init+0x6c>)
 8001d5c:	f7ff fef2 	bl	8001b44 <_Error_Handler>
 8001d60:	e7e6      	b.n	8001d30 <MX_TIM4_Init+0x1c>
    _Error_Handler(__FILE__, __LINE__);
 8001d62:	216c      	movs	r1, #108	; 0x6c
 8001d64:	4806      	ldr	r0, [pc, #24]	; (8001d80 <MX_TIM4_Init+0x6c>)
 8001d66:	f7ff feed 	bl	8001b44 <_Error_Handler>
 8001d6a:	e7ea      	b.n	8001d42 <MX_TIM4_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 8001d6c:	2173      	movs	r1, #115	; 0x73
 8001d6e:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_TIM4_Init+0x6c>)
 8001d70:	f7ff fee8 	bl	8001b44 <_Error_Handler>
}
 8001d74:	e7ed      	b.n	8001d52 <MX_TIM4_Init+0x3e>
 8001d76:	bf00      	nop
 8001d78:	20000110 	.word	0x20000110
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	08002fec 	.word	0x08002fec

08001d84 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d84:	b084      	sub	sp, #16

  if(tim_pwmHandle->Instance==TIM2)
 8001d86:	6803      	ldr	r3, [r0, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8c:	d007      	beq.n	8001d9e <HAL_TIM_PWM_MspInit+0x1a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM5)
 8001d8e:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <HAL_TIM_PWM_MspInit+0x60>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d010      	beq.n	8001db6 <HAL_TIM_PWM_MspInit+0x32>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM8)
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_TIM_PWM_MspInit+0x64>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d018      	beq.n	8001dcc <HAL_TIM_PWM_MspInit+0x48>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001d9a:	b004      	add	sp, #16
 8001d9c:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	61da      	str	r2, [r3, #28]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	9b01      	ldr	r3, [sp, #4]
 8001db4:	e7f1      	b.n	8001d9a <HAL_TIM_PWM_MspInit+0x16>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_TIM_PWM_MspInit+0x68>)
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	f042 0208 	orr.w	r2, r2, #8
 8001dbe:	61da      	str	r2, [r3, #28]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	9b02      	ldr	r3, [sp, #8]
 8001dca:	e7e6      	b.n	8001d9a <HAL_TIM_PWM_MspInit+0x16>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_TIM_PWM_MspInit+0x68>)
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ddc:	9303      	str	r3, [sp, #12]
 8001dde:	9b03      	ldr	r3, [sp, #12]
}
 8001de0:	e7db      	b.n	8001d9a <HAL_TIM_PWM_MspInit+0x16>
 8001de2:	bf00      	nop
 8001de4:	40000c00 	.word	0x40000c00
 8001de8:	40013400 	.word	0x40013400
 8001dec:	40021000 	.word	0x40021000

08001df0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 8001df0:	6802      	ldr	r2, [r0, #0]
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_TIM_Base_MspInit+0x28>)
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d000      	beq.n	8001dfa <HAL_TIM_Base_MspInit+0xa>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001df8:	4770      	bx	lr
{
 8001dfa:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dfc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	f042 0204 	orr.w	r2, r2, #4
 8001e06:	61da      	str	r2, [r3, #28]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	9b01      	ldr	r3, [sp, #4]
}
 8001e12:	b002      	add	sp, #8
 8001e14:	e7f0      	b.n	8001df8 <HAL_TIM_Base_MspInit+0x8>
 8001e16:	bf00      	nop
 8001e18:	40000800 	.word	0x40000800

08001e1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e1c:	b500      	push	{lr}
 8001e1e:	b085      	sub	sp, #20

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8001e20:	6803      	ldr	r3, [r0, #0]
 8001e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e26:	d008      	beq.n	8001e3a <HAL_TIM_MspPostInit+0x1e>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM5)
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_TIM_MspPostInit+0x70>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <HAL_TIM_MspPostInit+0x46>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8001e2e:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_TIM_MspPostInit+0x74>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d020      	beq.n	8001e76 <HAL_TIM_MspPostInit+0x5a>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001e34:	b005      	add	sp, #20
 8001e36:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3e:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e46:	4669      	mov	r1, sp
 8001e48:	4812      	ldr	r0, [pc, #72]	; (8001e94 <HAL_TIM_MspPostInit+0x78>)
 8001e4a:	f7fe fd6d 	bl	8000928 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_TIM_MspPostInit+0x7c>)
 8001e50:	6853      	ldr	r3, [r2, #4]
 8001e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e56:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5e:	6053      	str	r3, [r2, #4]
 8001e60:	e7e8      	b.n	8001e34 <HAL_TIM_MspPostInit+0x18>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e62:	2308      	movs	r3, #8
 8001e64:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	4669      	mov	r1, sp
 8001e6e:	480b      	ldr	r0, [pc, #44]	; (8001e9c <HAL_TIM_MspPostInit+0x80>)
 8001e70:	f7fe fd5a 	bl	8000928 <HAL_GPIO_Init>
 8001e74:	e7de      	b.n	8001e34 <HAL_TIM_MspPostInit+0x18>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e7a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e82:	4669      	mov	r1, sp
 8001e84:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <HAL_TIM_MspPostInit+0x84>)
 8001e86:	f7fe fd4f 	bl	8000928 <HAL_GPIO_Init>
}
 8001e8a:	e7d3      	b.n	8001e34 <HAL_TIM_MspPostInit+0x18>
 8001e8c:	40000c00 	.word	0x40000c00
 8001e90:	40013400 	.word	0x40013400
 8001e94:	40010c00 	.word	0x40010c00
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40011000 	.word	0x40011000

08001ea4 <MX_TIM2_Init>:
{
 8001ea4:	b500      	push	{lr}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
  htim2.Instance = TIM2;
 8001ea8:	481b      	ldr	r0, [pc, #108]	; (8001f18 <MX_TIM2_Init+0x74>)
 8001eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eae:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 12;
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eba:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ebe:	f7ff fc16 	bl	80016ee <HAL_TIM_PWM_Init>
 8001ec2:	b9c8      	cbnz	r0, 8001ef8 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eca:	a908      	add	r1, sp, #32
 8001ecc:	4812      	ldr	r0, [pc, #72]	; (8001f18 <MX_TIM2_Init+0x74>)
 8001ece:	f7ff fcfb 	bl	80018c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed2:	b9b0      	cbnz	r0, 8001f02 <MX_TIM2_Init+0x5e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed4:	2360      	movs	r3, #96	; 0x60
 8001ed6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001edc:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ede:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	a901      	add	r1, sp, #4
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <MX_TIM2_Init+0x74>)
 8001ee6:	f7ff fc55 	bl	8001794 <HAL_TIM_PWM_ConfigChannel>
 8001eea:	b978      	cbnz	r0, 8001f0c <MX_TIM2_Init+0x68>
  HAL_TIM_MspPostInit(&htim2);
 8001eec:	480a      	ldr	r0, [pc, #40]	; (8001f18 <MX_TIM2_Init+0x74>)
 8001eee:	f7ff ff95 	bl	8001e1c <HAL_TIM_MspPostInit>
}
 8001ef2:	b00b      	add	sp, #44	; 0x2c
 8001ef4:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001ef8:	2142      	movs	r1, #66	; 0x42
 8001efa:	4808      	ldr	r0, [pc, #32]	; (8001f1c <MX_TIM2_Init+0x78>)
 8001efc:	f7ff fe22 	bl	8001b44 <_Error_Handler>
 8001f00:	e7e0      	b.n	8001ec4 <MX_TIM2_Init+0x20>
    _Error_Handler(__FILE__, __LINE__);
 8001f02:	2149      	movs	r1, #73	; 0x49
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_TIM2_Init+0x78>)
 8001f06:	f7ff fe1d 	bl	8001b44 <_Error_Handler>
 8001f0a:	e7e3      	b.n	8001ed4 <MX_TIM2_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8001f0c:	2152      	movs	r1, #82	; 0x52
 8001f0e:	4803      	ldr	r0, [pc, #12]	; (8001f1c <MX_TIM2_Init+0x78>)
 8001f10:	f7ff fe18 	bl	8001b44 <_Error_Handler>
 8001f14:	e7ea      	b.n	8001eec <MX_TIM2_Init+0x48>
 8001f16:	bf00      	nop
 8001f18:	20000190 	.word	0x20000190
 8001f1c:	08002fec 	.word	0x08002fec

08001f20 <MX_TIM5_Init>:
{
 8001f20:	b500      	push	{lr}
 8001f22:	b08b      	sub	sp, #44	; 0x2c
  htim5.Instance = TIM5;
 8001f24:	481a      	ldr	r0, [pc, #104]	; (8001f90 <MX_TIM5_Init+0x70>)
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <MX_TIM5_Init+0x74>)
 8001f28:	6003      	str	r3, [r0, #0]
  htim5.Init.Prescaler = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 0;
 8001f30:	60c3      	str	r3, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f36:	f7ff fbda 	bl	80016ee <HAL_TIM_PWM_Init>
 8001f3a:	b9c8      	cbnz	r0, 8001f70 <MX_TIM5_Init+0x50>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f42:	a908      	add	r1, sp, #32
 8001f44:	4812      	ldr	r0, [pc, #72]	; (8001f90 <MX_TIM5_Init+0x70>)
 8001f46:	f7ff fcbf 	bl	80018c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	b9b0      	cbnz	r0, 8001f7a <MX_TIM5_Init+0x5a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f4c:	2360      	movs	r3, #96	; 0x60
 8001f4e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f54:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f56:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f58:	220c      	movs	r2, #12
 8001f5a:	a901      	add	r1, sp, #4
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <MX_TIM5_Init+0x70>)
 8001f5e:	f7ff fc19 	bl	8001794 <HAL_TIM_PWM_ConfigChannel>
 8001f62:	b978      	cbnz	r0, 8001f84 <MX_TIM5_Init+0x64>
  HAL_TIM_MspPostInit(&htim5);
 8001f64:	480a      	ldr	r0, [pc, #40]	; (8001f90 <MX_TIM5_Init+0x70>)
 8001f66:	f7ff ff59 	bl	8001e1c <HAL_TIM_MspPostInit>
}
 8001f6a:	b00b      	add	sp, #44	; 0x2c
 8001f6c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001f70:	2185      	movs	r1, #133	; 0x85
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <MX_TIM5_Init+0x78>)
 8001f74:	f7ff fde6 	bl	8001b44 <_Error_Handler>
 8001f78:	e7e0      	b.n	8001f3c <MX_TIM5_Init+0x1c>
    _Error_Handler(__FILE__, __LINE__);
 8001f7a:	218c      	movs	r1, #140	; 0x8c
 8001f7c:	4806      	ldr	r0, [pc, #24]	; (8001f98 <MX_TIM5_Init+0x78>)
 8001f7e:	f7ff fde1 	bl	8001b44 <_Error_Handler>
 8001f82:	e7e3      	b.n	8001f4c <MX_TIM5_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 8001f84:	2195      	movs	r1, #149	; 0x95
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_TIM5_Init+0x78>)
 8001f88:	f7ff fddc 	bl	8001b44 <_Error_Handler>
 8001f8c:	e7ea      	b.n	8001f64 <MX_TIM5_Init+0x44>
 8001f8e:	bf00      	nop
 8001f90:	20000150 	.word	0x20000150
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	08002fec 	.word	0x08002fec

08001f9c <MX_TIM8_Init>:
{
 8001f9c:	b500      	push	{lr}
 8001f9e:	b091      	sub	sp, #68	; 0x44
  htim8.Instance = TIM8;
 8001fa0:	4826      	ldr	r0, [pc, #152]	; (800203c <MX_TIM8_Init+0xa0>)
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <MX_TIM8_Init+0xa4>)
 8001fa4:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 12;
 8001fac:	220c      	movs	r2, #12
 8001fae:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb0:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fb2:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fb6:	f7ff fb9a 	bl	80016ee <HAL_TIM_PWM_Init>
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d12a      	bne.n	8002014 <MX_TIM8_Init+0x78>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fc4:	a90e      	add	r1, sp, #56	; 0x38
 8001fc6:	481d      	ldr	r0, [pc, #116]	; (800203c <MX_TIM8_Init+0xa0>)
 8001fc8:	f7ff fc7e 	bl	80018c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fcc:	bb38      	cbnz	r0, 800201e <MX_TIM8_Init+0x82>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fce:	2360      	movs	r3, #96	; 0x60
 8001fd0:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd6:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd8:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fda:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fdc:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	a907      	add	r1, sp, #28
 8001fe2:	4816      	ldr	r0, [pc, #88]	; (800203c <MX_TIM8_Init+0xa0>)
 8001fe4:	f7ff fbd6 	bl	8001794 <HAL_TIM_PWM_ConfigChannel>
 8001fe8:	b9f0      	cbnz	r0, 8002028 <MX_TIM8_Init+0x8c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fee:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ff0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ff4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffa:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ffc:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ffe:	4669      	mov	r1, sp
 8002000:	480e      	ldr	r0, [pc, #56]	; (800203c <MX_TIM8_Init+0xa0>)
 8002002:	f7ff fc35 	bl	8001870 <HAL_TIMEx_ConfigBreakDeadTime>
 8002006:	b9a0      	cbnz	r0, 8002032 <MX_TIM8_Init+0x96>
  HAL_TIM_MspPostInit(&htim8);
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <MX_TIM8_Init+0xa0>)
 800200a:	f7ff ff07 	bl	8001e1c <HAL_TIM_MspPostInit>
}
 800200e:	b011      	add	sp, #68	; 0x44
 8002010:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002014:	21ab      	movs	r1, #171	; 0xab
 8002016:	480b      	ldr	r0, [pc, #44]	; (8002044 <MX_TIM8_Init+0xa8>)
 8002018:	f7ff fd94 	bl	8001b44 <_Error_Handler>
 800201c:	e7cf      	b.n	8001fbe <MX_TIM8_Init+0x22>
    _Error_Handler(__FILE__, __LINE__);
 800201e:	21b2      	movs	r1, #178	; 0xb2
 8002020:	4808      	ldr	r0, [pc, #32]	; (8002044 <MX_TIM8_Init+0xa8>)
 8002022:	f7ff fd8f 	bl	8001b44 <_Error_Handler>
 8002026:	e7d2      	b.n	8001fce <MX_TIM8_Init+0x32>
    _Error_Handler(__FILE__, __LINE__);
 8002028:	21bd      	movs	r1, #189	; 0xbd
 800202a:	4806      	ldr	r0, [pc, #24]	; (8002044 <MX_TIM8_Init+0xa8>)
 800202c:	f7ff fd8a 	bl	8001b44 <_Error_Handler>
 8002030:	e7db      	b.n	8001fea <MX_TIM8_Init+0x4e>
    _Error_Handler(__FILE__, __LINE__);
 8002032:	21c9      	movs	r1, #201	; 0xc9
 8002034:	4803      	ldr	r0, [pc, #12]	; (8002044 <MX_TIM8_Init+0xa8>)
 8002036:	f7ff fd85 	bl	8001b44 <_Error_Handler>
 800203a:	e7e5      	b.n	8002008 <MX_TIM8_Init+0x6c>
 800203c:	200000d0 	.word	0x200000d0
 8002040:	40013400 	.word	0x40013400
 8002044:	08002fec 	.word	0x08002fec

08002048 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002048:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800204a:	e003      	b.n	8002054 <LoopCopyDataInit>

0800204c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800204e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002050:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002052:	3104      	adds	r1, #4

08002054 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002054:	480a      	ldr	r0, [pc, #40]	; (8002080 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002058:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800205a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800205c:	d3f6      	bcc.n	800204c <CopyDataInit>
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002060:	e002      	b.n	8002068 <LoopFillZerobss>

08002062 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002064:	f842 3b04 	str.w	r3, [r2], #4

08002068 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800206a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800206c:	d3f9      	bcc.n	8002062 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800206e:	f7ff fe2b 	bl	8001cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002072:	f000 f80f 	bl	8002094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002076:	f7ff fdb5 	bl	8001be4 <main>
  bx lr
 800207a:	4770      	bx	lr
  ldr r3, =_sidata
 800207c:	0800309c 	.word	0x0800309c
  ldr r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002084:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002088:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800208c:	200001d4 	.word	0x200001d4

08002090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC1_2_IRQHandler>
	...

08002094 <__libc_init_array>:
 8002094:	b570      	push	{r4, r5, r6, lr}
 8002096:	2500      	movs	r5, #0
 8002098:	4e0c      	ldr	r6, [pc, #48]	; (80020cc <__libc_init_array+0x38>)
 800209a:	4c0d      	ldr	r4, [pc, #52]	; (80020d0 <__libc_init_array+0x3c>)
 800209c:	1ba4      	subs	r4, r4, r6
 800209e:	10a4      	asrs	r4, r4, #2
 80020a0:	42a5      	cmp	r5, r4
 80020a2:	d109      	bne.n	80020b8 <__libc_init_array+0x24>
 80020a4:	f000 ff64 	bl	8002f70 <_init>
 80020a8:	2500      	movs	r5, #0
 80020aa:	4e0a      	ldr	r6, [pc, #40]	; (80020d4 <__libc_init_array+0x40>)
 80020ac:	4c0a      	ldr	r4, [pc, #40]	; (80020d8 <__libc_init_array+0x44>)
 80020ae:	1ba4      	subs	r4, r4, r6
 80020b0:	10a4      	asrs	r4, r4, #2
 80020b2:	42a5      	cmp	r5, r4
 80020b4:	d105      	bne.n	80020c2 <__libc_init_array+0x2e>
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
 80020b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020bc:	4798      	blx	r3
 80020be:	3501      	adds	r5, #1
 80020c0:	e7ee      	b.n	80020a0 <__libc_init_array+0xc>
 80020c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020c6:	4798      	blx	r3
 80020c8:	3501      	adds	r5, #1
 80020ca:	e7f2      	b.n	80020b2 <__libc_init_array+0x1e>
 80020cc:	08003094 	.word	0x08003094
 80020d0:	08003094 	.word	0x08003094
 80020d4:	08003094 	.word	0x08003094
 80020d8:	08003098 	.word	0x08003098

080020dc <iprintf>:
 80020dc:	b40f      	push	{r0, r1, r2, r3}
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <iprintf+0x2c>)
 80020e0:	b513      	push	{r0, r1, r4, lr}
 80020e2:	681c      	ldr	r4, [r3, #0]
 80020e4:	b124      	cbz	r4, 80020f0 <iprintf+0x14>
 80020e6:	69a3      	ldr	r3, [r4, #24]
 80020e8:	b913      	cbnz	r3, 80020f0 <iprintf+0x14>
 80020ea:	4620      	mov	r0, r4
 80020ec:	f000 f84e 	bl	800218c <__sinit>
 80020f0:	ab05      	add	r3, sp, #20
 80020f2:	9a04      	ldr	r2, [sp, #16]
 80020f4:	68a1      	ldr	r1, [r4, #8]
 80020f6:	4620      	mov	r0, r4
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	f000 f95f 	bl	80023bc <_vfiprintf_r>
 80020fe:	b002      	add	sp, #8
 8002100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002104:	b004      	add	sp, #16
 8002106:	4770      	bx	lr
 8002108:	20000010 	.word	0x20000010

0800210c <_cleanup_r>:
 800210c:	4901      	ldr	r1, [pc, #4]	; (8002114 <_cleanup_r+0x8>)
 800210e:	f000 b8a9 	b.w	8002264 <_fwalk_reent>
 8002112:	bf00      	nop
 8002114:	08002c95 	.word	0x08002c95

08002118 <std.isra.0>:
 8002118:	2300      	movs	r3, #0
 800211a:	b510      	push	{r4, lr}
 800211c:	4604      	mov	r4, r0
 800211e:	6003      	str	r3, [r0, #0]
 8002120:	6043      	str	r3, [r0, #4]
 8002122:	6083      	str	r3, [r0, #8]
 8002124:	8181      	strh	r1, [r0, #12]
 8002126:	6643      	str	r3, [r0, #100]	; 0x64
 8002128:	81c2      	strh	r2, [r0, #14]
 800212a:	6103      	str	r3, [r0, #16]
 800212c:	6143      	str	r3, [r0, #20]
 800212e:	6183      	str	r3, [r0, #24]
 8002130:	4619      	mov	r1, r3
 8002132:	2208      	movs	r2, #8
 8002134:	305c      	adds	r0, #92	; 0x5c
 8002136:	f000 f8b3 	bl	80022a0 <memset>
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <std.isra.0+0x38>)
 800213c:	6224      	str	r4, [r4, #32]
 800213e:	6263      	str	r3, [r4, #36]	; 0x24
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <std.isra.0+0x3c>)
 8002142:	62a3      	str	r3, [r4, #40]	; 0x28
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <std.isra.0+0x40>)
 8002146:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <std.isra.0+0x44>)
 800214a:	6323      	str	r3, [r4, #48]	; 0x30
 800214c:	bd10      	pop	{r4, pc}
 800214e:	bf00      	nop
 8002150:	08002939 	.word	0x08002939
 8002154:	0800295b 	.word	0x0800295b
 8002158:	08002993 	.word	0x08002993
 800215c:	080029b7 	.word	0x080029b7

08002160 <__sfmoreglue>:
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	2568      	movs	r5, #104	; 0x68
 8002164:	1e4a      	subs	r2, r1, #1
 8002166:	4355      	muls	r5, r2
 8002168:	460e      	mov	r6, r1
 800216a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800216e:	f000 f89f 	bl	80022b0 <_malloc_r>
 8002172:	4604      	mov	r4, r0
 8002174:	b140      	cbz	r0, 8002188 <__sfmoreglue+0x28>
 8002176:	2100      	movs	r1, #0
 8002178:	e880 0042 	stmia.w	r0, {r1, r6}
 800217c:	300c      	adds	r0, #12
 800217e:	60a0      	str	r0, [r4, #8]
 8002180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002184:	f000 f88c 	bl	80022a0 <memset>
 8002188:	4620      	mov	r0, r4
 800218a:	bd70      	pop	{r4, r5, r6, pc}

0800218c <__sinit>:
 800218c:	6983      	ldr	r3, [r0, #24]
 800218e:	b510      	push	{r4, lr}
 8002190:	4604      	mov	r4, r0
 8002192:	bb33      	cbnz	r3, 80021e2 <__sinit+0x56>
 8002194:	6483      	str	r3, [r0, #72]	; 0x48
 8002196:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002198:	6503      	str	r3, [r0, #80]	; 0x50
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <__sinit+0x58>)
 800219c:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <__sinit+0x5c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6282      	str	r2, [r0, #40]	; 0x28
 80021a2:	4298      	cmp	r0, r3
 80021a4:	bf04      	itt	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	6183      	streq	r3, [r0, #24]
 80021aa:	f000 f81f 	bl	80021ec <__sfp>
 80021ae:	6060      	str	r0, [r4, #4]
 80021b0:	4620      	mov	r0, r4
 80021b2:	f000 f81b 	bl	80021ec <__sfp>
 80021b6:	60a0      	str	r0, [r4, #8]
 80021b8:	4620      	mov	r0, r4
 80021ba:	f000 f817 	bl	80021ec <__sfp>
 80021be:	2200      	movs	r2, #0
 80021c0:	60e0      	str	r0, [r4, #12]
 80021c2:	2104      	movs	r1, #4
 80021c4:	6860      	ldr	r0, [r4, #4]
 80021c6:	f7ff ffa7 	bl	8002118 <std.isra.0>
 80021ca:	2201      	movs	r2, #1
 80021cc:	2109      	movs	r1, #9
 80021ce:	68a0      	ldr	r0, [r4, #8]
 80021d0:	f7ff ffa2 	bl	8002118 <std.isra.0>
 80021d4:	2202      	movs	r2, #2
 80021d6:	2112      	movs	r1, #18
 80021d8:	68e0      	ldr	r0, [r4, #12]
 80021da:	f7ff ff9d 	bl	8002118 <std.isra.0>
 80021de:	2301      	movs	r3, #1
 80021e0:	61a3      	str	r3, [r4, #24]
 80021e2:	bd10      	pop	{r4, pc}
 80021e4:	0800305c 	.word	0x0800305c
 80021e8:	0800210d 	.word	0x0800210d

080021ec <__sfp>:
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <__sfp+0x74>)
 80021f0:	4607      	mov	r7, r0
 80021f2:	681e      	ldr	r6, [r3, #0]
 80021f4:	69b3      	ldr	r3, [r6, #24]
 80021f6:	b913      	cbnz	r3, 80021fe <__sfp+0x12>
 80021f8:	4630      	mov	r0, r6
 80021fa:	f7ff ffc7 	bl	800218c <__sinit>
 80021fe:	3648      	adds	r6, #72	; 0x48
 8002200:	68b4      	ldr	r4, [r6, #8]
 8002202:	6873      	ldr	r3, [r6, #4]
 8002204:	3b01      	subs	r3, #1
 8002206:	d503      	bpl.n	8002210 <__sfp+0x24>
 8002208:	6833      	ldr	r3, [r6, #0]
 800220a:	b133      	cbz	r3, 800221a <__sfp+0x2e>
 800220c:	6836      	ldr	r6, [r6, #0]
 800220e:	e7f7      	b.n	8002200 <__sfp+0x14>
 8002210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002214:	b16d      	cbz	r5, 8002232 <__sfp+0x46>
 8002216:	3468      	adds	r4, #104	; 0x68
 8002218:	e7f4      	b.n	8002204 <__sfp+0x18>
 800221a:	2104      	movs	r1, #4
 800221c:	4638      	mov	r0, r7
 800221e:	f7ff ff9f 	bl	8002160 <__sfmoreglue>
 8002222:	6030      	str	r0, [r6, #0]
 8002224:	2800      	cmp	r0, #0
 8002226:	d1f1      	bne.n	800220c <__sfp+0x20>
 8002228:	230c      	movs	r3, #12
 800222a:	4604      	mov	r4, r0
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4620      	mov	r0, r4
 8002230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002236:	81e3      	strh	r3, [r4, #14]
 8002238:	2301      	movs	r3, #1
 800223a:	6665      	str	r5, [r4, #100]	; 0x64
 800223c:	81a3      	strh	r3, [r4, #12]
 800223e:	6025      	str	r5, [r4, #0]
 8002240:	60a5      	str	r5, [r4, #8]
 8002242:	6065      	str	r5, [r4, #4]
 8002244:	6125      	str	r5, [r4, #16]
 8002246:	6165      	str	r5, [r4, #20]
 8002248:	61a5      	str	r5, [r4, #24]
 800224a:	2208      	movs	r2, #8
 800224c:	4629      	mov	r1, r5
 800224e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002252:	f000 f825 	bl	80022a0 <memset>
 8002256:	6365      	str	r5, [r4, #52]	; 0x34
 8002258:	63a5      	str	r5, [r4, #56]	; 0x38
 800225a:	64a5      	str	r5, [r4, #72]	; 0x48
 800225c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800225e:	e7e6      	b.n	800222e <__sfp+0x42>
 8002260:	0800305c 	.word	0x0800305c

08002264 <_fwalk_reent>:
 8002264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002268:	4680      	mov	r8, r0
 800226a:	4689      	mov	r9, r1
 800226c:	2600      	movs	r6, #0
 800226e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002272:	b914      	cbnz	r4, 800227a <_fwalk_reent+0x16>
 8002274:	4630      	mov	r0, r6
 8002276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800227a:	68a5      	ldr	r5, [r4, #8]
 800227c:	6867      	ldr	r7, [r4, #4]
 800227e:	3f01      	subs	r7, #1
 8002280:	d501      	bpl.n	8002286 <_fwalk_reent+0x22>
 8002282:	6824      	ldr	r4, [r4, #0]
 8002284:	e7f5      	b.n	8002272 <_fwalk_reent+0xe>
 8002286:	89ab      	ldrh	r3, [r5, #12]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d907      	bls.n	800229c <_fwalk_reent+0x38>
 800228c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002290:	3301      	adds	r3, #1
 8002292:	d003      	beq.n	800229c <_fwalk_reent+0x38>
 8002294:	4629      	mov	r1, r5
 8002296:	4640      	mov	r0, r8
 8002298:	47c8      	blx	r9
 800229a:	4306      	orrs	r6, r0
 800229c:	3568      	adds	r5, #104	; 0x68
 800229e:	e7ee      	b.n	800227e <_fwalk_reent+0x1a>

080022a0 <memset>:
 80022a0:	4603      	mov	r3, r0
 80022a2:	4402      	add	r2, r0
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d100      	bne.n	80022aa <memset+0xa>
 80022a8:	4770      	bx	lr
 80022aa:	f803 1b01 	strb.w	r1, [r3], #1
 80022ae:	e7f9      	b.n	80022a4 <memset+0x4>

080022b0 <_malloc_r>:
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	1ccd      	adds	r5, r1, #3
 80022b4:	f025 0503 	bic.w	r5, r5, #3
 80022b8:	3508      	adds	r5, #8
 80022ba:	2d0c      	cmp	r5, #12
 80022bc:	bf38      	it	cc
 80022be:	250c      	movcc	r5, #12
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	4606      	mov	r6, r0
 80022c4:	db01      	blt.n	80022ca <_malloc_r+0x1a>
 80022c6:	42a9      	cmp	r1, r5
 80022c8:	d903      	bls.n	80022d2 <_malloc_r+0x22>
 80022ca:	230c      	movs	r3, #12
 80022cc:	6033      	str	r3, [r6, #0]
 80022ce:	2000      	movs	r0, #0
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
 80022d2:	f000 fd8d 	bl	8002df0 <__malloc_lock>
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <_malloc_r+0xb4>)
 80022d8:	6814      	ldr	r4, [r2, #0]
 80022da:	4621      	mov	r1, r4
 80022dc:	b991      	cbnz	r1, 8002304 <_malloc_r+0x54>
 80022de:	4c22      	ldr	r4, [pc, #136]	; (8002368 <_malloc_r+0xb8>)
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	b91b      	cbnz	r3, 80022ec <_malloc_r+0x3c>
 80022e4:	4630      	mov	r0, r6
 80022e6:	f000 fb17 	bl	8002918 <_sbrk_r>
 80022ea:	6020      	str	r0, [r4, #0]
 80022ec:	4629      	mov	r1, r5
 80022ee:	4630      	mov	r0, r6
 80022f0:	f000 fb12 	bl	8002918 <_sbrk_r>
 80022f4:	1c43      	adds	r3, r0, #1
 80022f6:	d126      	bne.n	8002346 <_malloc_r+0x96>
 80022f8:	230c      	movs	r3, #12
 80022fa:	4630      	mov	r0, r6
 80022fc:	6033      	str	r3, [r6, #0]
 80022fe:	f000 fd78 	bl	8002df2 <__malloc_unlock>
 8002302:	e7e4      	b.n	80022ce <_malloc_r+0x1e>
 8002304:	680b      	ldr	r3, [r1, #0]
 8002306:	1b5b      	subs	r3, r3, r5
 8002308:	d41a      	bmi.n	8002340 <_malloc_r+0x90>
 800230a:	2b0b      	cmp	r3, #11
 800230c:	d90f      	bls.n	800232e <_malloc_r+0x7e>
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	18cc      	adds	r4, r1, r3
 8002312:	50cd      	str	r5, [r1, r3]
 8002314:	4630      	mov	r0, r6
 8002316:	f000 fd6c 	bl	8002df2 <__malloc_unlock>
 800231a:	f104 000b 	add.w	r0, r4, #11
 800231e:	1d23      	adds	r3, r4, #4
 8002320:	f020 0007 	bic.w	r0, r0, #7
 8002324:	1ac3      	subs	r3, r0, r3
 8002326:	d01b      	beq.n	8002360 <_malloc_r+0xb0>
 8002328:	425a      	negs	r2, r3
 800232a:	50e2      	str	r2, [r4, r3]
 800232c:	bd70      	pop	{r4, r5, r6, pc}
 800232e:	428c      	cmp	r4, r1
 8002330:	bf0b      	itete	eq
 8002332:	6863      	ldreq	r3, [r4, #4]
 8002334:	684b      	ldrne	r3, [r1, #4]
 8002336:	6013      	streq	r3, [r2, #0]
 8002338:	6063      	strne	r3, [r4, #4]
 800233a:	bf18      	it	ne
 800233c:	460c      	movne	r4, r1
 800233e:	e7e9      	b.n	8002314 <_malloc_r+0x64>
 8002340:	460c      	mov	r4, r1
 8002342:	6849      	ldr	r1, [r1, #4]
 8002344:	e7ca      	b.n	80022dc <_malloc_r+0x2c>
 8002346:	1cc4      	adds	r4, r0, #3
 8002348:	f024 0403 	bic.w	r4, r4, #3
 800234c:	42a0      	cmp	r0, r4
 800234e:	d005      	beq.n	800235c <_malloc_r+0xac>
 8002350:	1a21      	subs	r1, r4, r0
 8002352:	4630      	mov	r0, r6
 8002354:	f000 fae0 	bl	8002918 <_sbrk_r>
 8002358:	3001      	adds	r0, #1
 800235a:	d0cd      	beq.n	80022f8 <_malloc_r+0x48>
 800235c:	6025      	str	r5, [r4, #0]
 800235e:	e7d9      	b.n	8002314 <_malloc_r+0x64>
 8002360:	bd70      	pop	{r4, r5, r6, pc}
 8002362:	bf00      	nop
 8002364:	20000090 	.word	0x20000090
 8002368:	20000094 	.word	0x20000094

0800236c <__sfputc_r>:
 800236c:	6893      	ldr	r3, [r2, #8]
 800236e:	b410      	push	{r4}
 8002370:	3b01      	subs	r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	6093      	str	r3, [r2, #8]
 8002376:	da08      	bge.n	800238a <__sfputc_r+0x1e>
 8002378:	6994      	ldr	r4, [r2, #24]
 800237a:	42a3      	cmp	r3, r4
 800237c:	db02      	blt.n	8002384 <__sfputc_r+0x18>
 800237e:	b2cb      	uxtb	r3, r1
 8002380:	2b0a      	cmp	r3, #10
 8002382:	d102      	bne.n	800238a <__sfputc_r+0x1e>
 8002384:	bc10      	pop	{r4}
 8002386:	f000 bb1b 	b.w	80029c0 <__swbuf_r>
 800238a:	6813      	ldr	r3, [r2, #0]
 800238c:	1c58      	adds	r0, r3, #1
 800238e:	6010      	str	r0, [r2, #0]
 8002390:	7019      	strb	r1, [r3, #0]
 8002392:	b2c8      	uxtb	r0, r1
 8002394:	bc10      	pop	{r4}
 8002396:	4770      	bx	lr

08002398 <__sfputs_r>:
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239a:	4606      	mov	r6, r0
 800239c:	460f      	mov	r7, r1
 800239e:	4614      	mov	r4, r2
 80023a0:	18d5      	adds	r5, r2, r3
 80023a2:	42ac      	cmp	r4, r5
 80023a4:	d101      	bne.n	80023aa <__sfputs_r+0x12>
 80023a6:	2000      	movs	r0, #0
 80023a8:	e007      	b.n	80023ba <__sfputs_r+0x22>
 80023aa:	463a      	mov	r2, r7
 80023ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023b0:	4630      	mov	r0, r6
 80023b2:	f7ff ffdb 	bl	800236c <__sfputc_r>
 80023b6:	1c43      	adds	r3, r0, #1
 80023b8:	d1f3      	bne.n	80023a2 <__sfputs_r+0xa>
 80023ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023bc <_vfiprintf_r>:
 80023bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c0:	b09d      	sub	sp, #116	; 0x74
 80023c2:	460c      	mov	r4, r1
 80023c4:	4617      	mov	r7, r2
 80023c6:	9303      	str	r3, [sp, #12]
 80023c8:	4606      	mov	r6, r0
 80023ca:	b118      	cbz	r0, 80023d4 <_vfiprintf_r+0x18>
 80023cc:	6983      	ldr	r3, [r0, #24]
 80023ce:	b90b      	cbnz	r3, 80023d4 <_vfiprintf_r+0x18>
 80023d0:	f7ff fedc 	bl	800218c <__sinit>
 80023d4:	4b7c      	ldr	r3, [pc, #496]	; (80025c8 <_vfiprintf_r+0x20c>)
 80023d6:	429c      	cmp	r4, r3
 80023d8:	d157      	bne.n	800248a <_vfiprintf_r+0xce>
 80023da:	6874      	ldr	r4, [r6, #4]
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	0718      	lsls	r0, r3, #28
 80023e0:	d55d      	bpl.n	800249e <_vfiprintf_r+0xe2>
 80023e2:	6923      	ldr	r3, [r4, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05a      	beq.n	800249e <_vfiprintf_r+0xe2>
 80023e8:	2300      	movs	r3, #0
 80023ea:	9309      	str	r3, [sp, #36]	; 0x24
 80023ec:	2320      	movs	r3, #32
 80023ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023f2:	2330      	movs	r3, #48	; 0x30
 80023f4:	f04f 0b01 	mov.w	fp, #1
 80023f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023fc:	46b8      	mov	r8, r7
 80023fe:	4645      	mov	r5, r8
 8002400:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d155      	bne.n	80024b4 <_vfiprintf_r+0xf8>
 8002408:	ebb8 0a07 	subs.w	sl, r8, r7
 800240c:	d00b      	beq.n	8002426 <_vfiprintf_r+0x6a>
 800240e:	4653      	mov	r3, sl
 8002410:	463a      	mov	r2, r7
 8002412:	4621      	mov	r1, r4
 8002414:	4630      	mov	r0, r6
 8002416:	f7ff ffbf 	bl	8002398 <__sfputs_r>
 800241a:	3001      	adds	r0, #1
 800241c:	f000 80c4 	beq.w	80025a8 <_vfiprintf_r+0x1ec>
 8002420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002422:	4453      	add	r3, sl
 8002424:	9309      	str	r3, [sp, #36]	; 0x24
 8002426:	f898 3000 	ldrb.w	r3, [r8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80bc 	beq.w	80025a8 <_vfiprintf_r+0x1ec>
 8002430:	2300      	movs	r3, #0
 8002432:	f04f 32ff 	mov.w	r2, #4294967295
 8002436:	9304      	str	r3, [sp, #16]
 8002438:	9307      	str	r3, [sp, #28]
 800243a:	9205      	str	r2, [sp, #20]
 800243c:	9306      	str	r3, [sp, #24]
 800243e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002442:	931a      	str	r3, [sp, #104]	; 0x68
 8002444:	2205      	movs	r2, #5
 8002446:	7829      	ldrb	r1, [r5, #0]
 8002448:	4860      	ldr	r0, [pc, #384]	; (80025cc <_vfiprintf_r+0x210>)
 800244a:	f000 fcc3 	bl	8002dd4 <memchr>
 800244e:	f105 0801 	add.w	r8, r5, #1
 8002452:	9b04      	ldr	r3, [sp, #16]
 8002454:	2800      	cmp	r0, #0
 8002456:	d131      	bne.n	80024bc <_vfiprintf_r+0x100>
 8002458:	06d9      	lsls	r1, r3, #27
 800245a:	bf44      	itt	mi
 800245c:	2220      	movmi	r2, #32
 800245e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002462:	071a      	lsls	r2, r3, #28
 8002464:	bf44      	itt	mi
 8002466:	222b      	movmi	r2, #43	; 0x2b
 8002468:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800246c:	782a      	ldrb	r2, [r5, #0]
 800246e:	2a2a      	cmp	r2, #42	; 0x2a
 8002470:	d02c      	beq.n	80024cc <_vfiprintf_r+0x110>
 8002472:	2100      	movs	r1, #0
 8002474:	200a      	movs	r0, #10
 8002476:	9a07      	ldr	r2, [sp, #28]
 8002478:	46a8      	mov	r8, r5
 800247a:	f898 3000 	ldrb.w	r3, [r8]
 800247e:	3501      	adds	r5, #1
 8002480:	3b30      	subs	r3, #48	; 0x30
 8002482:	2b09      	cmp	r3, #9
 8002484:	d96d      	bls.n	8002562 <_vfiprintf_r+0x1a6>
 8002486:	b371      	cbz	r1, 80024e6 <_vfiprintf_r+0x12a>
 8002488:	e026      	b.n	80024d8 <_vfiprintf_r+0x11c>
 800248a:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <_vfiprintf_r+0x214>)
 800248c:	429c      	cmp	r4, r3
 800248e:	d101      	bne.n	8002494 <_vfiprintf_r+0xd8>
 8002490:	68b4      	ldr	r4, [r6, #8]
 8002492:	e7a3      	b.n	80023dc <_vfiprintf_r+0x20>
 8002494:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <_vfiprintf_r+0x218>)
 8002496:	429c      	cmp	r4, r3
 8002498:	bf08      	it	eq
 800249a:	68f4      	ldreq	r4, [r6, #12]
 800249c:	e79e      	b.n	80023dc <_vfiprintf_r+0x20>
 800249e:	4621      	mov	r1, r4
 80024a0:	4630      	mov	r0, r6
 80024a2:	f000 faf1 	bl	8002a88 <__swsetup_r>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	d09e      	beq.n	80023e8 <_vfiprintf_r+0x2c>
 80024aa:	f04f 30ff 	mov.w	r0, #4294967295
 80024ae:	b01d      	add	sp, #116	; 0x74
 80024b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b4:	2b25      	cmp	r3, #37	; 0x25
 80024b6:	d0a7      	beq.n	8002408 <_vfiprintf_r+0x4c>
 80024b8:	46a8      	mov	r8, r5
 80024ba:	e7a0      	b.n	80023fe <_vfiprintf_r+0x42>
 80024bc:	4a43      	ldr	r2, [pc, #268]	; (80025cc <_vfiprintf_r+0x210>)
 80024be:	4645      	mov	r5, r8
 80024c0:	1a80      	subs	r0, r0, r2
 80024c2:	fa0b f000 	lsl.w	r0, fp, r0
 80024c6:	4318      	orrs	r0, r3
 80024c8:	9004      	str	r0, [sp, #16]
 80024ca:	e7bb      	b.n	8002444 <_vfiprintf_r+0x88>
 80024cc:	9a03      	ldr	r2, [sp, #12]
 80024ce:	1d11      	adds	r1, r2, #4
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	9103      	str	r1, [sp, #12]
 80024d4:	2a00      	cmp	r2, #0
 80024d6:	db01      	blt.n	80024dc <_vfiprintf_r+0x120>
 80024d8:	9207      	str	r2, [sp, #28]
 80024da:	e004      	b.n	80024e6 <_vfiprintf_r+0x12a>
 80024dc:	4252      	negs	r2, r2
 80024de:	f043 0302 	orr.w	r3, r3, #2
 80024e2:	9207      	str	r2, [sp, #28]
 80024e4:	9304      	str	r3, [sp, #16]
 80024e6:	f898 3000 	ldrb.w	r3, [r8]
 80024ea:	2b2e      	cmp	r3, #46	; 0x2e
 80024ec:	d110      	bne.n	8002510 <_vfiprintf_r+0x154>
 80024ee:	f898 3001 	ldrb.w	r3, [r8, #1]
 80024f2:	f108 0101 	add.w	r1, r8, #1
 80024f6:	2b2a      	cmp	r3, #42	; 0x2a
 80024f8:	d137      	bne.n	800256a <_vfiprintf_r+0x1ae>
 80024fa:	9b03      	ldr	r3, [sp, #12]
 80024fc:	f108 0802 	add.w	r8, r8, #2
 8002500:	1d1a      	adds	r2, r3, #4
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	9203      	str	r2, [sp, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	bfb8      	it	lt
 800250a:	f04f 33ff 	movlt.w	r3, #4294967295
 800250e:	9305      	str	r3, [sp, #20]
 8002510:	4d31      	ldr	r5, [pc, #196]	; (80025d8 <_vfiprintf_r+0x21c>)
 8002512:	2203      	movs	r2, #3
 8002514:	f898 1000 	ldrb.w	r1, [r8]
 8002518:	4628      	mov	r0, r5
 800251a:	f000 fc5b 	bl	8002dd4 <memchr>
 800251e:	b140      	cbz	r0, 8002532 <_vfiprintf_r+0x176>
 8002520:	2340      	movs	r3, #64	; 0x40
 8002522:	1b40      	subs	r0, r0, r5
 8002524:	fa03 f000 	lsl.w	r0, r3, r0
 8002528:	9b04      	ldr	r3, [sp, #16]
 800252a:	f108 0801 	add.w	r8, r8, #1
 800252e:	4303      	orrs	r3, r0
 8002530:	9304      	str	r3, [sp, #16]
 8002532:	f898 1000 	ldrb.w	r1, [r8]
 8002536:	2206      	movs	r2, #6
 8002538:	4828      	ldr	r0, [pc, #160]	; (80025dc <_vfiprintf_r+0x220>)
 800253a:	f108 0701 	add.w	r7, r8, #1
 800253e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002542:	f000 fc47 	bl	8002dd4 <memchr>
 8002546:	2800      	cmp	r0, #0
 8002548:	d034      	beq.n	80025b4 <_vfiprintf_r+0x1f8>
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <_vfiprintf_r+0x224>)
 800254c:	bb03      	cbnz	r3, 8002590 <_vfiprintf_r+0x1d4>
 800254e:	9b03      	ldr	r3, [sp, #12]
 8002550:	3307      	adds	r3, #7
 8002552:	f023 0307 	bic.w	r3, r3, #7
 8002556:	3308      	adds	r3, #8
 8002558:	9303      	str	r3, [sp, #12]
 800255a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800255c:	444b      	add	r3, r9
 800255e:	9309      	str	r3, [sp, #36]	; 0x24
 8002560:	e74c      	b.n	80023fc <_vfiprintf_r+0x40>
 8002562:	fb00 3202 	mla	r2, r0, r2, r3
 8002566:	2101      	movs	r1, #1
 8002568:	e786      	b.n	8002478 <_vfiprintf_r+0xbc>
 800256a:	2300      	movs	r3, #0
 800256c:	250a      	movs	r5, #10
 800256e:	4618      	mov	r0, r3
 8002570:	9305      	str	r3, [sp, #20]
 8002572:	4688      	mov	r8, r1
 8002574:	f898 2000 	ldrb.w	r2, [r8]
 8002578:	3101      	adds	r1, #1
 800257a:	3a30      	subs	r2, #48	; 0x30
 800257c:	2a09      	cmp	r2, #9
 800257e:	d903      	bls.n	8002588 <_vfiprintf_r+0x1cc>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0c5      	beq.n	8002510 <_vfiprintf_r+0x154>
 8002584:	9005      	str	r0, [sp, #20]
 8002586:	e7c3      	b.n	8002510 <_vfiprintf_r+0x154>
 8002588:	fb05 2000 	mla	r0, r5, r0, r2
 800258c:	2301      	movs	r3, #1
 800258e:	e7f0      	b.n	8002572 <_vfiprintf_r+0x1b6>
 8002590:	ab03      	add	r3, sp, #12
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4622      	mov	r2, r4
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <_vfiprintf_r+0x228>)
 8002598:	a904      	add	r1, sp, #16
 800259a:	4630      	mov	r0, r6
 800259c:	f3af 8000 	nop.w
 80025a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80025a4:	4681      	mov	r9, r0
 80025a6:	d1d8      	bne.n	800255a <_vfiprintf_r+0x19e>
 80025a8:	89a3      	ldrh	r3, [r4, #12]
 80025aa:	065b      	lsls	r3, r3, #25
 80025ac:	f53f af7d 	bmi.w	80024aa <_vfiprintf_r+0xee>
 80025b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025b2:	e77c      	b.n	80024ae <_vfiprintf_r+0xf2>
 80025b4:	ab03      	add	r3, sp, #12
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4622      	mov	r2, r4
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <_vfiprintf_r+0x228>)
 80025bc:	a904      	add	r1, sp, #16
 80025be:	4630      	mov	r0, r6
 80025c0:	f000 f88a 	bl	80026d8 <_printf_i>
 80025c4:	e7ec      	b.n	80025a0 <_vfiprintf_r+0x1e4>
 80025c6:	bf00      	nop
 80025c8:	0800301c 	.word	0x0800301c
 80025cc:	08003060 	.word	0x08003060
 80025d0:	0800303c 	.word	0x0800303c
 80025d4:	08002ffc 	.word	0x08002ffc
 80025d8:	08003066 	.word	0x08003066
 80025dc:	0800306a 	.word	0x0800306a
 80025e0:	00000000 	.word	0x00000000
 80025e4:	08002399 	.word	0x08002399

080025e8 <_printf_common>:
 80025e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025ec:	4691      	mov	r9, r2
 80025ee:	461f      	mov	r7, r3
 80025f0:	688a      	ldr	r2, [r1, #8]
 80025f2:	690b      	ldr	r3, [r1, #16]
 80025f4:	4606      	mov	r6, r0
 80025f6:	4293      	cmp	r3, r2
 80025f8:	bfb8      	it	lt
 80025fa:	4613      	movlt	r3, r2
 80025fc:	f8c9 3000 	str.w	r3, [r9]
 8002600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002604:	460c      	mov	r4, r1
 8002606:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800260a:	b112      	cbz	r2, 8002612 <_printf_common+0x2a>
 800260c:	3301      	adds	r3, #1
 800260e:	f8c9 3000 	str.w	r3, [r9]
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	0699      	lsls	r1, r3, #26
 8002616:	bf42      	ittt	mi
 8002618:	f8d9 3000 	ldrmi.w	r3, [r9]
 800261c:	3302      	addmi	r3, #2
 800261e:	f8c9 3000 	strmi.w	r3, [r9]
 8002622:	6825      	ldr	r5, [r4, #0]
 8002624:	f015 0506 	ands.w	r5, r5, #6
 8002628:	d107      	bne.n	800263a <_printf_common+0x52>
 800262a:	f104 0a19 	add.w	sl, r4, #25
 800262e:	68e3      	ldr	r3, [r4, #12]
 8002630:	f8d9 2000 	ldr.w	r2, [r9]
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	429d      	cmp	r5, r3
 8002638:	db2a      	blt.n	8002690 <_printf_common+0xa8>
 800263a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800263e:	6822      	ldr	r2, [r4, #0]
 8002640:	3300      	adds	r3, #0
 8002642:	bf18      	it	ne
 8002644:	2301      	movne	r3, #1
 8002646:	0692      	lsls	r2, r2, #26
 8002648:	d42f      	bmi.n	80026aa <_printf_common+0xc2>
 800264a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800264e:	4639      	mov	r1, r7
 8002650:	4630      	mov	r0, r6
 8002652:	47c0      	blx	r8
 8002654:	3001      	adds	r0, #1
 8002656:	d022      	beq.n	800269e <_printf_common+0xb6>
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	68e5      	ldr	r5, [r4, #12]
 800265c:	f003 0306 	and.w	r3, r3, #6
 8002660:	2b04      	cmp	r3, #4
 8002662:	bf18      	it	ne
 8002664:	2500      	movne	r5, #0
 8002666:	f8d9 2000 	ldr.w	r2, [r9]
 800266a:	f04f 0900 	mov.w	r9, #0
 800266e:	bf08      	it	eq
 8002670:	1aad      	subeq	r5, r5, r2
 8002672:	68a3      	ldr	r3, [r4, #8]
 8002674:	6922      	ldr	r2, [r4, #16]
 8002676:	bf08      	it	eq
 8002678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800267c:	4293      	cmp	r3, r2
 800267e:	bfc4      	itt	gt
 8002680:	1a9b      	subgt	r3, r3, r2
 8002682:	18ed      	addgt	r5, r5, r3
 8002684:	341a      	adds	r4, #26
 8002686:	454d      	cmp	r5, r9
 8002688:	d11b      	bne.n	80026c2 <_printf_common+0xda>
 800268a:	2000      	movs	r0, #0
 800268c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002690:	2301      	movs	r3, #1
 8002692:	4652      	mov	r2, sl
 8002694:	4639      	mov	r1, r7
 8002696:	4630      	mov	r0, r6
 8002698:	47c0      	blx	r8
 800269a:	3001      	adds	r0, #1
 800269c:	d103      	bne.n	80026a6 <_printf_common+0xbe>
 800269e:	f04f 30ff 	mov.w	r0, #4294967295
 80026a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a6:	3501      	adds	r5, #1
 80026a8:	e7c1      	b.n	800262e <_printf_common+0x46>
 80026aa:	2030      	movs	r0, #48	; 0x30
 80026ac:	18e1      	adds	r1, r4, r3
 80026ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026b8:	4422      	add	r2, r4
 80026ba:	3302      	adds	r3, #2
 80026bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026c0:	e7c3      	b.n	800264a <_printf_common+0x62>
 80026c2:	2301      	movs	r3, #1
 80026c4:	4622      	mov	r2, r4
 80026c6:	4639      	mov	r1, r7
 80026c8:	4630      	mov	r0, r6
 80026ca:	47c0      	blx	r8
 80026cc:	3001      	adds	r0, #1
 80026ce:	d0e6      	beq.n	800269e <_printf_common+0xb6>
 80026d0:	f109 0901 	add.w	r9, r9, #1
 80026d4:	e7d7      	b.n	8002686 <_printf_common+0x9e>
	...

080026d8 <_printf_i>:
 80026d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026dc:	4617      	mov	r7, r2
 80026de:	7e0a      	ldrb	r2, [r1, #24]
 80026e0:	b085      	sub	sp, #20
 80026e2:	2a6e      	cmp	r2, #110	; 0x6e
 80026e4:	4698      	mov	r8, r3
 80026e6:	4606      	mov	r6, r0
 80026e8:	460c      	mov	r4, r1
 80026ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80026f0:	f000 80bc 	beq.w	800286c <_printf_i+0x194>
 80026f4:	d81a      	bhi.n	800272c <_printf_i+0x54>
 80026f6:	2a63      	cmp	r2, #99	; 0x63
 80026f8:	d02e      	beq.n	8002758 <_printf_i+0x80>
 80026fa:	d80a      	bhi.n	8002712 <_printf_i+0x3a>
 80026fc:	2a00      	cmp	r2, #0
 80026fe:	f000 80c8 	beq.w	8002892 <_printf_i+0x1ba>
 8002702:	2a58      	cmp	r2, #88	; 0x58
 8002704:	f000 808a 	beq.w	800281c <_printf_i+0x144>
 8002708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800270c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002710:	e02a      	b.n	8002768 <_printf_i+0x90>
 8002712:	2a64      	cmp	r2, #100	; 0x64
 8002714:	d001      	beq.n	800271a <_printf_i+0x42>
 8002716:	2a69      	cmp	r2, #105	; 0x69
 8002718:	d1f6      	bne.n	8002708 <_printf_i+0x30>
 800271a:	6821      	ldr	r1, [r4, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002722:	d023      	beq.n	800276c <_printf_i+0x94>
 8002724:	1d11      	adds	r1, r2, #4
 8002726:	6019      	str	r1, [r3, #0]
 8002728:	6813      	ldr	r3, [r2, #0]
 800272a:	e027      	b.n	800277c <_printf_i+0xa4>
 800272c:	2a73      	cmp	r2, #115	; 0x73
 800272e:	f000 80b4 	beq.w	800289a <_printf_i+0x1c2>
 8002732:	d808      	bhi.n	8002746 <_printf_i+0x6e>
 8002734:	2a6f      	cmp	r2, #111	; 0x6f
 8002736:	d02a      	beq.n	800278e <_printf_i+0xb6>
 8002738:	2a70      	cmp	r2, #112	; 0x70
 800273a:	d1e5      	bne.n	8002708 <_printf_i+0x30>
 800273c:	680a      	ldr	r2, [r1, #0]
 800273e:	f042 0220 	orr.w	r2, r2, #32
 8002742:	600a      	str	r2, [r1, #0]
 8002744:	e003      	b.n	800274e <_printf_i+0x76>
 8002746:	2a75      	cmp	r2, #117	; 0x75
 8002748:	d021      	beq.n	800278e <_printf_i+0xb6>
 800274a:	2a78      	cmp	r2, #120	; 0x78
 800274c:	d1dc      	bne.n	8002708 <_printf_i+0x30>
 800274e:	2278      	movs	r2, #120	; 0x78
 8002750:	496f      	ldr	r1, [pc, #444]	; (8002910 <_printf_i+0x238>)
 8002752:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002756:	e064      	b.n	8002822 <_printf_i+0x14a>
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800275e:	1d11      	adds	r1, r2, #4
 8002760:	6019      	str	r1, [r3, #0]
 8002762:	6813      	ldr	r3, [r2, #0]
 8002764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002768:	2301      	movs	r3, #1
 800276a:	e0a3      	b.n	80028b4 <_printf_i+0x1dc>
 800276c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002770:	f102 0104 	add.w	r1, r2, #4
 8002774:	6019      	str	r1, [r3, #0]
 8002776:	d0d7      	beq.n	8002728 <_printf_i+0x50>
 8002778:	f9b2 3000 	ldrsh.w	r3, [r2]
 800277c:	2b00      	cmp	r3, #0
 800277e:	da03      	bge.n	8002788 <_printf_i+0xb0>
 8002780:	222d      	movs	r2, #45	; 0x2d
 8002782:	425b      	negs	r3, r3
 8002784:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002788:	4962      	ldr	r1, [pc, #392]	; (8002914 <_printf_i+0x23c>)
 800278a:	220a      	movs	r2, #10
 800278c:	e017      	b.n	80027be <_printf_i+0xe6>
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	6819      	ldr	r1, [r3, #0]
 8002792:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002796:	d003      	beq.n	80027a0 <_printf_i+0xc8>
 8002798:	1d08      	adds	r0, r1, #4
 800279a:	6018      	str	r0, [r3, #0]
 800279c:	680b      	ldr	r3, [r1, #0]
 800279e:	e006      	b.n	80027ae <_printf_i+0xd6>
 80027a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027a4:	f101 0004 	add.w	r0, r1, #4
 80027a8:	6018      	str	r0, [r3, #0]
 80027aa:	d0f7      	beq.n	800279c <_printf_i+0xc4>
 80027ac:	880b      	ldrh	r3, [r1, #0]
 80027ae:	2a6f      	cmp	r2, #111	; 0x6f
 80027b0:	bf14      	ite	ne
 80027b2:	220a      	movne	r2, #10
 80027b4:	2208      	moveq	r2, #8
 80027b6:	4957      	ldr	r1, [pc, #348]	; (8002914 <_printf_i+0x23c>)
 80027b8:	2000      	movs	r0, #0
 80027ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80027be:	6865      	ldr	r5, [r4, #4]
 80027c0:	2d00      	cmp	r5, #0
 80027c2:	60a5      	str	r5, [r4, #8]
 80027c4:	f2c0 809c 	blt.w	8002900 <_printf_i+0x228>
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	f020 0004 	bic.w	r0, r0, #4
 80027ce:	6020      	str	r0, [r4, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d13f      	bne.n	8002854 <_printf_i+0x17c>
 80027d4:	2d00      	cmp	r5, #0
 80027d6:	f040 8095 	bne.w	8002904 <_printf_i+0x22c>
 80027da:	4675      	mov	r5, lr
 80027dc:	2a08      	cmp	r2, #8
 80027de:	d10b      	bne.n	80027f8 <_printf_i+0x120>
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	07da      	lsls	r2, r3, #31
 80027e4:	d508      	bpl.n	80027f8 <_printf_i+0x120>
 80027e6:	6923      	ldr	r3, [r4, #16]
 80027e8:	6862      	ldr	r2, [r4, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	bfde      	ittt	le
 80027ee:	2330      	movle	r3, #48	; 0x30
 80027f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027f8:	ebae 0305 	sub.w	r3, lr, r5
 80027fc:	6123      	str	r3, [r4, #16]
 80027fe:	f8cd 8000 	str.w	r8, [sp]
 8002802:	463b      	mov	r3, r7
 8002804:	aa03      	add	r2, sp, #12
 8002806:	4621      	mov	r1, r4
 8002808:	4630      	mov	r0, r6
 800280a:	f7ff feed 	bl	80025e8 <_printf_common>
 800280e:	3001      	adds	r0, #1
 8002810:	d155      	bne.n	80028be <_printf_i+0x1e6>
 8002812:	f04f 30ff 	mov.w	r0, #4294967295
 8002816:	b005      	add	sp, #20
 8002818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800281c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002820:	493c      	ldr	r1, [pc, #240]	; (8002914 <_printf_i+0x23c>)
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	f012 0f80 	tst.w	r2, #128	; 0x80
 800282a:	f100 0504 	add.w	r5, r0, #4
 800282e:	601d      	str	r5, [r3, #0]
 8002830:	d001      	beq.n	8002836 <_printf_i+0x15e>
 8002832:	6803      	ldr	r3, [r0, #0]
 8002834:	e002      	b.n	800283c <_printf_i+0x164>
 8002836:	0655      	lsls	r5, r2, #25
 8002838:	d5fb      	bpl.n	8002832 <_printf_i+0x15a>
 800283a:	8803      	ldrh	r3, [r0, #0]
 800283c:	07d0      	lsls	r0, r2, #31
 800283e:	bf44      	itt	mi
 8002840:	f042 0220 	orrmi.w	r2, r2, #32
 8002844:	6022      	strmi	r2, [r4, #0]
 8002846:	b91b      	cbnz	r3, 8002850 <_printf_i+0x178>
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	f022 0220 	bic.w	r2, r2, #32
 800284e:	6022      	str	r2, [r4, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	e7b1      	b.n	80027b8 <_printf_i+0xe0>
 8002854:	4675      	mov	r5, lr
 8002856:	fbb3 f0f2 	udiv	r0, r3, r2
 800285a:	fb02 3310 	mls	r3, r2, r0, r3
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002864:	4603      	mov	r3, r0
 8002866:	2800      	cmp	r0, #0
 8002868:	d1f5      	bne.n	8002856 <_printf_i+0x17e>
 800286a:	e7b7      	b.n	80027dc <_printf_i+0x104>
 800286c:	6808      	ldr	r0, [r1, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002874:	6949      	ldr	r1, [r1, #20]
 8002876:	d004      	beq.n	8002882 <_printf_i+0x1aa>
 8002878:	1d10      	adds	r0, r2, #4
 800287a:	6018      	str	r0, [r3, #0]
 800287c:	6813      	ldr	r3, [r2, #0]
 800287e:	6019      	str	r1, [r3, #0]
 8002880:	e007      	b.n	8002892 <_printf_i+0x1ba>
 8002882:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002886:	f102 0004 	add.w	r0, r2, #4
 800288a:	6018      	str	r0, [r3, #0]
 800288c:	6813      	ldr	r3, [r2, #0]
 800288e:	d0f6      	beq.n	800287e <_printf_i+0x1a6>
 8002890:	8019      	strh	r1, [r3, #0]
 8002892:	2300      	movs	r3, #0
 8002894:	4675      	mov	r5, lr
 8002896:	6123      	str	r3, [r4, #16]
 8002898:	e7b1      	b.n	80027fe <_printf_i+0x126>
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	1d11      	adds	r1, r2, #4
 800289e:	6019      	str	r1, [r3, #0]
 80028a0:	6815      	ldr	r5, [r2, #0]
 80028a2:	2100      	movs	r1, #0
 80028a4:	6862      	ldr	r2, [r4, #4]
 80028a6:	4628      	mov	r0, r5
 80028a8:	f000 fa94 	bl	8002dd4 <memchr>
 80028ac:	b108      	cbz	r0, 80028b2 <_printf_i+0x1da>
 80028ae:	1b40      	subs	r0, r0, r5
 80028b0:	6060      	str	r0, [r4, #4]
 80028b2:	6863      	ldr	r3, [r4, #4]
 80028b4:	6123      	str	r3, [r4, #16]
 80028b6:	2300      	movs	r3, #0
 80028b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028bc:	e79f      	b.n	80027fe <_printf_i+0x126>
 80028be:	6923      	ldr	r3, [r4, #16]
 80028c0:	462a      	mov	r2, r5
 80028c2:	4639      	mov	r1, r7
 80028c4:	4630      	mov	r0, r6
 80028c6:	47c0      	blx	r8
 80028c8:	3001      	adds	r0, #1
 80028ca:	d0a2      	beq.n	8002812 <_printf_i+0x13a>
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	079b      	lsls	r3, r3, #30
 80028d0:	d507      	bpl.n	80028e2 <_printf_i+0x20a>
 80028d2:	2500      	movs	r5, #0
 80028d4:	f104 0919 	add.w	r9, r4, #25
 80028d8:	68e3      	ldr	r3, [r4, #12]
 80028da:	9a03      	ldr	r2, [sp, #12]
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	429d      	cmp	r5, r3
 80028e0:	db05      	blt.n	80028ee <_printf_i+0x216>
 80028e2:	68e0      	ldr	r0, [r4, #12]
 80028e4:	9b03      	ldr	r3, [sp, #12]
 80028e6:	4298      	cmp	r0, r3
 80028e8:	bfb8      	it	lt
 80028ea:	4618      	movlt	r0, r3
 80028ec:	e793      	b.n	8002816 <_printf_i+0x13e>
 80028ee:	2301      	movs	r3, #1
 80028f0:	464a      	mov	r2, r9
 80028f2:	4639      	mov	r1, r7
 80028f4:	4630      	mov	r0, r6
 80028f6:	47c0      	blx	r8
 80028f8:	3001      	adds	r0, #1
 80028fa:	d08a      	beq.n	8002812 <_printf_i+0x13a>
 80028fc:	3501      	adds	r5, #1
 80028fe:	e7eb      	b.n	80028d8 <_printf_i+0x200>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1a7      	bne.n	8002854 <_printf_i+0x17c>
 8002904:	780b      	ldrb	r3, [r1, #0]
 8002906:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800290a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800290e:	e765      	b.n	80027dc <_printf_i+0x104>
 8002910:	08003082 	.word	0x08003082
 8002914:	08003071 	.word	0x08003071

08002918 <_sbrk_r>:
 8002918:	b538      	push	{r3, r4, r5, lr}
 800291a:	2300      	movs	r3, #0
 800291c:	4c05      	ldr	r4, [pc, #20]	; (8002934 <_sbrk_r+0x1c>)
 800291e:	4605      	mov	r5, r0
 8002920:	4608      	mov	r0, r1
 8002922:	6023      	str	r3, [r4, #0]
 8002924:	f000 fb0e 	bl	8002f44 <_sbrk>
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	d102      	bne.n	8002932 <_sbrk_r+0x1a>
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	b103      	cbz	r3, 8002932 <_sbrk_r+0x1a>
 8002930:	602b      	str	r3, [r5, #0]
 8002932:	bd38      	pop	{r3, r4, r5, pc}
 8002934:	200001d0 	.word	0x200001d0

08002938 <__sread>:
 8002938:	b510      	push	{r4, lr}
 800293a:	460c      	mov	r4, r1
 800293c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002940:	f000 faa4 	bl	8002e8c <_read_r>
 8002944:	2800      	cmp	r0, #0
 8002946:	bfab      	itete	ge
 8002948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800294a:	89a3      	ldrhlt	r3, [r4, #12]
 800294c:	181b      	addge	r3, r3, r0
 800294e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002952:	bfac      	ite	ge
 8002954:	6563      	strge	r3, [r4, #84]	; 0x54
 8002956:	81a3      	strhlt	r3, [r4, #12]
 8002958:	bd10      	pop	{r4, pc}

0800295a <__swrite>:
 800295a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800295e:	461f      	mov	r7, r3
 8002960:	898b      	ldrh	r3, [r1, #12]
 8002962:	4605      	mov	r5, r0
 8002964:	05db      	lsls	r3, r3, #23
 8002966:	460c      	mov	r4, r1
 8002968:	4616      	mov	r6, r2
 800296a:	d505      	bpl.n	8002978 <__swrite+0x1e>
 800296c:	2302      	movs	r3, #2
 800296e:	2200      	movs	r2, #0
 8002970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002974:	f000 f9b8 	bl	8002ce8 <_lseek_r>
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	4632      	mov	r2, r6
 800297c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002980:	81a3      	strh	r3, [r4, #12]
 8002982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002986:	463b      	mov	r3, r7
 8002988:	4628      	mov	r0, r5
 800298a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800298e:	f000 b869 	b.w	8002a64 <_write_r>

08002992 <__sseek>:
 8002992:	b510      	push	{r4, lr}
 8002994:	460c      	mov	r4, r1
 8002996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800299a:	f000 f9a5 	bl	8002ce8 <_lseek_r>
 800299e:	1c43      	adds	r3, r0, #1
 80029a0:	89a3      	ldrh	r3, [r4, #12]
 80029a2:	bf15      	itete	ne
 80029a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80029a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029ae:	81a3      	strheq	r3, [r4, #12]
 80029b0:	bf18      	it	ne
 80029b2:	81a3      	strhne	r3, [r4, #12]
 80029b4:	bd10      	pop	{r4, pc}

080029b6 <__sclose>:
 80029b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ba:	f000 b8d3 	b.w	8002b64 <_close_r>
	...

080029c0 <__swbuf_r>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	460e      	mov	r6, r1
 80029c4:	4614      	mov	r4, r2
 80029c6:	4605      	mov	r5, r0
 80029c8:	b118      	cbz	r0, 80029d2 <__swbuf_r+0x12>
 80029ca:	6983      	ldr	r3, [r0, #24]
 80029cc:	b90b      	cbnz	r3, 80029d2 <__swbuf_r+0x12>
 80029ce:	f7ff fbdd 	bl	800218c <__sinit>
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <__swbuf_r+0x98>)
 80029d4:	429c      	cmp	r4, r3
 80029d6:	d12a      	bne.n	8002a2e <__swbuf_r+0x6e>
 80029d8:	686c      	ldr	r4, [r5, #4]
 80029da:	69a3      	ldr	r3, [r4, #24]
 80029dc:	60a3      	str	r3, [r4, #8]
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	071a      	lsls	r2, r3, #28
 80029e2:	d52e      	bpl.n	8002a42 <__swbuf_r+0x82>
 80029e4:	6923      	ldr	r3, [r4, #16]
 80029e6:	b363      	cbz	r3, 8002a42 <__swbuf_r+0x82>
 80029e8:	6923      	ldr	r3, [r4, #16]
 80029ea:	6820      	ldr	r0, [r4, #0]
 80029ec:	b2f6      	uxtb	r6, r6
 80029ee:	1ac0      	subs	r0, r0, r3
 80029f0:	6963      	ldr	r3, [r4, #20]
 80029f2:	4637      	mov	r7, r6
 80029f4:	4298      	cmp	r0, r3
 80029f6:	db04      	blt.n	8002a02 <__swbuf_r+0x42>
 80029f8:	4621      	mov	r1, r4
 80029fa:	4628      	mov	r0, r5
 80029fc:	f000 f94a 	bl	8002c94 <_fflush_r>
 8002a00:	bb28      	cbnz	r0, 8002a4e <__swbuf_r+0x8e>
 8002a02:	68a3      	ldr	r3, [r4, #8]
 8002a04:	3001      	adds	r0, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	60a3      	str	r3, [r4, #8]
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	6022      	str	r2, [r4, #0]
 8002a10:	701e      	strb	r6, [r3, #0]
 8002a12:	6963      	ldr	r3, [r4, #20]
 8002a14:	4298      	cmp	r0, r3
 8002a16:	d004      	beq.n	8002a22 <__swbuf_r+0x62>
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	07db      	lsls	r3, r3, #31
 8002a1c:	d519      	bpl.n	8002a52 <__swbuf_r+0x92>
 8002a1e:	2e0a      	cmp	r6, #10
 8002a20:	d117      	bne.n	8002a52 <__swbuf_r+0x92>
 8002a22:	4621      	mov	r1, r4
 8002a24:	4628      	mov	r0, r5
 8002a26:	f000 f935 	bl	8002c94 <_fflush_r>
 8002a2a:	b190      	cbz	r0, 8002a52 <__swbuf_r+0x92>
 8002a2c:	e00f      	b.n	8002a4e <__swbuf_r+0x8e>
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <__swbuf_r+0x9c>)
 8002a30:	429c      	cmp	r4, r3
 8002a32:	d101      	bne.n	8002a38 <__swbuf_r+0x78>
 8002a34:	68ac      	ldr	r4, [r5, #8]
 8002a36:	e7d0      	b.n	80029da <__swbuf_r+0x1a>
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <__swbuf_r+0xa0>)
 8002a3a:	429c      	cmp	r4, r3
 8002a3c:	bf08      	it	eq
 8002a3e:	68ec      	ldreq	r4, [r5, #12]
 8002a40:	e7cb      	b.n	80029da <__swbuf_r+0x1a>
 8002a42:	4621      	mov	r1, r4
 8002a44:	4628      	mov	r0, r5
 8002a46:	f000 f81f 	bl	8002a88 <__swsetup_r>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d0cc      	beq.n	80029e8 <__swbuf_r+0x28>
 8002a4e:	f04f 37ff 	mov.w	r7, #4294967295
 8002a52:	4638      	mov	r0, r7
 8002a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	0800301c 	.word	0x0800301c
 8002a5c:	0800303c 	.word	0x0800303c
 8002a60:	08002ffc 	.word	0x08002ffc

08002a64 <_write_r>:
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	4605      	mov	r5, r0
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4c05      	ldr	r4, [pc, #20]	; (8002a84 <_write_r+0x20>)
 8002a70:	6022      	str	r2, [r4, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	f000 fa74 	bl	8002f60 <_write>
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	d102      	bne.n	8002a82 <_write_r+0x1e>
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	b103      	cbz	r3, 8002a82 <_write_r+0x1e>
 8002a80:	602b      	str	r3, [r5, #0]
 8002a82:	bd38      	pop	{r3, r4, r5, pc}
 8002a84:	200001d0 	.word	0x200001d0

08002a88 <__swsetup_r>:
 8002a88:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <__swsetup_r+0xcc>)
 8002a8a:	b570      	push	{r4, r5, r6, lr}
 8002a8c:	681d      	ldr	r5, [r3, #0]
 8002a8e:	4606      	mov	r6, r0
 8002a90:	460c      	mov	r4, r1
 8002a92:	b125      	cbz	r5, 8002a9e <__swsetup_r+0x16>
 8002a94:	69ab      	ldr	r3, [r5, #24]
 8002a96:	b913      	cbnz	r3, 8002a9e <__swsetup_r+0x16>
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f7ff fb77 	bl	800218c <__sinit>
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <__swsetup_r+0xd0>)
 8002aa0:	429c      	cmp	r4, r3
 8002aa2:	d10f      	bne.n	8002ac4 <__swsetup_r+0x3c>
 8002aa4:	686c      	ldr	r4, [r5, #4]
 8002aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	0715      	lsls	r5, r2, #28
 8002aae:	d42c      	bmi.n	8002b0a <__swsetup_r+0x82>
 8002ab0:	06d0      	lsls	r0, r2, #27
 8002ab2:	d411      	bmi.n	8002ad8 <__swsetup_r+0x50>
 8002ab4:	2209      	movs	r2, #9
 8002ab6:	6032      	str	r2, [r6, #0]
 8002ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abc:	81a3      	strh	r3, [r4, #12]
 8002abe:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <__swsetup_r+0xd4>)
 8002ac6:	429c      	cmp	r4, r3
 8002ac8:	d101      	bne.n	8002ace <__swsetup_r+0x46>
 8002aca:	68ac      	ldr	r4, [r5, #8]
 8002acc:	e7eb      	b.n	8002aa6 <__swsetup_r+0x1e>
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <__swsetup_r+0xd8>)
 8002ad0:	429c      	cmp	r4, r3
 8002ad2:	bf08      	it	eq
 8002ad4:	68ec      	ldreq	r4, [r5, #12]
 8002ad6:	e7e6      	b.n	8002aa6 <__swsetup_r+0x1e>
 8002ad8:	0751      	lsls	r1, r2, #29
 8002ada:	d512      	bpl.n	8002b02 <__swsetup_r+0x7a>
 8002adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ade:	b141      	cbz	r1, 8002af2 <__swsetup_r+0x6a>
 8002ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ae4:	4299      	cmp	r1, r3
 8002ae6:	d002      	beq.n	8002aee <__swsetup_r+0x66>
 8002ae8:	4630      	mov	r0, r6
 8002aea:	f000 f983 	bl	8002df4 <_free_r>
 8002aee:	2300      	movs	r3, #0
 8002af0:	6363      	str	r3, [r4, #52]	; 0x34
 8002af2:	89a3      	ldrh	r3, [r4, #12]
 8002af4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002af8:	81a3      	strh	r3, [r4, #12]
 8002afa:	2300      	movs	r3, #0
 8002afc:	6063      	str	r3, [r4, #4]
 8002afe:	6923      	ldr	r3, [r4, #16]
 8002b00:	6023      	str	r3, [r4, #0]
 8002b02:	89a3      	ldrh	r3, [r4, #12]
 8002b04:	f043 0308 	orr.w	r3, r3, #8
 8002b08:	81a3      	strh	r3, [r4, #12]
 8002b0a:	6923      	ldr	r3, [r4, #16]
 8002b0c:	b94b      	cbnz	r3, 8002b22 <__swsetup_r+0x9a>
 8002b0e:	89a3      	ldrh	r3, [r4, #12]
 8002b10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d003      	beq.n	8002b22 <__swsetup_r+0x9a>
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	f000 f919 	bl	8002d54 <__smakebuf_r>
 8002b22:	89a2      	ldrh	r2, [r4, #12]
 8002b24:	f012 0301 	ands.w	r3, r2, #1
 8002b28:	d00c      	beq.n	8002b44 <__swsetup_r+0xbc>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60a3      	str	r3, [r4, #8]
 8002b2e:	6963      	ldr	r3, [r4, #20]
 8002b30:	425b      	negs	r3, r3
 8002b32:	61a3      	str	r3, [r4, #24]
 8002b34:	6923      	ldr	r3, [r4, #16]
 8002b36:	b953      	cbnz	r3, 8002b4e <__swsetup_r+0xc6>
 8002b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b40:	d1ba      	bne.n	8002ab8 <__swsetup_r+0x30>
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
 8002b44:	0792      	lsls	r2, r2, #30
 8002b46:	bf58      	it	pl
 8002b48:	6963      	ldrpl	r3, [r4, #20]
 8002b4a:	60a3      	str	r3, [r4, #8]
 8002b4c:	e7f2      	b.n	8002b34 <__swsetup_r+0xac>
 8002b4e:	2000      	movs	r0, #0
 8002b50:	e7f7      	b.n	8002b42 <__swsetup_r+0xba>
 8002b52:	bf00      	nop
 8002b54:	20000010 	.word	0x20000010
 8002b58:	0800301c 	.word	0x0800301c
 8002b5c:	0800303c 	.word	0x0800303c
 8002b60:	08002ffc 	.word	0x08002ffc

08002b64 <_close_r>:
 8002b64:	b538      	push	{r3, r4, r5, lr}
 8002b66:	2300      	movs	r3, #0
 8002b68:	4c05      	ldr	r4, [pc, #20]	; (8002b80 <_close_r+0x1c>)
 8002b6a:	4605      	mov	r5, r0
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	6023      	str	r3, [r4, #0]
 8002b70:	f000 f9c0 	bl	8002ef4 <_close>
 8002b74:	1c43      	adds	r3, r0, #1
 8002b76:	d102      	bne.n	8002b7e <_close_r+0x1a>
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	b103      	cbz	r3, 8002b7e <_close_r+0x1a>
 8002b7c:	602b      	str	r3, [r5, #0]
 8002b7e:	bd38      	pop	{r3, r4, r5, pc}
 8002b80:	200001d0 	.word	0x200001d0

08002b84 <__sflush_r>:
 8002b84:	898a      	ldrh	r2, [r1, #12]
 8002b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b8a:	4605      	mov	r5, r0
 8002b8c:	0710      	lsls	r0, r2, #28
 8002b8e:	460c      	mov	r4, r1
 8002b90:	d45a      	bmi.n	8002c48 <__sflush_r+0xc4>
 8002b92:	684b      	ldr	r3, [r1, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	dc05      	bgt.n	8002ba4 <__sflush_r+0x20>
 8002b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	dc02      	bgt.n	8002ba4 <__sflush_r+0x20>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ba6:	2e00      	cmp	r6, #0
 8002ba8:	d0f9      	beq.n	8002b9e <__sflush_r+0x1a>
 8002baa:	2300      	movs	r3, #0
 8002bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bb0:	682f      	ldr	r7, [r5, #0]
 8002bb2:	602b      	str	r3, [r5, #0]
 8002bb4:	d033      	beq.n	8002c1e <__sflush_r+0x9a>
 8002bb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	075a      	lsls	r2, r3, #29
 8002bbc:	d505      	bpl.n	8002bca <__sflush_r+0x46>
 8002bbe:	6863      	ldr	r3, [r4, #4]
 8002bc0:	1ac0      	subs	r0, r0, r3
 8002bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bc4:	b10b      	cbz	r3, 8002bca <__sflush_r+0x46>
 8002bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bc8:	1ac0      	subs	r0, r0, r3
 8002bca:	2300      	movs	r3, #0
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bd0:	6a21      	ldr	r1, [r4, #32]
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	47b0      	blx	r6
 8002bd6:	1c43      	adds	r3, r0, #1
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	d106      	bne.n	8002bea <__sflush_r+0x66>
 8002bdc:	6829      	ldr	r1, [r5, #0]
 8002bde:	291d      	cmp	r1, #29
 8002be0:	d84b      	bhi.n	8002c7a <__sflush_r+0xf6>
 8002be2:	4a2b      	ldr	r2, [pc, #172]	; (8002c90 <__sflush_r+0x10c>)
 8002be4:	40ca      	lsrs	r2, r1
 8002be6:	07d6      	lsls	r6, r2, #31
 8002be8:	d547      	bpl.n	8002c7a <__sflush_r+0xf6>
 8002bea:	2200      	movs	r2, #0
 8002bec:	6062      	str	r2, [r4, #4]
 8002bee:	6922      	ldr	r2, [r4, #16]
 8002bf0:	04d9      	lsls	r1, r3, #19
 8002bf2:	6022      	str	r2, [r4, #0]
 8002bf4:	d504      	bpl.n	8002c00 <__sflush_r+0x7c>
 8002bf6:	1c42      	adds	r2, r0, #1
 8002bf8:	d101      	bne.n	8002bfe <__sflush_r+0x7a>
 8002bfa:	682b      	ldr	r3, [r5, #0]
 8002bfc:	b903      	cbnz	r3, 8002c00 <__sflush_r+0x7c>
 8002bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8002c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c02:	602f      	str	r7, [r5, #0]
 8002c04:	2900      	cmp	r1, #0
 8002c06:	d0ca      	beq.n	8002b9e <__sflush_r+0x1a>
 8002c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c0c:	4299      	cmp	r1, r3
 8002c0e:	d002      	beq.n	8002c16 <__sflush_r+0x92>
 8002c10:	4628      	mov	r0, r5
 8002c12:	f000 f8ef 	bl	8002df4 <_free_r>
 8002c16:	2000      	movs	r0, #0
 8002c18:	6360      	str	r0, [r4, #52]	; 0x34
 8002c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c1e:	6a21      	ldr	r1, [r4, #32]
 8002c20:	2301      	movs	r3, #1
 8002c22:	4628      	mov	r0, r5
 8002c24:	47b0      	blx	r6
 8002c26:	1c41      	adds	r1, r0, #1
 8002c28:	d1c6      	bne.n	8002bb8 <__sflush_r+0x34>
 8002c2a:	682b      	ldr	r3, [r5, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0c3      	beq.n	8002bb8 <__sflush_r+0x34>
 8002c30:	2b1d      	cmp	r3, #29
 8002c32:	d001      	beq.n	8002c38 <__sflush_r+0xb4>
 8002c34:	2b16      	cmp	r3, #22
 8002c36:	d101      	bne.n	8002c3c <__sflush_r+0xb8>
 8002c38:	602f      	str	r7, [r5, #0]
 8002c3a:	e7b0      	b.n	8002b9e <__sflush_r+0x1a>
 8002c3c:	89a3      	ldrh	r3, [r4, #12]
 8002c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c42:	81a3      	strh	r3, [r4, #12]
 8002c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c48:	690f      	ldr	r7, [r1, #16]
 8002c4a:	2f00      	cmp	r7, #0
 8002c4c:	d0a7      	beq.n	8002b9e <__sflush_r+0x1a>
 8002c4e:	0793      	lsls	r3, r2, #30
 8002c50:	bf18      	it	ne
 8002c52:	2300      	movne	r3, #0
 8002c54:	680e      	ldr	r6, [r1, #0]
 8002c56:	bf08      	it	eq
 8002c58:	694b      	ldreq	r3, [r1, #20]
 8002c5a:	eba6 0807 	sub.w	r8, r6, r7
 8002c5e:	600f      	str	r7, [r1, #0]
 8002c60:	608b      	str	r3, [r1, #8]
 8002c62:	f1b8 0f00 	cmp.w	r8, #0
 8002c66:	dd9a      	ble.n	8002b9e <__sflush_r+0x1a>
 8002c68:	4643      	mov	r3, r8
 8002c6a:	463a      	mov	r2, r7
 8002c6c:	6a21      	ldr	r1, [r4, #32]
 8002c6e:	4628      	mov	r0, r5
 8002c70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c72:	47b0      	blx	r6
 8002c74:	2800      	cmp	r0, #0
 8002c76:	dc07      	bgt.n	8002c88 <__sflush_r+0x104>
 8002c78:	89a3      	ldrh	r3, [r4, #12]
 8002c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c7e:	81a3      	strh	r3, [r4, #12]
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c88:	4407      	add	r7, r0
 8002c8a:	eba8 0800 	sub.w	r8, r8, r0
 8002c8e:	e7e8      	b.n	8002c62 <__sflush_r+0xde>
 8002c90:	20400001 	.word	0x20400001

08002c94 <_fflush_r>:
 8002c94:	b538      	push	{r3, r4, r5, lr}
 8002c96:	690b      	ldr	r3, [r1, #16]
 8002c98:	4605      	mov	r5, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	b1db      	cbz	r3, 8002cd6 <_fflush_r+0x42>
 8002c9e:	b118      	cbz	r0, 8002ca8 <_fflush_r+0x14>
 8002ca0:	6983      	ldr	r3, [r0, #24]
 8002ca2:	b90b      	cbnz	r3, 8002ca8 <_fflush_r+0x14>
 8002ca4:	f7ff fa72 	bl	800218c <__sinit>
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <_fflush_r+0x48>)
 8002caa:	429c      	cmp	r4, r3
 8002cac:	d109      	bne.n	8002cc2 <_fflush_r+0x2e>
 8002cae:	686c      	ldr	r4, [r5, #4]
 8002cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cb4:	b17b      	cbz	r3, 8002cd6 <_fflush_r+0x42>
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	4628      	mov	r0, r5
 8002cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cbe:	f7ff bf61 	b.w	8002b84 <__sflush_r>
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <_fflush_r+0x4c>)
 8002cc4:	429c      	cmp	r4, r3
 8002cc6:	d101      	bne.n	8002ccc <_fflush_r+0x38>
 8002cc8:	68ac      	ldr	r4, [r5, #8]
 8002cca:	e7f1      	b.n	8002cb0 <_fflush_r+0x1c>
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <_fflush_r+0x50>)
 8002cce:	429c      	cmp	r4, r3
 8002cd0:	bf08      	it	eq
 8002cd2:	68ec      	ldreq	r4, [r5, #12]
 8002cd4:	e7ec      	b.n	8002cb0 <_fflush_r+0x1c>
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	bd38      	pop	{r3, r4, r5, pc}
 8002cda:	bf00      	nop
 8002cdc:	0800301c 	.word	0x0800301c
 8002ce0:	0800303c 	.word	0x0800303c
 8002ce4:	08002ffc 	.word	0x08002ffc

08002ce8 <_lseek_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4605      	mov	r5, r0
 8002cec:	4608      	mov	r0, r1
 8002cee:	4611      	mov	r1, r2
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4c05      	ldr	r4, [pc, #20]	; (8002d08 <_lseek_r+0x20>)
 8002cf4:	6022      	str	r2, [r4, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f000 f914 	bl	8002f24 <_lseek>
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	d102      	bne.n	8002d06 <_lseek_r+0x1e>
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	b103      	cbz	r3, 8002d06 <_lseek_r+0x1e>
 8002d04:	602b      	str	r3, [r5, #0]
 8002d06:	bd38      	pop	{r3, r4, r5, pc}
 8002d08:	200001d0 	.word	0x200001d0

08002d0c <__swhatbuf_r>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	460e      	mov	r6, r1
 8002d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d14:	b090      	sub	sp, #64	; 0x40
 8002d16:	2900      	cmp	r1, #0
 8002d18:	4614      	mov	r4, r2
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	da07      	bge.n	8002d2e <__swhatbuf_r+0x22>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	602b      	str	r3, [r5, #0]
 8002d22:	89b3      	ldrh	r3, [r6, #12]
 8002d24:	061a      	lsls	r2, r3, #24
 8002d26:	d410      	bmi.n	8002d4a <__swhatbuf_r+0x3e>
 8002d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2c:	e00e      	b.n	8002d4c <__swhatbuf_r+0x40>
 8002d2e:	aa01      	add	r2, sp, #4
 8002d30:	f000 f8be 	bl	8002eb0 <_fstat_r>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	dbf2      	blt.n	8002d1e <__swhatbuf_r+0x12>
 8002d38:	9a02      	ldr	r2, [sp, #8]
 8002d3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d42:	425a      	negs	r2, r3
 8002d44:	415a      	adcs	r2, r3
 8002d46:	602a      	str	r2, [r5, #0]
 8002d48:	e7ee      	b.n	8002d28 <__swhatbuf_r+0x1c>
 8002d4a:	2340      	movs	r3, #64	; 0x40
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	6023      	str	r3, [r4, #0]
 8002d50:	b010      	add	sp, #64	; 0x40
 8002d52:	bd70      	pop	{r4, r5, r6, pc}

08002d54 <__smakebuf_r>:
 8002d54:	898b      	ldrh	r3, [r1, #12]
 8002d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d58:	079d      	lsls	r5, r3, #30
 8002d5a:	4606      	mov	r6, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	d507      	bpl.n	8002d70 <__smakebuf_r+0x1c>
 8002d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	6123      	str	r3, [r4, #16]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	6163      	str	r3, [r4, #20]
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	ab01      	add	r3, sp, #4
 8002d72:	466a      	mov	r2, sp
 8002d74:	f7ff ffca 	bl	8002d0c <__swhatbuf_r>
 8002d78:	9900      	ldr	r1, [sp, #0]
 8002d7a:	4605      	mov	r5, r0
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f7ff fa97 	bl	80022b0 <_malloc_r>
 8002d82:	b948      	cbnz	r0, 8002d98 <__smakebuf_r+0x44>
 8002d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d88:	059a      	lsls	r2, r3, #22
 8002d8a:	d4ef      	bmi.n	8002d6c <__smakebuf_r+0x18>
 8002d8c:	f023 0303 	bic.w	r3, r3, #3
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	81a3      	strh	r3, [r4, #12]
 8002d96:	e7e3      	b.n	8002d60 <__smakebuf_r+0xc>
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <__smakebuf_r+0x7c>)
 8002d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d9c:	89a3      	ldrh	r3, [r4, #12]
 8002d9e:	6020      	str	r0, [r4, #0]
 8002da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da4:	81a3      	strh	r3, [r4, #12]
 8002da6:	9b00      	ldr	r3, [sp, #0]
 8002da8:	6120      	str	r0, [r4, #16]
 8002daa:	6163      	str	r3, [r4, #20]
 8002dac:	9b01      	ldr	r3, [sp, #4]
 8002dae:	b15b      	cbz	r3, 8002dc8 <__smakebuf_r+0x74>
 8002db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002db4:	4630      	mov	r0, r6
 8002db6:	f000 f88d 	bl	8002ed4 <_isatty_r>
 8002dba:	b128      	cbz	r0, 8002dc8 <__smakebuf_r+0x74>
 8002dbc:	89a3      	ldrh	r3, [r4, #12]
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	81a3      	strh	r3, [r4, #12]
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	431d      	orrs	r5, r3
 8002dcc:	81a5      	strh	r5, [r4, #12]
 8002dce:	e7cd      	b.n	8002d6c <__smakebuf_r+0x18>
 8002dd0:	0800210d 	.word	0x0800210d

08002dd4 <memchr>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	b2c9      	uxtb	r1, r1
 8002dd8:	4402      	add	r2, r0
 8002dda:	4290      	cmp	r0, r2
 8002ddc:	4603      	mov	r3, r0
 8002dde:	d101      	bne.n	8002de4 <memchr+0x10>
 8002de0:	2000      	movs	r0, #0
 8002de2:	bd10      	pop	{r4, pc}
 8002de4:	781c      	ldrb	r4, [r3, #0]
 8002de6:	3001      	adds	r0, #1
 8002de8:	428c      	cmp	r4, r1
 8002dea:	d1f6      	bne.n	8002dda <memchr+0x6>
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd10      	pop	{r4, pc}

08002df0 <__malloc_lock>:
 8002df0:	4770      	bx	lr

08002df2 <__malloc_unlock>:
 8002df2:	4770      	bx	lr

08002df4 <_free_r>:
 8002df4:	b538      	push	{r3, r4, r5, lr}
 8002df6:	4605      	mov	r5, r0
 8002df8:	2900      	cmp	r1, #0
 8002dfa:	d043      	beq.n	8002e84 <_free_r+0x90>
 8002dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e00:	1f0c      	subs	r4, r1, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bfb8      	it	lt
 8002e06:	18e4      	addlt	r4, r4, r3
 8002e08:	f7ff fff2 	bl	8002df0 <__malloc_lock>
 8002e0c:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <_free_r+0x94>)
 8002e0e:	6813      	ldr	r3, [r2, #0]
 8002e10:	4610      	mov	r0, r2
 8002e12:	b933      	cbnz	r3, 8002e22 <_free_r+0x2e>
 8002e14:	6063      	str	r3, [r4, #4]
 8002e16:	6014      	str	r4, [r2, #0]
 8002e18:	4628      	mov	r0, r5
 8002e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e1e:	f7ff bfe8 	b.w	8002df2 <__malloc_unlock>
 8002e22:	42a3      	cmp	r3, r4
 8002e24:	d90b      	bls.n	8002e3e <_free_r+0x4a>
 8002e26:	6821      	ldr	r1, [r4, #0]
 8002e28:	1862      	adds	r2, r4, r1
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	bf01      	itttt	eq
 8002e2e:	681a      	ldreq	r2, [r3, #0]
 8002e30:	685b      	ldreq	r3, [r3, #4]
 8002e32:	1852      	addeq	r2, r2, r1
 8002e34:	6022      	streq	r2, [r4, #0]
 8002e36:	6063      	str	r3, [r4, #4]
 8002e38:	6004      	str	r4, [r0, #0]
 8002e3a:	e7ed      	b.n	8002e18 <_free_r+0x24>
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	b10a      	cbz	r2, 8002e46 <_free_r+0x52>
 8002e42:	42a2      	cmp	r2, r4
 8002e44:	d9fa      	bls.n	8002e3c <_free_r+0x48>
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	1858      	adds	r0, r3, r1
 8002e4a:	42a0      	cmp	r0, r4
 8002e4c:	d10b      	bne.n	8002e66 <_free_r+0x72>
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	4401      	add	r1, r0
 8002e52:	1858      	adds	r0, r3, r1
 8002e54:	4282      	cmp	r2, r0
 8002e56:	6019      	str	r1, [r3, #0]
 8002e58:	d1de      	bne.n	8002e18 <_free_r+0x24>
 8002e5a:	6810      	ldr	r0, [r2, #0]
 8002e5c:	6852      	ldr	r2, [r2, #4]
 8002e5e:	4401      	add	r1, r0
 8002e60:	6019      	str	r1, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	e7d8      	b.n	8002e18 <_free_r+0x24>
 8002e66:	d902      	bls.n	8002e6e <_free_r+0x7a>
 8002e68:	230c      	movs	r3, #12
 8002e6a:	602b      	str	r3, [r5, #0]
 8002e6c:	e7d4      	b.n	8002e18 <_free_r+0x24>
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	1821      	adds	r1, r4, r0
 8002e72:	428a      	cmp	r2, r1
 8002e74:	bf01      	itttt	eq
 8002e76:	6811      	ldreq	r1, [r2, #0]
 8002e78:	6852      	ldreq	r2, [r2, #4]
 8002e7a:	1809      	addeq	r1, r1, r0
 8002e7c:	6021      	streq	r1, [r4, #0]
 8002e7e:	6062      	str	r2, [r4, #4]
 8002e80:	605c      	str	r4, [r3, #4]
 8002e82:	e7c9      	b.n	8002e18 <_free_r+0x24>
 8002e84:	bd38      	pop	{r3, r4, r5, pc}
 8002e86:	bf00      	nop
 8002e88:	20000090 	.word	0x20000090

08002e8c <_read_r>:
 8002e8c:	b538      	push	{r3, r4, r5, lr}
 8002e8e:	4605      	mov	r5, r0
 8002e90:	4608      	mov	r0, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	2200      	movs	r2, #0
 8002e96:	4c05      	ldr	r4, [pc, #20]	; (8002eac <_read_r+0x20>)
 8002e98:	6022      	str	r2, [r4, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f000 f84a 	bl	8002f34 <_read>
 8002ea0:	1c43      	adds	r3, r0, #1
 8002ea2:	d102      	bne.n	8002eaa <_read_r+0x1e>
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	b103      	cbz	r3, 8002eaa <_read_r+0x1e>
 8002ea8:	602b      	str	r3, [r5, #0]
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	200001d0 	.word	0x200001d0

08002eb0 <_fstat_r>:
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	4c06      	ldr	r4, [pc, #24]	; (8002ed0 <_fstat_r+0x20>)
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	4608      	mov	r0, r1
 8002eba:	4611      	mov	r1, r2
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	f000 f821 	bl	8002f04 <_fstat>
 8002ec2:	1c43      	adds	r3, r0, #1
 8002ec4:	d102      	bne.n	8002ecc <_fstat_r+0x1c>
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	b103      	cbz	r3, 8002ecc <_fstat_r+0x1c>
 8002eca:	602b      	str	r3, [r5, #0]
 8002ecc:	bd38      	pop	{r3, r4, r5, pc}
 8002ece:	bf00      	nop
 8002ed0:	200001d0 	.word	0x200001d0

08002ed4 <_isatty_r>:
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	4c05      	ldr	r4, [pc, #20]	; (8002ef0 <_isatty_r+0x1c>)
 8002eda:	4605      	mov	r5, r0
 8002edc:	4608      	mov	r0, r1
 8002ede:	6023      	str	r3, [r4, #0]
 8002ee0:	f000 f818 	bl	8002f14 <_isatty>
 8002ee4:	1c43      	adds	r3, r0, #1
 8002ee6:	d102      	bne.n	8002eee <_isatty_r+0x1a>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	b103      	cbz	r3, 8002eee <_isatty_r+0x1a>
 8002eec:	602b      	str	r3, [r5, #0]
 8002eee:	bd38      	pop	{r3, r4, r5, pc}
 8002ef0:	200001d0 	.word	0x200001d0

08002ef4 <_close>:
 8002ef4:	2258      	movs	r2, #88	; 0x58
 8002ef6:	4b02      	ldr	r3, [pc, #8]	; (8002f00 <_close+0xc>)
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	4770      	bx	lr
 8002f00:	200001d0 	.word	0x200001d0

08002f04 <_fstat>:
 8002f04:	2258      	movs	r2, #88	; 0x58
 8002f06:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <_fstat+0xc>)
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	4770      	bx	lr
 8002f10:	200001d0 	.word	0x200001d0

08002f14 <_isatty>:
 8002f14:	2258      	movs	r2, #88	; 0x58
 8002f16:	4b02      	ldr	r3, [pc, #8]	; (8002f20 <_isatty+0xc>)
 8002f18:	2000      	movs	r0, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	200001d0 	.word	0x200001d0

08002f24 <_lseek>:
 8002f24:	2258      	movs	r2, #88	; 0x58
 8002f26:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <_lseek+0xc>)
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	4770      	bx	lr
 8002f30:	200001d0 	.word	0x200001d0

08002f34 <_read>:
 8002f34:	2258      	movs	r2, #88	; 0x58
 8002f36:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <_read+0xc>)
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	4770      	bx	lr
 8002f40:	200001d0 	.word	0x200001d0

08002f44 <_sbrk>:
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <_sbrk+0x14>)
 8002f46:	4602      	mov	r2, r0
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	b909      	cbnz	r1, 8002f50 <_sbrk+0xc>
 8002f4c:	4903      	ldr	r1, [pc, #12]	; (8002f5c <_sbrk+0x18>)
 8002f4e:	6019      	str	r1, [r3, #0]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	4402      	add	r2, r0
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	4770      	bx	lr
 8002f58:	20000098 	.word	0x20000098
 8002f5c:	200001d8 	.word	0x200001d8

08002f60 <_write>:
 8002f60:	2258      	movs	r2, #88	; 0x58
 8002f62:	4b02      	ldr	r3, [pc, #8]	; (8002f6c <_write+0xc>)
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	4770      	bx	lr
 8002f6c:	200001d0 	.word	0x200001d0

08002f70 <_init>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr

08002f7c <_fini>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr
